<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component.
     You cannot run it independently. -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="editor.display.dialog.*"
    title="Simulation Settings" width="600" creationComplete="OnInitPanel()">

    <mx:HBox width="100%" borderStyle="solid" borderThickness="1" paddingTop="10" paddingBottom="10" horizontalAlign="center">

       <mx:HBox visible="false">
          <mx:TextInput width="25" />
          <mx:TextInput width="25" />
       </mx:HBox>
      
       <mx:Grid id="Grid_Settings">
          <mx:GridRow>
             <mx:GridItem>
                <mx:Label text="Preferred FPS (frames per second):" textAlign="right"/>
             </mx:GridItem>
             <mx:GridItem>
                <mx:TextInput id="Text_PreferredFPS" width="100" />
                <mx:Label text="(from 10 to 100)"/>
             </mx:GridItem>
          </mx:GridRow>
          <mx:GridRow>
             <mx:GridItem>
                <mx:Label text="Enable Physics Simulation:" textAlign="right"/>
             </mx:GridItem>
             <mx:GridItem>
               <mx:RadioButtonGroup id="RadioButtonGroup_PhysicsSimulationEnabled"/>
               <mx:RadioButton groupName="RadioButtonGroup_PhysicsSimulationEnabled" click="OnPhysicsEnabledChanged ();" id="RadioButton_PhysicsSimulationEnabledYes" label="Yes"/>
               <mx:RadioButton groupName="RadioButtonGroup_PhysicsSimulationEnabled" click="OnPhysicsEnabledChanged ();" id="RadioButton_PhysicsSimulationEnabledNo" label="No"/>
             </mx:GridItem>
          </mx:GridRow>
          <mx:GridRow>
             <mx:GridItem>
                <mx:Label text="Simulation Step Time Length:" textAlign="right"/>
             </mx:GridItem>
             <mx:GridItem>
                <mx:TextInput id="Text_StepTimeLength" width="100" />
                <mx:Label text="(second)"/>
             </mx:GridItem>
          </mx:GridRow>
          
          <mx:GridRow>
             <mx:GridItem>
                <mx:Label text="Enable Auto Sleeping:" textAlign="right"/>
             </mx:GridItem>
             <mx:GridItem>
                <mx:RadioButtonGroup id="RadioButtonGroup_DoSleep"/>
                <mx:RadioButton groupName="RadioButtonGroup_DoSleep" id="RadioButton_DoSleepYes" label="Yes"/>
                <mx:RadioButton groupName="RadioButtonGroup_DoSleep" id="RadioButton_DoSleepNo" label="No"/>
             </mx:GridItem>
          </mx:GridRow>
          
          <mx:GridRow id="Box_SimulationQuanlity" height="0">
             <mx:GridItem>
                <mx:Label text="Simulation Quality:" textAlign="right" doubleClickEnabled="true" doubleClick="Box_DetailQualitySettings.visible = ! Box_DetailQualitySettings.visible;"/>
             </mx:GridItem>
             <mx:GridItem>
                <mx:RadioButtonGroup id="RadioButtonGroup_SimulationQuality"/>
                <mx:RadioButton groupName="RadioButtonGroup_SimulationQuality" click="OnQualityChanged ();" id="RadioButton_SimulationQualityLow" label="low"/>
                <mx:RadioButton groupName="RadioButtonGroup_SimulationQuality" click="OnQualityChanged ();" id="RadioButton_SimulationQualityMedium" label="medium"/>
                <mx:RadioButton groupName="RadioButtonGroup_SimulationQuality" click="OnQualityChanged ();" id="RadioButton_SimulationQualityHigh" label="high"/>
                <mx:HBox id="Box_DetailQualitySettings" visible="false">
                   <mx:TextInput id="Text_VelocityIterations" width="25" />
                   <mx:TextInput id="Text_PositionIterations" width="25" />
                </mx:HBox>
             </mx:GridItem>
          </mx:GridRow>
          
          <mx:GridRow id="Box_TOI">
             <mx:GridItem>
                <mx:Label text="Check Time Of Impact (TOI):" textAlign="right" doubleClickEnabled="true" 
                           doubleClick="if (Box_SimulationQuanlity.parent == null) {Box_SimulationQuanlity.height = Box_TOI.height; Grid_Settings.addChildAt (Box_SimulationQuanlity, Grid_Settings.getChildIndex (Box_TOI));}"/>
             </mx:GridItem>
             <mx:GridItem>
                <mx:RadioButtonGroup id="RadioButtonGroup_TOI"/>
                <mx:RadioButton groupName="RadioButtonGroup_TOI" id="RadioButton_ToiYes" label="Yes"/>
                <mx:RadioButton groupName="RadioButtonGroup_TOI" id="RadioButton_ToiNo" label="No (ignore shape bullet option)"/>
             </mx:GridItem>
          </mx:GridRow>
          
          <mx:GridRow>
             <mx:GridItem>
                <mx:Label text="Initial SpeedX (steps per frame):" textAlign="right"/>
             </mx:GridItem>
             <mx:GridItem>
                <mx:RadioButtonGroup id="RadioButtonGroup_InitialSpeedX"/>
                <mx:RadioButton groupName="RadioButtonGroup_InitialSpeedX" id="RadioButton_SpeedX0" label="x0"/>
                <mx:RadioButton groupName="RadioButtonGroup_InitialSpeedX" id="RadioButton_SpeedX1" label="x1"/>
                <mx:RadioButton groupName="RadioButtonGroup_InitialSpeedX" id="RadioButton_SpeedX2" label="x2"/>
                <mx:RadioButton groupName="RadioButtonGroup_InitialSpeedX" id="RadioButton_SpeedX4" label="x4"/>
             </mx:GridItem>
          </mx:GridRow>
          
          <mx:GridRow>
             <mx:GridItem>
                <mx:Label text="Gravity Acceleation Magnitude:" textAlign="right"/>
             </mx:GridItem>
             <mx:GridItem>
                <mx:TextInput id="Text_GravityAccelerationMagnitude" width="100" />
             </mx:GridItem>
          </mx:GridRow>

          <mx:GridRow>
             <mx:GridItem>
                <mx:Label text="Gravity Acceleration Angle:" textAlign="right"/>
             </mx:GridItem>
             <mx:GridItem>
                <mx:TextInput id="Text_GravityAccelerationAngle" width="100" />
                <mx:Label text="(degrees)"/>
             </mx:GridItem>
          </mx:GridRow>
       </mx:Grid>
   </mx:HBox>

   <mx:HBox width="100%">
      <mx:Spacer width="100%"/>
      <mx:Button label="OK" click="OnClickOkButton ();"/>
      <mx:Spacer width="30"/>
      <mx:Button label="Cancel" click="OnClickCancelButton ();"/>
      <!--
      <mx:Spacer width="30"/>
      <mx:Button label="Default" click="OnClickDefaultButton ();"/>
      -->
      <mx:Spacer width="100%"/>
   </mx:HBox>


   <mx:Script>
      <![CDATA[

         import mx.events.MenuEvent;
         import mx.managers.PopUpManager;
         import mx.controls.Menu;
         import mx.containers.GridRow;
         
         import editor.world.World;

         import common.Define;

         private var OnConfirm:Function = null;
         private var OnClose:Function = null;

         private var mParams:Object;

         public function SetValues (initialValues:Object):void
         {
            mParams = initialValues;
         }

         private function OnInitPanel ():void
         {
            Grid_Settings.removeChild (Box_SimulationQuanlity);
            
            Text_PreferredFPS.text = "" + mParams.mPreferredFPS;

            RadioButton_PhysicsSimulationEnabledYes.selected = mParams.mPhysicsSimulationEnabled;
            RadioButton_PhysicsSimulationEnabledNo.selected = (! mParams.mPhysicsSimulationEnabled);
            
            Text_StepTimeLength.text = mParams.mPhysicsSimulationStepTimeLength;

            RadioButton_DoSleepYes.selected = mParams.mAutoSleepingEnabled;
            RadioButton_DoSleepNo.selected = (! mParams.mAutoSleepingEnabled);
            
            RadioButton_ToiYes.selected = mParams.mCheckTimeOfImpact;
            RadioButton_ToiNo.selected = (! mParams.mCheckTimeOfImpact);
            
            RadioButton_SimulationQualityLow.selected = mParams.mVelocityIterations == Define.WorldStepVelocityIterations_Low && mParams.mPositionIterations == Define.WorldStepPositionIterations_Low;
            RadioButton_SimulationQualityMedium.selected = mParams.mVelocityIterations == Define.WorldStepVelocityIterations_Medium && mParams.mPositionIterations == Define.WorldStepPositionIterations_Medium;
            RadioButton_SimulationQualityHigh.selected = mParams.mVelocityIterations == Define.WorldStepVelocityIterations_High && mParams.mPositionIterations == Define.WorldStepPositionIterations_High;
            Text_VelocityIterations.text = "" + mParams.mVelocityIterations;
            Text_PositionIterations.text = "" + mParams.mPositionIterations;
            
            RadioButton_SpeedX0.selected = mParams.mInitialSpeedX == 0;
            RadioButton_SpeedX1.selected = mParams.mInitialSpeedX == 1;
            RadioButton_SpeedX2.selected = mParams.mInitialSpeedX == 2;
            RadioButton_SpeedX4.selected = mParams.mInitialSpeedX == 4;
            
            Text_GravityAccelerationMagnitude.text = mParams.mDefaultGravityAccelerationMagnitude;
            Text_GravityAccelerationAngle.text = mParams.mDefaultGravityAccelerationAngle;
            
            OnPhysicsEnabledChanged ();
         }
         
         public function OnPhysicsEnabledChanged ():void
         {
            var enableOtherSettings:Boolean = (! RadioButton_PhysicsSimulationEnabledNo.selected);
            
            var num:int = Grid_Settings.numChildren;
            for (var i:int = 2; i < num; ++ i)
            {
               var gridRow:GridRow = Grid_Settings.getChildAt (i) as GridRow;
               if (gridRow != null)
               {
                  gridRow.enabled = enableOtherSettings;
               }
            }
         }
         
         public function OnQualityChanged ():void
         {
            if (RadioButton_SimulationQualityLow.selected)
            {
               Text_VelocityIterations.text = "" + Define.WorldStepVelocityIterations_Low;
               Text_PositionIterations.text = "" + Define.WorldStepPositionIterations_Low;
            }
            else if (RadioButton_SimulationQualityMedium.selected)
            {
               Text_VelocityIterations.text = "" + Define.WorldStepVelocityIterations_Medium;
               Text_PositionIterations.text = "" + Define.WorldStepPositionIterations_Medium;
            }
            else if (RadioButton_SimulationQualityHigh.selected)
            {
               Text_VelocityIterations.text = "" + Define.WorldStepVelocityIterations_High;
               Text_PositionIterations.text = "" + Define.WorldStepPositionIterations_High;
            }
         }

         public function SetConfirmFunc (onConfirm:Function):void
         {
            OnConfirm = onConfirm;
         }

         public function SetCloseFunc (onClose:Function):void
         {
            OnClose = onClose;
         }

         private function OnClickOkButton():void
         {
            var fps:Number = parseFloat (Text_PreferredFPS.text);
            if (! isNaN (fps))
               mParams.mPreferredFPS = fps;
            
            mParams.mPhysicsSimulationEnabled = RadioButton_PhysicsSimulationEnabledYes.selected;
            
            var timeStep:Number = parseFloat (Text_StepTimeLength.text);
            if (! isNaN (timeStep))
                mParams.mPhysicsSimulationStepTimeLength = timeStep;

            mParams.mAutoSleepingEnabled = RadioButton_DoSleepYes.selected;
            
            var velocityIterations:int = parseInt (Text_VelocityIterations.text);
            if (! isNaN (velocityIterations))
               mParams.mVelocityIterations = velocityIterations;
            
            var positionIterations:int = parseInt (Text_PositionIterations.text);
            if (! isNaN (positionIterations))
               mParams.mPositionIterations = positionIterations;
            
            mParams.mCheckTimeOfImpact = RadioButton_ToiYes.selected;
            
            if (RadioButton_SpeedX0.selected)
               mParams.mInitialSpeedX = 0;
            else if (RadioButton_SpeedX1.selected)
               mParams.mInitialSpeedX = 1;
            else if (RadioButton_SpeedX2.selected)
               mParams.mInitialSpeedX = 2;
            else if (RadioButton_SpeedX4.selected)
               mParams.mInitialSpeedX = 4;
            
            var magnitude:Number = parseFloat (Text_GravityAccelerationMagnitude.text);
            if (! isNaN (magnitude))
                mParams.mDefaultGravityAccelerationMagnitude = magnitude;

            var angle:Number = parseFloat (Text_GravityAccelerationAngle.text);
            if (! isNaN (angle))
               mParams.mDefaultGravityAccelerationAngle = angle;

            PopUpManager.removePopUp(this);

            if (OnClose != null)
               OnClose ();

            if (OnConfirm != null)
               OnConfirm (mParams);
         }

         private function OnClickCancelButton():void
         {
             PopUpManager.removePopUp(this);

             if (OnClose != null)
               OnClose ();
         }

     ]]>
   </mx:Script>



</mx:TitleWindow>
