<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component.
     You cannot run it independently. -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="editor.display.dialog.*"
    title="Camera Setting" width="700" creationComplete="OnInitPanel()">

   <mx:TabNavigator width="100%" height="100%">
      <mx:Box label="Main" direction="horizontal" borderStyle="solid" height="100%" width="100%"
               paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"
               horizontalScrollPolicy="off" verticalScrollPolicy="off"
               horizontalGap="0" verticalGap="0" borderThickness="0" creationComplete="OnMainPanelCreationComplete()">

         <mx:HBox width="38%">
            <mx:Spacer width="100%" />
            <mx:VBox>
               <mx:Label id="Label_FollowedEntity" text="Followed Target:"/>
               <mx:HBox width="100%">
                  <mx:Spacer width="10"/>
                  <mx:RadioButton groupName="RadioButtonGroup_FollowedTarget" id="RadioButton_FollowSelf" value="self" label="Self" />
               </mx:HBox>
               <mx:HBox width="100%">
                  <mx:Spacer width="10"/>
                  <mx:RadioButton groupName="RadioButtonGroup_FollowedTarget" id="RadioButton_FollowBrothers" value="brothers" label="Brothers" />
               </mx:HBox>
            </mx:VBox>
            <mx:Spacer width="30" />
         </mx:HBox>

         <mx:VRule  strokeWidth="1" strokeColor="0xC0C0C0" height="100%" width="2%"/>

         <mx:HBox width="26%">
            <mx:Spacer width="30" />
            <mx:VBox>
               <mx:CheckBox id="CheckBox_FollowX" label="Follow X" click="UpdateUI ();" />
               <mx:CheckBox id="CheckBox_FollowY" label="Follow Y" click="UpdateUI ();" />
               <mx:CheckBox id="CheckBox_FollowAngle" label="Follow Angle" click="UpdateUI ();" />
            </mx:VBox>
            <mx:Spacer width="100%" />
         </mx:HBox>

         <mx:HBox width="38%">
            <mx:VBox>
               <mx:CheckBox id="CheckBox_SmoothlyX" label="Smoothly" />
               <mx:CheckBox id="CheckBox_SmoothlyY" label="Smoothly" />
               <mx:CheckBox id="CheckBox_SmoothlyAngle" label="Smoothly" />
            </mx:VBox>
            <mx:Spacer width="100%" />
         </mx:HBox>

      </mx:Box>
      <mx:VBox label="Basic" borderStyle="solid" height="100%" width="100%"
               paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"
               horizontalScrollPolicy="off" verticalScrollPolicy="off"
               horizontalGap="0" verticalGap="0" borderThickness="0">
         <EntityBasicSettingPanel id="BasicSettingPanel" creationComplete="OnEntityBasicSettingPanelCreationComplete()"/>
         <mx:Spacer height="100%"/>
      </mx:VBox>
   </mx:TabNavigator>

   <mx:Spacer height="10"/>

   <mx:HBox width="100%">
      <mx:Spacer width="100%"/>
      <mx:Button label="OK" click="OnClickOkButton ();"/>
      <mx:Spacer width="30"/>
      <mx:Button label="Cancel" click="OnClickCancelButton ();"/>
      <!--
      <mx:Spacer width="30"/>
      <mx:Button label="Default" click="OnClickDefaultButton ();"/>
      -->
      <mx:Spacer width="100%"/>
   </mx:HBox>

   <mx:Script>
      <![CDATA[
         import mx.managers.PopUpManager;
         import common.Define;

         private var OnConfirm:Function = null;
         private var OnClose:Function = null;

         private var mParams:Object;

         private function OnInitPanel ():void
         {
         }

         public function SetValues (initialValues:Object):void
         {
            mParams = initialValues;
         }

         private function OnMainPanelCreationComplete ():void
         {
            InitMainPanel (mParams);
         }

         private function InitMainPanel (initialValues:Object):void
         {
            var target:int = initialValues.mFollowedTarget;
            RadioButton_FollowBrothers.selected = (target == Define.Camera_FollowedTarget_Brothers);
            RadioButton_FollowSelf.selected = (target == Define.Camera_FollowedTarget_Self);

            var style:int = initialValues.mFollowingStyle;

            CheckBox_FollowX.selected = ( (style & Define.Camera_FollowingStyle_X) == Define.Camera_FollowingStyle_X);
            CheckBox_FollowY.selected = ( (style & Define.Camera_FollowingStyle_Y) == Define.Camera_FollowingStyle_Y);
            CheckBox_FollowAngle.selected = ( (style & Define.Camera_FollowingStyle_Angle) == Define.Camera_FollowingStyle_Angle);

            CheckBox_SmoothlyX.selected = ( (style & Define.Camera_FollowingStyle_SmoothlyX) == Define.Camera_FollowingStyle_SmoothlyX);
            CheckBox_SmoothlyY.selected = ( (style & Define.Camera_FollowingStyle_SmoothlyY) == Define.Camera_FollowingStyle_SmoothlyY);
            CheckBox_SmoothlyAngle.selected = ( (style & Define.Camera_FollowingStyle_SmoothlyAngle) == Define.Camera_FollowingStyle_SmoothlyAngle);

            UpdateUI ();
         }

         private function UpdateUI ():void
         {
            CheckBox_SmoothlyX.enabled = CheckBox_FollowX.selected;
            CheckBox_SmoothlyY.enabled = CheckBox_FollowY.selected;
            CheckBox_SmoothlyAngle.enabled = CheckBox_FollowAngle.selected;
         }

         private function OnEntityBasicSettingPanelCreationComplete ():void
         {
            mParams.mVisibleNonsense = true;
            mParams.mEnabledNonsense = true;
            BasicSettingPanel.SetValues (mParams);
         }

         public function SetConfirmFunc (onConfirm:Function):void
         {
            OnConfirm = onConfirm;
         }

         public function SetCloseFunc (onClose:Function):void
         {
            OnClose = onClose;
         }

         private function OnClickOkButton():void
         {
            if (RadioButton_FollowSelf.selected)
               mParams.mFollowedTarget = Define.Camera_FollowedTarget_Self;
            else
               mParams.mFollowedTarget = Define.Camera_FollowedTarget_Brothers;

            mParams.mFollowingStyle = (CheckBox_FollowX.selected ? Define.Camera_FollowingStyle_X : 0)
                                    | (CheckBox_FollowY.selected ? Define.Camera_FollowingStyle_Y : 0)
                                    | (CheckBox_FollowAngle.selected ? Define.Camera_FollowingStyle_Angle : 0)
                                    | (CheckBox_SmoothlyX.selected ? Define.Camera_FollowingStyle_SmoothlyX : 0)
                                    | (CheckBox_SmoothlyY.selected ? Define.Camera_FollowingStyle_SmoothlyY : 0)
                                    | (CheckBox_SmoothlyAngle.selected ? Define.Camera_FollowingStyle_SmoothlyAngle : 0)
                                    ;

            if (BasicSettingPanel != null)
            {
               BasicSettingPanel.GetValues (mParams);
            }

            PopUpManager.removePopUp(this);

            if (OnClose != null)
              OnClose ();

            if (OnConfirm != null)
              OnConfirm (mParams);
         }

         private function OnClickCancelButton():void
         {
             PopUpManager.removePopUp(this);

             if (OnClose != null)
               OnClose ();
         }


         private function OnClickDefaultButton ():void
         {
            var values:Object = new Object ();

            // ...

            SetValues (values);
         }

     ]]>
   </mx:Script>



</mx:TitleWindow>
