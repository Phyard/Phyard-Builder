<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
      width="100%" height="100%"
      >
      <mx:HBox id="Box_Toolbar" width="100%" borderStyle="solid" borderThickness="0">
         <mx:Button id="Button_AddCommmand" click="OnCreateNewVariable ();" toolTip="New Variable" focusEnabled="false" fontSize="8" left="5" top="5" width="20" height="20" toggle="false" cornerRadius="0" icon="@Embed('../../../res/action/command_add_with_drop_menu.png')" />
         <mx:Spacer width="16" />
         <mx:Button id="Button_DeleteCommmand" click="OnDeleteVariable ();" toolTip="Delete Selected(s)" focusEnabled="false" fontSize="8" left="5" top="5" width="20" height="20" toggle="false" cornerRadius="0" icon="@Embed('../../../res/action/command_delete.png')" disabledIcon="@Embed('../../../res/action/command_delete-disabled.png')" />
         <mx:Spacer width="100%" />
         <mx:Button id="Button_MoveUpCommmand" click="OnMoveUpVariable ();" toolTip="Move Up" focusEnabled="false" fontSize="8" left="5" top="5" width="20" height="20" toggle="false" cornerRadius="0" icon="@Embed('../../../res/action/command_moveup.png')" disabledIcon="@Embed('../../../res/action/command_moveup-disabled.png')" />
         <mx:Button id="Button_MoveDownCommmand" click="OnMoveDownVariable ();" toolTip="Move Down" focusEnabled="false" fontSize="8" left="5" top="5" width="20" height="20" toggle="false" cornerRadius="0" icon="@Embed('../../../res/action/command_movedown.png')" disabledIcon="@Embed('../../../res/action/command_movedown-disabled.png')" />
      </mx:HBox>
      <mx:List id="List_Variables" dataProvider="{mVariableListDataProvider}" change="OnChangeVariable ()" width="100%" height="100%" labelField="mName" showDataTips="true" dataTipField="mDataTip" useRollOver="false" allowMultipleSelection="false" editable="false"/>
      <mx:ViewStack id="ViewStack_VariableProperties" creationPolicy="all" width="100%" height="77" borderStyle="solid" borderThickness="1">
         <mx:VBox id="Box_BlankPanel" width="100%" height="100%">
            <mx:HBox width="100%" borderStyle="none" borderThickness="0">
               <mx:Spacer width="3" />
               <mx:Spacer width="3" />
            </mx:HBox>
         </mx:VBox>
         <mx:VBox id="Box_VariableProperties" width="100%" height="100%">
            <mx:Spacer height="3" />
            <!--mx:RadioButtonGroup id="VariableType" enabled="false"/>
            <mx:HBox width="100%" borderStyle="none" borderThickness="0">
               <mx:Spacer width="16" />
               <mx:HBox width="67%" borderStyle="none" borderThickness="0">
                  <mx:RadioButton groupName="VariableType" enabled="false" width="50%" id="RadioButton_BooleanType" value="Boolean" label="Boolean" />
                  <mx:RadioButton groupName="VariableType" enabled="false" width="50%" id="RadioButton_NumberType" value="Number" label="Number" selected="true" />
               </mx:HBox>
               <mx:RadioButton groupName="VariableType" enabled="false" width="33%" id="RadioButton_StringType" value="String" label="String" />
               <mx:Spacer width="6" />
            </mx:HBox>
            <mx:HBox width="100%" borderStyle="none" borderThickness="0">
               <mx:Spacer width="16" />
               <mx:RadioButton groupName="VariableType" enabled="false" width="67%" id="RadioButton_CCatType" value="CCat" label="Collision Category" />
               <mx:RadioButton groupName="VariableType" enabled="false" width="33%" id="RadioButton_EntityType" value="Entity" label="Entity" />
               <mx:Spacer width="6" />
            </mx:HBox-->
            <mx:HBox width="100%" borderStyle="none" borderThickness="0">
               <mx:Spacer width="3" />
               <mx:Label width="35%" text="Name:" textAlign="right" />
               <mx:TextInput width="65%" id="Text_Name" text="" enter="OnConfirmVariableName ();" change="OnNameChanged ();"/>
               <mx:Spacer width="3" />
            </mx:HBox>
            <mx:ViewStack id="ViewStack_VariableSetting" creationPolicy="all" width="100%" height="100%">
               <mx:VBox id="Box_NumberVariableSettingPanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:TextInput width="65%" id="Text_DefaultNumberValue" text="" change="OnNumberVariableSettingChanged ();"/>
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
               <mx:VBox id="Box_BooleanVariableSettingPanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:RadioButtonGroup id="DefaultBooleanValue" change="OnBooleanVariableSettingChanged ();"/>
                     <mx:RadioButton groupName="DefaultBooleanValue" id="RadioButton_True" value="true" label="true" />
                     <mx:RadioButton groupName="DefaultBooleanValue" id="RadioButton_False" value="false" label="false" selected="true"/>
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
               <mx:VBox id="Box_StringVariableSettingPanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:TextInput width="65%" id="Text_DefaultStringValue" text="" change="OnStringVariableSettingChanged ();"/>
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
               <!--
               <mx:VBox id="Box_CCatVariableSettingPanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:Label width="65%" text="null" textAlign="left" />
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
               <mx:VBox id="Box_EntityVariableSettingPanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:Label width="65%" text="null" textAlign="left" />
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
               <mx:VBox id="Box_ModuleVariableSettingPanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:Label width="65%" text="null" textAlign="left" />
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
               <mx:VBox id="Box_SoundVariableSettingPanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:Label width="65%" text="null" textAlign="left" />
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
               <mx:VBox id="Box_SceneVariableSettingPanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:Label width="65%" text="null" textAlign="left" />
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
               <mx:VBox id="Box_EntityArraySettingPanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:Label width="65%" text="null" textAlign="left" />
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
               -->
               <mx:VBox id="Box_NullValuePanel" width="100%" height="100%">
                  <mx:HBox width="100%" borderStyle="none" borderThickness="0">
                     <mx:Spacer width="3" />
                     <mx:Label width="35%" text="Default Value:" textAlign="right" />
                     <mx:Label width="65%" text="null" textAlign="left" />
                     <mx:Spacer width="3" />
                  </mx:HBox>
               </mx:VBox>
            </mx:ViewStack>
         </mx:VBox>
      </mx:ViewStack>

   <!--
   <mx:XML id="CreateNewMenuData">
      <root>
         <menuitem label="New Boolean Variable" id="Boolean"/>
         <menuitem label="New Number Variable" id="Number"/>
         <menuitem label="New String Variable" id="String"/>
         <menuitem label="New CCat Variable" id="CCat" scene_data_dependent="true"/>
         <menuitem label="New Entity Variable" id="Entity" scene_data_dependent="true"/>
         <menuitem label="New Module Variable" id="Module" scene_data_dependent="true"/>
         <menuitem label="New Sound Variable" id="Sound" scene_data_dependent="true"/>
         <menuitem label="New Scene Variable" id="Scene" scene_data_dependent="true"/>
         <menuitem label="New Array Variable" id="Array"/>
      </root>
   </mx:XML>
   -->

   <mx:Script>
        <![CDATA[

            import flash.events.ContextMenuEvent;
            import flash.ui.ContextMenu;
            import flash.ui.ContextMenuItem;

            import mx.controls.Menu;
            import mx.events.MenuEvent;
            
            import editor.world.World;

            import editor.codelib.CodeLibManager;

            import editor.trigger.VariableSpace;
            import editor.trigger.VariableSpaceClassInstance;

            import editor.trigger.VariableInstance;
            
            import editor.trigger.VariableDefinition;
            import editor.trigger.VariableDefinition_Custom;
            import editor.trigger.VariableDefinitionBoolean;
            import editor.trigger.VariableDefinitionNumber;
            import editor.trigger.VariableDefinitionString;
            import editor.trigger.VariableDefinitionScene;
            import editor.trigger.VariableDefinitionEntity;
            import editor.trigger.VariableDefinitionCollisionCategory;
            import editor.trigger.VariableDefinitionModule;
            import editor.trigger.VariableDefinitionSound;
            import editor.trigger.VariableDefinitionArray;
            
            import common.trigger.ValueSpaceTypeDefine;
            import common.trigger.ClassTypeDefine;

            [Bindable]
            private var mVariableListDataProvider:Object = [];

            private function OnInitPanel ():void
            {
            }

            private var mCodeLibManager:CodeLibManager = null;
            
            public function SetCodeLibManager (codeLibManager:CodeLibManager):void
            {
               mCodeLibManager = codeLibManager;
            }

            private var mVariableSpace:VariableSpace = null;
            //private var mLastVariableSpace:VariableSpace = null;
            private var mLastVariableSpaceModifiedTimes:int = -1;

            //public function SetVariableSpace (variableSpace:VariableSpace):void
            //{
            //   if (mVariableSpace != variableSpace || mLastVariableSpaceModifiedTimes < mVariableSpace.GetNumModifiedTimes ())
            //   {
            //      mVariableSpace = variableSpace;
            //      NotifyVariableSpaceModified ();
            //      mLastVariableSpaceModifiedTimes = mVariableSpace.GetNumModifiedTimes ();
            //   }
            //}

            //private var mOptions:Object;
            //public function SetOptions (options:Object):void
            //{
            //   mOptions = options;
            //
            //   if (mOptions != null)
            //   {
            //      if (mOptions.mSupportEditingInitialValues != undefined && mOptions.mSupportEditingInitialValues == false)
            //      {
            //         ViewStack_VariableSetting.visible = false;
            //      }
            //   }
            //}
            
            public function UpdateVariableSpace (variableSpace:VariableSpace):void
            {
               mVariableSpace = variableSpace;
               ViewStack_VariableSetting.visible = mVariableSpace != null && mVariableSpace.SupportEditingInitialValues ();
               NotifyVariableSpaceModified ();
            }

            public function NotifyVariableSpaceModified ():void
            {
               mCreateNewVariableMenu = null;
               
               List_Variables.dataProvider.removeAll ();

               if (visible)
               {
                  if (mVariableSpace != null)
                  {
                     for (var i:int = 0; i < mVariableSpace.GetNumVariableInstances (); ++ i)
                     {
                        var variableInstance:VariableInstance = mVariableSpace.GetVariableInstanceAt (i);
                        var name:String = variableInstance.ToVariableDefinitionString ();
                        List_Variables.dataProvider.addItem ({mName:name, mDataTip:name, mData:variableInstance});
                     }
                  }

                  //mLastVariableSpace = mVariableSpace;
               }

               OnChangeVariable ();

               UpdateInterface ();
            }

           //=========================

             private function UpdateInterface ():void
             {
               if (List_Variables.selectedIndex >= 0)
               {
                  List_Variables.scrollToIndex (List_Variables.selectedIndex);
               }

               Button_DeleteCommmand.enabled = List_Variables.selectedIndex >= 0;
               Button_MoveUpCommmand.enabled = List_Variables.selectedIndex >= 1;
               Button_MoveDownCommmand.enabled = List_Variables.selectedIndex >= 0 && List_Variables.selectedIndex < List_Variables.dataProvider.length - 1;
            }

         //=========================

            private var mCreateNewVariableMenu:Menu = null;
            private function OnCreateNewVariable ():void
            {
               if (mVariableSpace == null)
                  return;
               
               if (mCreateNewVariableMenu == null)
               {
                  var isAnySceneDataIndependent:Boolean = (
                                           mVariableSpace.GetSpaceType () == ValueSpaceTypeDefine.ValueSpace_Session
                                        || mVariableSpace.GetSpaceType () == ValueSpaceTypeDefine.ValueSpace_World
                                        || mVariableSpace.GetSpaceType () == ValueSpaceTypeDefine.ValueSpace_GameSave
                                        );
                  var isCurrentSceneDataDependent:Boolean = mCodeLibManager != null && (
                                           mVariableSpace.GetSpaceType () == ValueSpaceTypeDefine.ValueSpace_Global
                                        || mVariableSpace.GetSpaceType () == ValueSpaceTypeDefine.ValueSpace_Input
                                        || mVariableSpace.GetSpaceType () == ValueSpaceTypeDefine.ValueSpace_Local
                                        || mVariableSpace.GetSpaceType () == ValueSpaceTypeDefine.ValueSpace_Output
                                        || mVariableSpace.GetSpaceType () == ValueSpaceTypeDefine.ValueSpace_EntityProperties
                                        || mVariableSpace.GetSpaceType () == ValueSpaceTypeDefine.ValueSpace_CustomType
                                        );

                  var xml:XML = CodeLibManager.GetTypesDataProviderForMenu (mCodeLibManager, isCurrentSceneDataDependent, isAnySceneDataIndependent);

                  //// custom Types
                  //if (isCurrentSceneDataDependent)
                  //{
                  //   var customTypesMenu:XML = mCodeLibManager.GetCustomTypesDataProvider ();
                  //   if (customTypesMenu != null)
                  //   {
                  //      xml.appendChild (customTypesMenu);
                  //   }
                  //}
                  //
                  //// ...
                  ////for each (var menuItem:Object in CreateNewMenuData.menuitem)
                  ////{
                  ////   if (isSceneDataDependent || menuItem.@["scene_data_dependent"] != "true")
                  ////   {
                  ////      xml.appendChild (menuItem);
                  ////   }
                  ////}
                  //var coreClassesMenuData:XML = CodeLibManager.GetCoreTypesDataProvider ();
                  //for each (var menuItem:Object in coreClassesMenuData.menuitem)
                  //{
                  //   if ((! isAnySceneDataIndependent) || menuItem.@["scene_data_dependent"] == false)
                  //   {
                  //      xml.appendChild (menuItem);
                  //   }
                  //}
                  
                  //...
                  mCreateNewVariableMenu = Menu.createMenu (Button_AddCommmand, xml, false);
                  mCreateNewVariableMenu.labelField = "@name";
                  mCreateNewVariableMenu.addEventListener (MenuEvent.ITEM_CLICK, OnNewVariable);
               }

               var point:Point = Button_AddCommmand.localToGlobal (new Point (0, Button_AddCommmand.height));

               mCreateNewVariableMenu.show(point.x, point.y);
            }

            private function OnNewVariable (event:MenuEvent):void
            {
               if (mVariableSpace == null)
                  return;
               
               //>>fix bugs. Otherwise the one selected variable name may be forced changed by the new created one.
               ConfirmChangeCurrentVariableName ();
               mCurrentVariable = null;
               //<<
               
               var variableDefinition:VariableDefinition = null;

               var valueType:int = event.item.@id;
               if (valueType < 0)
                  return;
               
               var classType:int = event.item.@type;
               
               variableDefinition = CodeLibManager.CreateVariableDefinition (mCodeLibManager, classType, valueType);
               
               if (variableDefinition != null)
               {
                  var insert_index:int = List_Variables.selectedIndex + 1;

                  var variableInstance:VariableInstance = mVariableSpace.CreateVariableInstanceFromDefinition (null, variableDefinition);
                  mVariableSpace.ChangeVariableInstanceIndex (mVariableSpace.GetNumVariableInstances () - 1, insert_index);
                  var name:String = variableInstance.ToVariableDefinitionString ();
                  List_Variables.dataProvider.addItemAt ({mName:name, mDataTip:name, mData:variableInstance}, insert_index);
                  List_Variables.selectedIndex = insert_index;
               }

               OnChangeVariable ();

               UpdateInterface ();
            }

            private function OnDeleteVariable ():void
            {
               if (mVariableSpace == null)
                  return;

               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex < 0)
                  return;

               mVariableSpace.DestroyVariableInstanceAtIndex (selectedIndex);
               List_Variables.dataProvider.removeItemAt (selectedIndex);

               if (selectedIndex >= List_Variables.dataProvider.length)
                  -- selectedIndex;

               if (selectedIndex >= 0)
                  List_Variables.selectedItem = List_Variables.dataProvider.getItemAt (selectedIndex);
               
               mCurrentVariable = null;
               
               OnChangeVariable ();

               UpdateInterface ();
            }

            private function OnMoveUpVariable ():void
            {
               if (mVariableSpace == null)
                  return;

               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex < 1)
                  return;

               mVariableSpace.ChangeVariableInstanceIndex (selectedIndex, selectedIndex - 1);
               List_Variables.dataProvider.addItemAt (List_Variables.dataProvider.removeItemAt (selectedIndex), selectedIndex - 1);
               List_Variables.selectedItem = List_Variables.dataProvider.getItemAt (selectedIndex - 1);

               //OnChangeVariable ();

               UpdateInterface ();
            }

            private function OnMoveDownVariable ():void
            {
               if (mVariableSpace == null)
                  return;

               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex + 1 > List_Variables.dataProvider.length)
                  return;

               mVariableSpace.ChangeVariableInstanceIndex (selectedIndex, selectedIndex + 1);
               List_Variables.dataProvider.addItemAt (List_Variables.dataProvider.removeItemAt (selectedIndex), selectedIndex + 1);
               List_Variables.selectedItem = List_Variables.dataProvider.getItemAt (selectedIndex + 1);

               //OnChangeVariable ();

               UpdateInterface ();
            }

        //===========================
            
            public function NotifyDialogClosing ():void
            {
               ConfirmChangeCurrentVariableName ();
               
               mCurrentVariable = null;
            }
            
            private function OnConfirmVariableName ():void
            {
               // no need
            }
            
            private var mCurrentVariable:VariableInstance = null;
            private function ConfirmChangeCurrentVariableName ():void
            {
               if (mCurrentVariable != null)
               {
                  var oldName:String = mCurrentVariable.GetName ();
                  mCurrentVariable.ChangeName (Text_Name.text);
                  
                  if (oldName != mCurrentVariable.GetName ())
                  {
                     mVariableSpace.NotifyModified ();
                  }
               }
            }
            
            public function OnChangeVariable ():void
            {
               ConfirmChangeCurrentVariableName ();
               
               var selectedIndex:int = List_Variables.selectedIndex;

               if (mVariableSpace == null || selectedIndex < 0)
               {
                  //VariableType.selectedValue = null;
                  ViewStack_VariableProperties.selectedChild = Box_BlankPanel;
                  
                  mCurrentVariable = null;
               }
               else
               {
                  ViewStack_VariableProperties.selectedChild = Box_VariableProperties;

                  var item:Object  = List_Variables.dataProvider.getItemAt (selectedIndex);
                  var variableInstance:VariableInstance = item.mData;
                  var variableDefinition:VariableDefinition = variableInstance.GetVariableDefinition ();

                  Text_Name.text = variableDefinition.GetName ();

                  if (variableDefinition is VariableDefinitionBoolean)
                  {
                     //RadioButton_BooleanType.selected = true;
                     DefaultBooleanValue.selectedValue = (variableInstance.GetValueObject () as Boolean) ? "true" : "false";
                     ViewStack_VariableSetting.selectedChild = Box_BooleanVariableSettingPanel;
                  }
                  else if (variableDefinition is VariableDefinitionNumber)
                  {
                     //RadioButton_NumberType.selected = true;
                     Text_DefaultNumberValue.text = "" + (variableInstance.GetValueObject () as Number);
                     ViewStack_VariableSetting.selectedChild = Box_NumberVariableSettingPanel;
                  }
                  else if (variableDefinition is VariableDefinitionString)
                  {
                     //RadioButton_StringType.selected = true;
                     Text_DefaultStringValue.text = (variableInstance.GetValueObject () as String);
                     ViewStack_VariableSetting.selectedChild = Box_StringVariableSettingPanel;
                  }
                  /*
                  else if (variableDefinition is VariableDefinitionCollisionCategory)
                  {
                     //RadioButton_CCatType.selected = true;
                     ViewStack_VariableSetting.selectedChild = Box_CCatVariableSettingPanel;
                  }
                  else if (variableDefinition is VariableDefinitionEntity)
                  {
                     //RadioButton_EntityType.selected = true;
                     ViewStack_VariableSetting.selectedChild = Box_EntityVariableSettingPanel;
                  }
                  else if (variableDefinition is VariableDefinitionModule)
                  {
                     //RadioButton_EntityType.selected = true;
                     ViewStack_VariableSetting.selectedChild = Box_ModuleVariableSettingPanel;
                  }
                  else if (variableDefinition is VariableDefinitionSound)
                  {
                     //RadioButton_EntityType.selected = true;
                     ViewStack_VariableSetting.selectedChild = Box_SoundVariableSettingPanel;
                  }
                  else if (variableDefinition is VariableDefinitionScene)
                  {
                     //RadioButton_EntityType.selected = true;
                     ViewStack_VariableSetting.selectedChild = Box_SceneVariableSettingPanel;
                  }
                  else if (variableDefinition is VariableDefinitionArray)
                  {
                     //RadioButton_ArrayType.selected = true;
                     ViewStack_VariableSetting.selectedChild = Box_EntityArraySettingPanel;
                  }
                  */
                  else
                  {
                     //VariableType.selectedValue = null;
                     ViewStack_VariableSetting.selectedChild = Box_NullValuePanel;
                  }
                  
                  mCurrentVariable = variableInstance;
               }
               
               UpdateInterface ();
            }

        //===========================

            public function OnNameChanged ():void
            {
               if (mVariableSpace == null)
                  return;
               
               if (mCurrentVariable == null)
                  return;
               
               var tempName:String = Text_Name.text;
               if (tempName != mCurrentVariable.GetName ())
               {
                  var oldTempName:String = tempName;
                  tempName = mCurrentVariable.GetVariableSpace ().ValidateVariableName (tempName);
                  if (tempName != oldTempName && mCurrentVariable.GetName ().indexOf (oldTempName) == 0)
                     tempName = mCurrentVariable.GetName ();
               }
               tempName = mCurrentVariable.ToVariableDefinitionString (tempName);
               
               SetCurrrentItemName (tempName);
            }
            
            private function SetCurrrentItemName (name:String):void
            {  
               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex < 0) // should not
                  return;
               
               var item:Object  = List_Variables.dataProvider.getItemAt (List_Variables.selectedIndex);
               item.mName = name;
               item.mDataTip = name;
               List_Variables.invalidateList ();
            }

            public function OnBooleanVariableSettingChanged ():void
            {
               if (mVariableSpace == null)
                  return;

               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex < 0)
                  return;

               //if (RadioButton_BooleanType.selected)
               {
                  var item:Object  = List_Variables.dataProvider.getItemAt (selectedIndex);
                  var variableInstance:VariableInstance = item.mData;
                  var variableDefinitionBoolean:VariableDefinitionBoolean = variableInstance.GetVariableDefinition () as VariableDefinitionBoolean;
                  if (variableDefinitionBoolean == null)
                  {
                     variableDefinitionBoolean = new VariableDefinitionBoolean (Text_Name.text);
                     variableInstance.SetVariableDefinition (variableDefinitionBoolean);

                     OnNameChanged ();
                  }

                  variableInstance.SetValueObject (RadioButton_True.selected);
               }
            }

            public function OnNumberVariableSettingChanged ():void
            {
               if (mVariableSpace == null)
                  return;

               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex < 0)
                  return;

               //if (RadioButton_NumberType.selected)
               {
                  var item:Object  = List_Variables.dataProvider.getItemAt (selectedIndex);
                  var variableInstance:VariableInstance = item.mData;
                  var variableDefinitionNumber:VariableDefinitionNumber = variableInstance.GetVariableDefinition () as VariableDefinitionNumber;
                  if (variableDefinitionNumber == null)
                  {
                     variableDefinitionNumber = new VariableDefinitionNumber (Text_Name.text);
                     variableInstance.SetVariableDefinition (variableDefinitionNumber);

                     OnNameChanged ();
                  }

                  var numberText:String = Text_DefaultNumberValue.text;
                  numberText.replace (/\s+/, "");
                  var defaultValue:Number;
                  if (numberText.length >= 2 && numberText.substring (0, 2).toLowerCase () === "0x")
                     defaultValue = parseInt (numberText.substring (2), 16);
                  else
                     defaultValue = parseFloat (numberText);
                  if (isNaN (defaultValue) )
                     defaultValue = 0.0;

                  variableInstance.SetValueObject (defaultValue);
               }
            }

            public function OnStringVariableSettingChanged ():void
            {
               if (mVariableSpace == null)
                  return;

               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex < 0)
                  return;

               //if (RadioButton_StringType.selected)
               {
                  var item:Object  = List_Variables.dataProvider.getItemAt (selectedIndex);
                  var variableInstance:VariableInstance = item.mData;
                  var variableDefinitionString:VariableDefinitionString = variableInstance.GetVariableDefinition () as VariableDefinitionString;
                  if (variableDefinitionString == null)
                  {
                     variableDefinitionString = new VariableDefinitionString (Text_Name.text);
                     variableInstance.SetVariableDefinition (variableDefinitionString);

                     OnNameChanged ();
                  }

                  variableInstance.SetValueObject (Text_DefaultStringValue.text);
               }
            }

         /*
            public function OnCCatVariableSettingChanged ():void
            {
               if (mVariableSpace == null)
                  return;

               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex < 0)
                  return;

               //if (RadioButton_CCatType.selected)
               {
                  var item:Object  = List_Variables.dataProvider.getItemAt (selectedIndex);
                  var variableInstance:VariableInstance = item.mData;
                  var variableDefinitionCCat:VariableDefinitionCollisionCategory = variableInstance.GetVariableDefinition () as VariableDefinitionCollisionCategory;
                  if (variableDefinitionCCat == null)
                  {
                     variableDefinitionCCat = new VariableDefinitionCollisionCategory (Text_Name.text);
                     variableInstance.SetVariableDefinition (variableDefinitionCCat);

                     OnNameChanged ();
                  }

                  // variableInstance.SetValueObject (Text_DefaultStringValue.text);
               }
            }

            public function OnEntityVariableSettingChanged ():void
            {
               if (mVariableSpace == null)
                  return;

               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex < 0)
                  return;

               //if (RadioButton_EntityType.selected)
               {
                  var item:Object  = List_Variables.dataProvider.getItemAt (selectedIndex);
                  var variableInstance:VariableInstance = item.mData;
                  var variableDefinitionEntity:VariableDefinitionEntity = variableInstance.GetVariableDefinition () as VariableDefinitionEntity;
                  if (variableDefinitionEntity == null)
                  {
                     variableDefinitionEntity = new VariableDefinitionEntity (Text_Name.text);
                     variableInstance.SetVariableDefinition (variableDefinitionEntity);

                     OnNameChanged ();
                  }

                  // variableInstance.SetValueObject (Text_DefaultStringValue.text);
               }
            }

            public function OnArrayVariableSettingChanged ():void
            {
               if (mVariableSpace == null)
                  return;

               var selectedIndex:int = List_Variables.selectedIndex;
               if (selectedIndex < 0)
                  return;

               //if (RadioButton_ArrayType.selected)
               {
                  var item:Object  = List_Variables.dataProvider.getItemAt (selectedIndex);
                  var variableInstance:VariableInstance = item.mData;
                  var variableDefinitionArray:VariableDefinitionArray = variableInstance.GetVariableDefinition () as VariableDefinitionArray;
                  if (variableDefinitionArray == null)
                  {
                     variableDefinitionArray = new VariableDefinitionArray (Text_Name.text);
                     variableInstance.SetVariableDefinition (variableDefinitionArray);

                     OnNameChanged ();
                  }

                  // variableInstance.SetValueObject (Text_DefaultStringValue.text);
               }
            }
         */

       ]]>
   </mx:Script>

</mx:VBox>
