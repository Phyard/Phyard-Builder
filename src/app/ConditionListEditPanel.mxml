<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component. 
     You cannot run it independently. -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
      borderStyle="solid" borderThickness="0"
      width="100%" height="100%"
      creationComplete="OnInitPanel()"
      >

   <mx:VBox width="100%">
      <CommandListEditPanel id="theCommandListEditPanel" width="100%" />
      <mx:HBox width="100%">
         <mx:HBox width="186">
            <mx:RadioButtonGroup id="RadioButtonGroup_ConditionOp"/>
            <mx:RadioButton groupName="RadioButtonGroup_ConditionOp" id="RadioButton_IsAnd" value="1" label="And"/>
            <mx:RadioButton groupName="RadioButtonGroup_ConditionOp" id="RadioButton_IsOr" value="0" label="Or"/>
            <mx:Spacer width="100%" />
            <mx:CheckBox id="CheckBox_IsNot" label="Not"/>
         </mx:HBox>
         <mx:Spacer width="50" />
         <mx:HBox width="100%">
            <mx:Spacer width="100%" />
            <mx:CheckBox id="CheckBox_IsCallingResultInverted" label="Invert"/>
         </mx:HBox>
      </mx:HBox>
   </mx:VBox>

   <mx:Script>
      <![CDATA[       
         
         import flash.geom.Point;
         
         import mx.events.MenuEvent;
         import mx.controls.Menu;
         import mx.events.ListEvent;
         import mx.controls.Alert;
         
         import editor.trigger.ConditionListDefinition;
         
         import common.Define;
         
         private var mInputValues:Object;
         
         private var mConditionListDefinition:ConditionListDefinition = null;
         
         private function OnInitPanel ():void
         {
         }
         
         public function SetConditionListDefinition (listDef:ConditionListDefinition):void
         {
            mConditionListDefinition = listDef;
            
            CheckBox_IsNot.selected = mConditionListDefinition.IsNot ();
            RadioButtonGroup_ConditionOp.selectedValue = mConditionListDefinition.IsAnd () ? 1 : 0;
            
            theCommandListEditPanel.SetInvertCallingResultCheckBoxVisible = SetInvertCallingResultCheckBoxVisible;
            theCommandListEditPanel.SetInvertCallingResultCheckBoxSelected = SetInvertCallingResultCheckBoxSelected;
            theCommandListEditPanel.IsInvertCallingResultCheckBoxSelected = IsInvertCallingResultCheckBoxSelected;
            
            theCommandListEditPanel.SetConditionListDefinition (listDef);
         }
         
         public function GetValues (params:Object):void
         {
            theCommandListEditPanel.GetValues (params);
            
            params.mIsAnd = (RadioButtonGroup_ConditionOp.selectedValue == 1);
            params.mIsNot = CheckBox_IsNot.selected;
         }
         
         private function SetInvertCallingResultCheckBoxVisible (visible:Boolean):void
         {
            CheckBox_IsCallingResultInverted.visible = visible;
         }
         
         private function SetInvertCallingResultCheckBoxSelected (selected:Boolean):void
         {
            CheckBox_IsCallingResultInverted.selected = selected;
         }
         
         private function IsInvertCallingResultCheckBoxSelected ():Boolean
         {
            return CheckBox_IsCallingResultInverted.visible && CheckBox_IsCallingResultInverted.selected;
         }
         
     ]]>
   </mx:Script>

</mx:VBox>