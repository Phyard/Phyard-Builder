<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
      backgroundColor="0xDDDDA0" borderColor="0x606060" borderStyle="solid" borderThickness="10"
      width="100%" height="100%"
      creationComplete="OnInitPanel()"
      >
   <mx:HBox width="100%">
      <mx:Spacer width="100%" />
      <mx:VBox width="600">
         <mx:Spacer height="10" />

         <mx:HBox width="100%">
            <!--
            <mx:Spacer width="100%"/>
            <mx:CheckBox id="CheckBox_PermitPublishing" label="Permit Other Websites to Publish"/>
            <mx:Spacer width="100%"/>
            -->
            <mx:Spacer width="30%"/>
            <mx:CheckBox id="CheckBox_ShareSourceCode" label="Share Source Code"/>
         </mx:HBox>

         <mx:HBox width="100%">
            <mx:Label text="Your Name:" textAlign="right" width="30%"/>
            <mx:TextInput id="Text_AuthorName" width="200" />
         </mx:HBox>

         <mx:HBox width="100%">
            <mx:Label text="Your Homepage:" textAlign="right" width="30%"/>
            <mx:TextInput id="Text_AuthorHomePage" width="70%" />
         </mx:HBox>

         <mx:Spacer height="20" />

         <mx:HBox width="100%">
            <mx:Label width="30%" text="Coordinates System:" textAlign="right"/>
            <mx:CheckBox id="CheckBox_CoordinatesRightHand" label="Right Hand (axis y upwards)"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="30%"/>
            <mx:Label width="80" text="Scale:" textAlign="right"/>
            <mx:NumericStepper id="NumericStepper_CoordinatesScale" stepSize="1" width="80" />
            <mx:Label text="(pixels/m)"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="30%"/>
            <mx:Label width="80" text="Origin X:" textAlign="right"/>
            <mx:NumericStepper id="NumericStepper_CoordinatesOriginX" stepSize="1" width="80" />
            <mx:Label text="(pixels)"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="30%"/>
            <mx:Label width="80" text="Origin Y:" textAlign="right"/>
            <mx:NumericStepper id="NumericStepper_CoordinatesOriginY" stepSize="1" width="80" />
            <mx:Label text="(pixels)"/>
         </mx:HBox>

         <mx:Spacer height="20" />

         <mx:HBox width="100%">
            <mx:Label width="30%" text="Scene Size:" textAlign="right"/>
            <mx:RadioButtonGroup id="RadioButtonGroup_SceneSize" itemClick="OnCustomSizeRationClick ()"/>
            <mx:RadioButton groupName="RadioButtonGroup_SceneSize" id="RadioButton_NormalSize" value="normal"
                label="Normal (left:0, top:0, right:600, bottom:600)" />
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="30%"/>
            <mx:RadioButton groupName="RadioButtonGroup_SceneSize" id="RadioButton_InfinteSize" value="infinite"
                label="Infinte"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="30%"/>
            <mx:RadioButton groupName="RadioButtonGroup_SceneSize" id="RadioButton_CustomSize" value="custom"
                label="Custom:"/>
            <mx:Label text=" (Minimum size: 600x600)" color="0x0000FF"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="30%"/>
            <mx:Label id="Label_CustomLeft" text="Left:" textAlign="right" width="60"/>
            <mx:NumericStepper id="NumericStepper_CustomLeft" stepSize="1" width="80" />
            <mx:Label id="Label_CustomRight" text="Right:" textAlign="right" width="60"/>
            <mx:NumericStepper id="NumericStepper_CustomRight" stepSize="1" width="80" />
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="30%"/>
            <mx:Label id="Label_CustomTop" text="Top:" textAlign="right" width="60"/>
            <mx:NumericStepper id="NumericStepper_CustomTop" stepSize="1" width="80" />
            <mx:Label id="Label_CustomBottom" text="Bottom:" textAlign="right" width="60"/>
            <mx:NumericStepper id="NumericStepper_CustomBottom" stepSize="1" width="80" />
         </mx:HBox>

         <mx:Spacer height="20" />

         <mx:HBox width="100%">
            <mx:Label text="Background Color:" textAlign="right" width="30%"/>
            <mx:ColorPicker id="ColorPicker_BackgroundColor" showTextField="true" selectedColor="0xDDDDA0"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Label text="Scene Border Color:" textAlign="right" width="31%"/>
            <mx:ColorPicker id="ColorPicker_BorderColor" showTextField="true" selectedColor="0x606060"/>
            <mx:Spacer width="20"/>
            <mx:CheckBox id="CheckBox_BuildBorder" label="Build Scene Border"/>
         </mx:HBox>

         <mx:Spacer height="20" />

         <mx:HBox width="100%">
            <mx:Label text="Gravity Accelation Magnitude:" textAlign="right" width="30%"/>
            <mx:TextInput id="Text_GravityAccelationMagnitude" width="100" />
            <mx:Label text="(pxiels / s^2)"/>
         </mx:HBox>

         <mx:HBox width="100%">
            <mx:Label text="Gravity Accelation Angle:" textAlign="right" width="30%"/>
            <mx:TextInput id="Text_GravityAccelationAngle" width="100" />
         </mx:HBox>

         <mx:Spacer height="20" />

         <mx:HBox width="100%">
            <mx:Spacer width="30%"/>
            <mx:CheckBox id="CheckBox_CiRulesEnabled" label="CI Rules Enabled"/>
         </mx:HBox>

         <!--
         <mx:HBox width="100%">
            <mx:Spacer width="5%"/>
            <mx:Label text="Potential Max Count of Physics Shapes:" textAlign="left"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="10%"/>
            <mx:RadioButtonGroup id="RadioButtonGroup_MaxShapesCount" />
            <mx:RadioButton groupName="RadioButtonGroup_MaxShapesCount" id="RadioButton_MaxShapesCount_Auto" value="0" label="Auto Statistics" />
            <mx:RadioButton groupName="RadioButtonGroup_MaxShapesCount" id="RadioButton_MaxShapesCount_256" value="256" label="256" />
            <mx:RadioButton groupName="RadioButtonGroup_MaxShapesCount" id="RadioButton_MaxShapesCount_512" value="512" label="512" />
            <mx:RadioButton groupName="RadioButtonGroup_MaxShapesCount" id="RadioButton_MaxShapesCount_1024" value="1024" label="1024" />
            <mx:RadioButton groupName="RadioButtonGroup_MaxShapesCount" id="RadioButton_MaxShapesCount_2048" value="2048" label="2048" />
            <mx:RadioButton groupName="RadioButtonGroup_MaxShapesCount" id="RadioButton_MaxShapesCount_4096" value="4096" label="4096" />
         </mx:HBox>
         -->
         <!--
         <mx:HBox width="100%">
            <mx:Spacer width="5%"/>
            <mx:Label text="Population Density Level of Physics Shapes:" textAlign="left"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="10%"/>
            <mx:RadioButtonGroup id="RadioButtonGroup_ShapesDensityLevel" />
            <mx:RadioButton groupName="RadioButtonGroup_ShapesDensityLevel" id="RadioButton_ShapesDensityLevel_Auto" value="0" label="Auto Assign" />
            <mx:RadioButton groupName="RadioButtonGroup_ShapesDensityLevel" id="RadioButton_ShapesDensityLevel_4" value="4" label="4" />
            <mx:RadioButton groupName="RadioButtonGroup_ShapesDensityLevel" id="RadioButton_ShapesDensityLevel_8" value="8" label="8" />
            <mx:RadioButton groupName="RadioButtonGroup_ShapesDensityLevel" id="RadioButton_ShapesDensityLevel_16" value="16" label="16" />
         </mx:HBox>
         -->
      </mx:VBox>

      <mx:Spacer width="100%" />
   </mx:HBox>

   <mx:Script>
        <![CDATA[
            
            import mx.events.FlexEvent;
            import editor.runtime.Runtime;
            import editor.world.World;
            import common.Define;
            import common.ValueAdjuster;
            
            private function OnInitPanel ():void
            {
               Runtime.mSynchronizeWorldSettingPanelWithWorld = SynchronizeWorldSettingPanelWithWorld;
               Runtime.mSynchronizeWorldWithWorldSettingPanel = SynchronizeWorldWithWorldSettingPanel;
               
               NumericStepper_CustomLeft.minimum = - 0.5 * Define.LargeWorldHalfWidth;
               NumericStepper_CustomLeft.maximum = 0;
               NumericStepper_CustomRight.minimum = 0;
               NumericStepper_CustomRight.maximum = 0.5 * Define.LargeWorldHalfWidth;
               NumericStepper_CustomTop.minimum = - 0.5 * Define.LargeWorldHalfWidth;
               NumericStepper_CustomTop.maximum = 0;
               NumericStepper_CustomBottom.minimum = 0;
               NumericStepper_CustomBottom.maximum = 0.5 * Define.LargeWorldHalfWidth;
               
               NumericStepper_CoordinatesScale.minimum = 1;
               NumericStepper_CoordinatesScale.maximum = Number.MAX_VALUE;
               NumericStepper_CoordinatesOriginX.minimum = - Number.MAX_VALUE;
               NumericStepper_CoordinatesOriginX.maximum = Number.MAX_VALUE;
               NumericStepper_CoordinatesOriginY.minimum = - Number.MAX_VALUE;
               NumericStepper_CoordinatesOriginY.maximum = Number.MAX_VALUE;
               
               SynchronizeWorldSettingPanelWithWorld (Runtime.mEditorWorldView.GetEditorWorld ());
            }
            
            private function SynchronizeWorldSettingPanelWithWorld (world:World):void
            {
            // 
               
               CheckBox_ShareSourceCode.selected = world.IsShareSourceCode ();
               
               Text_AuthorName.text = world.GetAuthorName ();
               Text_AuthorHomePage.text = world.GetAuthorHomepage ();
               
            // 
               
               var sceneLeft  :int = world.GetWorldLeft ();
               var sceneTop   :int = world.GetWorldTop ();
               var sceneWidth :int = world.GetWorldWidth ();
               var sceneHeight:int = world.GetWorldHeight ();
               
               if (world.IsInfiniteSceneSize ())
               {
                  RadioButton_NormalSize.selected = false;
                  RadioButton_InfinteSize.selected = true;
                  RadioButton_CustomSize.selected = false;
               }
               else if (Define.IsNormalScene (sceneLeft, sceneTop, sceneWidth, sceneHeight))
               {
                  RadioButton_NormalSize.selected = true;
                  RadioButton_InfinteSize.selected = false;
                  RadioButton_CustomSize.selected = false;
               }
               else
               {
                  RadioButton_NormalSize.selected = false;
                  RadioButton_InfinteSize.selected = false;
                  RadioButton_CustomSize.selected = true;
               }
               
               OnCustomSizeRationClick ();
               
               NumericStepper_CustomLeft.value = sceneLeft;
               NumericStepper_CustomTop.value = sceneTop;
               NumericStepper_CustomRight.value = sceneLeft + sceneWidth;
               NumericStepper_CustomBottom.value = sceneTop + sceneHeight;
               
            // ...
               
               ColorPicker_BackgroundColor.selectedColor = world.GetBackgroundColor ();
               
               CheckBox_BuildBorder.selected = world.IsBuildBorder ();
               ColorPicker_BorderColor.selectedColor = world.GetBorderColor ();
               
            // 
               
               CheckBox_CoordinatesRightHand.selected = world.GetCoordinateSystem ().IsRightHand ();
               NumericStepper_CoordinatesScale.value = int(1.0 / world.GetCoordinateSystem ().GetScale ());
               NumericStepper_CoordinatesOriginX.value = world.GetCoordinateSystem ().GetOriginX ();
               NumericStepper_CoordinatesOriginY.value = world.GetCoordinateSystem ().GetOriginY ();
               
            // 
               
               Text_GravityAccelationMagnitude.text = "" + world.GetDefaultGravityAccelerationMagnitude ();
               Text_GravityAccelationAngle.text = "" + world.GetDefaultGravityAccelerationAngle ();
               
            // 
               
               CheckBox_CiRulesEnabled.selected = world.IsCiRulesEnabled ();
            }
            
            private function SynchronizeWorldWithWorldSettingPanel (world:World):void
            {
            // author name
            
               var name:String = Text_AuthorName.text;
               if (name.length > 30)
                  name = name.substr (0, 30);
               
               world.SetAuthorName (name);
               
            // home page
            
               var url:String = Text_AuthorHomePage.text.toLowerCase();
               if (url.indexOf ("http") != 0)
                  url = "http://" + url;
               if (url.length > 100)
                  url = url.substr (0, 100);
               if (url.length < 8)
                  url = "";
               
               world.SetAuthorHomepage (url);
               
            // sharing
               
               world.SetShareSourceCode (CheckBox_ShareSourceCode.selected);
               
            //.scene size, background color, build border
            
               UpdateSceneSize (world);
               
               world.SetBackgroundColor (ColorPicker_BackgroundColor.selectedColor);
               world.SetBuildBorder (CheckBox_BuildBorder.selected);
               world.SetBorderColor (ColorPicker_BorderColor.selectedColor);
               
            // ...
               /*
               var density_level:int;
               if (RadioButton_ShapesDensityLevel_16.selected.selected)
                  density_level = 16;
               else if (RadioButton_ShapesDensityLevel_8.selected.selected)
                  density_level = 8;
               else if (RadioButton_ShapesDensityLevel_16.selected.selected)
                  density_level = 4;
               else
                  density_level = 0;
               world.SetPhysicsShapesPopulationDensityLevel (ValueAdjuster.AdjustPhysicsShapesPotentialMaxCount (density_level, true));
               */
               
            // 
               
               world.RebuildCoordinateSystem (NumericStepper_CoordinatesOriginX.value, NumericStepper_CoordinatesOriginY.value, 1.0 / NumericStepper_CoordinatesScale.value, CheckBox_CoordinatesRightHand.selected);
               
            // 
               
               var magnitude:Number = parseFloat (Text_GravityAccelationMagnitude.text);
               if (! isNaN (magnitude))
                  world.SetDefaultGravityAccelerationMagnitude (magnitude);
               
               var angle:Number = parseFloat (Text_GravityAccelationAngle.text);
               if (! isNaN (angle))
                  world.SetDefaultGravityAccelerationAngle (angle);
               
            // 
               
               world.SetCiRulesEnabled (CheckBox_CiRulesEnabled.selected);
            }
            
            private function OnCustomSizeRationClick ():void
            {
               if (RadioButton_CustomSize.selected)
               {
                  NumericStepper_CustomLeft.enabled = true;
                  NumericStepper_CustomRight.enabled = true;
                  NumericStepper_CustomTop.enabled = true;
                  NumericStepper_CustomBottom.enabled = true;
               }
               else
               {
                  NumericStepper_CustomLeft.enabled = false;
                  NumericStepper_CustomRight.enabled = false;
                  NumericStepper_CustomTop.enabled = false;
                  NumericStepper_CustomBottom.enabled = false;
               }
            }
            
//==========================================================================================
//
//==========================================================================================
            
            private function UpdateSceneSize (world:World):void
            {
               world.SetInfiniteScaneSize (RadioButton_InfinteSize.selected);
               
               if (RadioButton_NormalSize.selected)
               {
                  world.SetWorldLeft (0);
                  world.SetWorldTop (0);
                  world.SetWorldWidth (Define.DefaultWorldWidth);
                  world.SetWorldHeight (Define.DefaultWorldHeight);
               }
               else if (RadioButton_InfinteSize.selected)
               {
                  world.SetWorldLeft (- 0.5 * Define.LargeWorldHalfWidth);
                  world.SetWorldTop  (- 0.5 * Define.LargeWorldHalfHeight);
                  world.SetWorldWidth  (Define.LargeWorldHalfWidth);
                  world.SetWorldHeight (Define.LargeWorldHalfHeight);
               }
               else if (RadioButton_CustomSize.selected)
               {
                  var sceneLeft  :int = NumericStepper_CustomLeft.value;
                  var sceneTop   :int = NumericStepper_CustomTop.value;
                  var sceneRight :int = NumericStepper_CustomRight.value;
                  var sceneBottom:int = NumericStepper_CustomBottom.value;
                  
                  var sceneWidth  :int = sceneRight  - sceneLeft;
                  var sceneHeight :int = sceneBottom - sceneTop;
                  
                  if (sceneWidth < Define.DefaultWorldWidth)
                     sceneWidth = Define.DefaultWorldWidth;
                  
                  if (sceneHeight < Define.DefaultWorldHeight)
                     sceneHeight = Define.DefaultWorldHeight;
                  
                  NumericStepper_CustomLeft.value = sceneLeft;
                  NumericStepper_CustomTop.value = sceneTop;
                  NumericStepper_CustomRight.value = sceneLeft + sceneWidth;
                  NumericStepper_CustomBottom.value = sceneTop + sceneHeight;
                  
                  world.SetWorldLeft (sceneLeft);
                  world.SetWorldTop (sceneTop);
                  world.SetWorldWidth (sceneWidth);
                  world.SetWorldHeight (sceneHeight);
               }
            }
            
       ]]>
   </mx:Script>
   
</mx:VBox>