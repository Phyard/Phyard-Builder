<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
         xmlns:mx="http://www.adobe.com/2006/mxml" 
         xmlns:entity="editor.entity.dialog.*"  
         styleName = "plain" 
         layout="absolute" 
         width ="100%"
         height="100%"
         borderStyle="solid"
         borderThickness="1"
         usePreloader="true"
         percentWidth="100"
         percentHeight="100"
         scriptTimeLimit="60"
         creationComplete="InitApp ();"
         addedToStage="OnAddedToStage ();"
         enterFrame="UpdateApp ();" 
         mouseDown="EditorContext.GetSingleton ().SetCurrentFocusedTitleWindow (null);"
         >
   
   <mx:Style source="editor.css"/>

   <mx:ApplicationControlBar backgroundColor="0xA0A0A0" dock="true" paddingTop="5" paddingBottom="1" verticalAlign="bottom">

      <mx:HBox id="Box_DesignCommands" verticalAlign="middle" borderStyle="none" height="100%" horizontalGap="1" verticalGap="0" paddingTop="1" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0">
         <mx:Spacer width="2"/>
         <mx:Button id="Button_LoadWorld" toolTip="Open Design" click="OnClicLoadWorldButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/file/design-open.png')" />
         <mx:Button id="Button_SaveWorld" toolTip="Save Design" click="OnClicSaveWorldButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/file/design-save.png')" />
         <mx:Button id="Button_DesignInfo" toolTip="Design Info" click="OnClickConfigWorldButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/file/design-info.png')" />
      </mx:HBox>
      <mx:HBox id="Box_EntityEditViewCommands" backgroundColor="0xD0D0D0" width="100%" height="100%" verticalAlign="middle" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="solid" borderThickness="0">
         <mx:Spacer width="100%"/>
         <mx:HBox id="Box_EntityEditViewCommands_1" backgroundColor="0xD0D0D0" verticalAlign="middle" borderStyle="none" height="100%" horizontalGap="1" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0">
            <mx:Spacer width="5"/>
            <mx:Button id="Button_Clone" toolTip="(C) Clone Selected(s)" click="OnClickCloneEntityButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/command/command-clone.png')" disabledIcon="@Embed('../res/command/command-clone-disabled.png')" />
            <mx:Button id="Button_Delete" toolTip="(D) Delete Selected(s)" click="OnClickDeleteEntityButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/command/command-delete.png')" disabledIcon="@Embed('../res/command/command-delete-disabled.png')" />
            <mx:Button id="Button_MoveToTop" toolTip="Move Selected(s) to Top" click="OnClickMoveEntityToTopButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/command/command-to-top.png')" disabledIcon="@Embed('../res/command/command-to-top-disabled.png')" />
            <mx:Button id="Button_MoveToBottom" toolTip="Move Selected(s) to Bottom" click="OnClickMoveEntityToBottomButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/command/command-to-bottom.png')" disabledIcon="@Embed('../res/command/command-to-bottom-disabled.png')" />
            <mx:Spacer width="10"/>
            <mx:Button id="Button_Glue" toolTip="Attach Entities As Brothers" click="OnClickMakeEntityBrothersButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/command/command-brothers-make.png')" disabledIcon="@Embed('../res/command/command-brothers-make-disabled.png')" />
            <mx:Button id="Button_BreakApart" toolTip="Break Up Attached Entities (Brothers)" click="OnClickBreakApartEntityBrothersButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/command/command-brothers-break.png')" disabledIcon="@Embed('../res/command/command-brothers-break-disabled.png')" />
            <mx:Spacer width="10"/>
            <mx:Button id="Button_EntitySettings" toolTip="Set Properties of The Selected" click="OnClickEntitySettingsButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" cornerRadius="0" icon="@Embed('../res/command/command-setting.png')" disabledIcon="@Embed('../res/command/command-setting-disabled.png')" />
            <mx:Spacer width="10"/>
         </mx:HBox>
         <mx:HBox backgroundColor="0xA0A0A0" verticalAlign="middle" borderStyle="none" height="100%" horizontalGap="0" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0">
            <mx:Spacer width="8"/>
            <mx:Button id="Button_Play" toolTip="Play" click="OnClickPlayCurrentSceneButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/play/play-run.png')" disabledIcon="@Embed('../res/play/play-run-disabled.png')" />
            <mx:Button id="Button_Stop" toolTip="Stop" click="OnClickStopCurrentSceneButton ();" enabled="false" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/play/play-stop.png')" disabledIcon="@Embed('../res/play/play-stop-disabled.png')" />
            <mx:Spacer width="8"/>
         </mx:HBox>
         <mx:HBox id="Box_EntityEditViewCommands_2" backgroundColor="0xD0D0D0" verticalAlign="middle" borderStyle="none" height="100%" horizontalGap="1" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0">
            <mx:Spacer width="10"/>
            <mx:Button id="Button_ClearOrResetScene" toolTip="New Design" click="OnClickClearOrResetSceneButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/file/design-new.png')" />
            <mx:Button id="Button_ConfigScene" toolTip="Config Design" click="OnClickConfigSceneButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/file/design-config.png')" />
            <mx:Spacer width="10"/>
            <mx:Button id="Button_MoveSceneMode" selected="false" toolTip="Move Scene Mode" click="OnClickMoveSceneModeButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="true" cornerRadius="0" icon="@Embed('../res/command/command-move-scene.png')" selectedDownIcon="@Embed('../res/command/command-move-scene-sel.png')" selectedOverIcon="@Embed('../res/command/command-move-scene-sel.png')" selectedUpIcon="@Embed('../res/command/command-move-scene-sel.png')" />
            <mx:Button id="Button_MouseCookieMode" selected="false" toolTip="Cookie Mode" click="OnClickCookieSelectModeButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="true" cornerRadius="0" icon="@Embed('../res/command/command-cookie-mode.png')" selectedDownIcon="@Embed('../res/command/command-cookie-mode-sel.png')" selectedOverIcon="@Embed('../res/command/command-cookie-mode-sel.png')" selectedUpIcon="@Embed('../res/command/command-cookie-mode-sel.png')" />
            <mx:Button id="Button_ShowAllEntityLinks" selected="false" toolTip="Show All Links" click="OnClickShowAllEntityLinksButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="true" cornerRadius="0" icon="@Embed('../res/command/command-show-all-links.png')" selectedDownIcon="@Embed('../res/command/command-show-all-links-sel.png')" selectedOverIcon="@Embed('../res/command/command-show-all-links-sel.png')" selectedUpIcon="@Embed('../res/command/command-show-all-links-sel.png')" />
            <mx:Spacer width="10"/>
            <mx:Button id="Button_Undo" toolTip="Undo" click="OnClickUndoSceneButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/command/command-undo.png')" disabledIcon="@Embed('../res/command/command-undo-disabled.png')" />
            <mx:Button id="Button_Redo" toolTip="Redo" click="OnClickRedoSceneButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/command/command-redo.png')" disabledIcon="@Embed('../res/command/command-redo-disabled.png')" />
            <mx:Spacer width="5"/>
         </mx:HBox>
         <mx:Spacer width="100%"/>
      </mx:HBox>
      <mx:HBox id="Box_SwitchViewCommands" borderStyle="none" height="100%" horizontalGap="0" verticalGap="0" paddingTop="1" paddingLeft="0" paddingRight="0" paddingBottom="1" borderThickness="0">
         <mx:Button id="Button_CollisionCategoryHelp" toolTip="Editing Help" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/editor/editor-about.png')" click="OnClickOpenLinksButton()" />
         <mx:Spacer width="2"/>
      </mx:HBox>

   </mx:ApplicationControlBar>


   <mx:VBox width="100%" height="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderStyle="none" borderThickness="0" horizontalGap="0" verticalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">

      <mx:Spacer height="3"/>

      <mx:HBox id="EntityDesignView" direction="horizontal" borderStyle="solid" height="100%" width="100%" 
            paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" 
            horizontalScrollPolicy="off" verticalScrollPolicy="off"
            horizontalGap="0" verticalGap="0" borderThickness="0"
            >
         <mx:HBox borderStyle="solid"  backgroundColor="0xE0E0E0" height="100%" width="100%"
                     paddingTop="0" paddingLeft="1" paddingRight="0" paddingBottom="0"
                     horizontalScrollPolicy="off" verticalScrollPolicy="off"
                     horizontalGap="0" verticalGap="0" borderThickness="0">
            <mx:TabNavigator id="Box_CreateCommands" backgroundColor="0xE0E0E0" width="79" height="100%" creationPolicy="all" textAlign="center">
               <mx:Box icon="@Embed('../res/create/create-panel-normal.png')" toolTip="General Components" direction="vertical" borderStyle="solid" width="100%" height="100%"
                        paddingTop="5" paddingLeft="1" paddingRight="1" paddingBottom="1" textAlign="center"
                        horizontalGap="0" verticalGap="0" verticalScrollPolicy="off">
                  <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="73" 
                         tileWidth="36" tileHeight="36" 
                         horizontalGap="1" verticalGap="1" 
                         paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                     <mx:Button id="Button_CreateBox" click="OnClickCreateEntityButton (event, &quot;RectangleShape&quot;, {mAiType: Define.ShapeAiType_Unknown}); ViewStack_CiShapes.selectedChild=CiShapeRectagelePanel;" toolTip="Create Rectangle" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/box.png')" downIcon="@Embed('../res/create/box-sel.png')" overIcon="@Embed('../res/create/box.png')" selectedUpIcon="@Embed('../res/create/box-sel.png')" selectedOverIcon="@Embed('../res/create/box-sel.png')" selectedDownIcon="@Embed('../res/create/box.png')"   />
                     <mx:Button id="Button_CreateBall" click="OnClickCreateEntityButton (event, &quot;CircleShape&quot;, {mAiType: Define.ShapeAiType_Unknown}); ViewStack_CiShapes.selectedChild=CiShapeCirclePanel;" toolTip="Create Circle" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/ball.png')" downIcon="@Embed('../res/create/ball-sel.png')" overIcon="@Embed('../res/create/ball.png')" selectedUpIcon="@Embed('../res/create/ball-sel.png')" selectedOverIcon="@Embed('../res/create/ball-sel.png')" selectedDownIcon="@Embed('../res/create/ball.png')"   />
                     <mx:Button id="Button_CreatePolygon" click="OnClickCreateEntityButton (event, &quot;PolygonShape&quot;, {mAiType: Define.ShapeAiType_Unknown}); ViewStack_CiShapes.selectedChild=CiShapePolygonPanel;" toolTip="Create Polygon" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polygon.png')" downIcon="@Embed('../res/create/polygon-sel.png')" overIcon="@Embed('../res/create/polygon.png')" selectedUpIcon="@Embed('../res/create/polygon-sel.png')" selectedOverIcon="@Embed('../res/create/polygon-sel.png')" selectedDownIcon="@Embed('../res/create/polygon.png')"   />
                     <mx:Button id="Button_CreatePolyline" click="OnClickCreateEntityButton (event, &quot;PolylineShape&quot;, {mAiType: Define.ShapeAiType_Unknown}); ViewStack_CiShapes.selectedChild=CiShapePolylinePanel;" toolTip="Create Polyline" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polyline.png')" downIcon="@Embed('../res/create/polyline-sel.png')" overIcon="@Embed('../res/create/polyline.png')" selectedUpIcon="@Embed('../res/create/polyline-sel.png')" selectedOverIcon="@Embed('../res/create/polyline-sel.png')" selectedDownIcon="@Embed('../res/create/polyline.png')"   />
                  </mx:Tile>
                  <mx:Spacer height="5"/>
                  <mx:Spacer height="5"/>
                  <mx:HBox horizontalAlign="center" height="51" width="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="solid" borderThickness="0">
                     <mx:ViewStack id="ViewStack_CiShapes" borderStyle="none" creationPolicy="all" width="100%" height="49">
                        <mx:Tile id="CiShapeRectagelePanel" direction="horizontal" borderStyle="none" width="100%" height="100%"
                               tileWidth="23" tileHeight="23"
                               horizontalGap="1" verticalGap="1"
                               paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                           <mx:Button id="Button_CreateBox_Static" click="OnClickCreateEntityButton (event, &quot;RectangleShape&quot;, {mAiType: Define.ShapeAiType_Static});" toolTip="Create C.I. Static Rectangle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/box_static.png')" downIcon="@Embed('../res/create/box-sel_static.png')" overIcon="@Embed('../res/create/box_static.png')" selectedUpIcon="@Embed('../res/create/box-sel_static.png')" selectedOverIcon="@Embed('../res/create/box-sel_static.png')" selectedDownIcon="@Embed('../res/create/box_static.png')"   />
                           <mx:Button id="Button_CreateBox_Movable" click="OnClickCreateEntityButton (event, &quot;RectangleShape&quot;, {mAiType: Define.ShapeAiType_Movable});" toolTip="Create C.I. Moveable Rectangle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/box_movable.png')" downIcon="@Embed('../res/create/box-sel_movable.png')" overIcon="@Embed('../res/create/box_movable.png')" selectedUpIcon="@Embed('../res/create/box-sel_movable.png')" selectedOverIcon="@Embed('../res/create/box-sel_movable.png')" selectedDownIcon="@Embed('../res/create/box_movable.png')"   />
                           <mx:Button id="Button_CreateBox_Breakable" click="OnClickCreateEntityButton (event, &quot;RectangleShape&quot;, {mAiType: Define.ShapeAiType_Breakable});" toolTip="Create C.I. Breakable Rectangle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/box_breakable.png')" downIcon="@Embed('../res/create/box-sel_breakable.png')" overIcon="@Embed('../res/create/box_breakable.png')" selectedUpIcon="@Embed('../res/create/box-sel_breakable.png')" selectedOverIcon="@Embed('../res/create/box-sel_breakable.png')" selectedDownIcon="@Embed('../res/create/box_breakable.png')"   />
                           <mx:Button id="Button_CreateBox_Infected" click="OnClickCreateEntityButton (event, &quot;RectangleShape&quot;, {mAiType: Define.ShapeAiType_Infected});" toolTip="Create C.I. Infected Rectangle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/box_infected.png')" downIcon="@Embed('../res/create/box-sel_infected.png')" overIcon="@Embed('../res/create/box_infected.png')" selectedUpIcon="@Embed('../res/create/box-sel_infected.png')" selectedOverIcon="@Embed('../res/create/box-sel_infected.png')" selectedDownIcon="@Embed('../res/create/box_infected.png')"   />
                           <mx:Button id="Button_CreateBox_Uninfected" click="OnClickCreateEntityButton (event, &quot;RectangleShape&quot;, {mAiType: Define.ShapeAiType_Uninfected});" toolTip="Create C.I. Uninfected Rectangle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/box_uninfected.png')" downIcon="@Embed('../res/create/box-sel_uninfected.png')" overIcon="@Embed('../res/create/box_uninfected.png')" selectedUpIcon="@Embed('../res/create/box-sel_uninfected.png')" selectedOverIcon="@Embed('../res/create/box-sel_uninfected.png')" selectedDownIcon="@Embed('../res/create/box_uninfected.png')"   />
                           <mx:Button id="Button_CreateBox_Dontinfect" click="OnClickCreateEntityButton (event, &quot;RectangleShape&quot;, {mAiType: Define.ShapeAiType_DontInfect});" toolTip="Create C.I. &quot;Don't Infect Me&quot; Rectangle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/box_dontinfect.png')" downIcon="@Embed('../res/create/box-sel_dontinfect.png')" overIcon="@Embed('../res/create/box_dontinfect.png')" selectedUpIcon="@Embed('../res/create/box-sel_dontinfect.png')" selectedOverIcon="@Embed('../res/create/box-sel_dontinfect.png')" selectedDownIcon="@Embed('../res/create/box_dontinfect.png')"   />
                        </mx:Tile>
                        <mx:Tile id="CiShapeCirclePanel" direction="horizontal" borderStyle="none" width="100%" height="100%"
                               tileWidth="23" tileHeight="23"
                               horizontalGap="1" verticalGap="1"
                               paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                           <mx:Button id="Button_CreateBall_Static" click="OnClickCreateEntityButton (event, &quot;CircleShape&quot;, {mAiType: Define.ShapeAiType_Static});" toolTip="Create C.I. Static Circle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/ball_static.png')" downIcon="@Embed('../res/create/ball-sel_static.png')" overIcon="@Embed('../res/create/ball_static.png')" selectedUpIcon="@Embed('../res/create/ball-sel_static.png')" selectedOverIcon="@Embed('../res/create/ball-sel_static.png')" selectedDownIcon="@Embed('../res/create/ball_static.png')"   />
                           <mx:Button id="Button_CreateBall_Movable" click="OnClickCreateEntityButton (event, &quot;CircleShape&quot;, {mAiType: Define.ShapeAiType_Movable});" toolTip="Create C.I. Moveable Circle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/ball_movable.png')" downIcon="@Embed('../res/create/ball-sel_movable.png')" overIcon="@Embed('../res/create/ball_movable.png')" selectedUpIcon="@Embed('../res/create/ball-sel_movable.png')" selectedOverIcon="@Embed('../res/create/ball-sel_movable.png')" selectedDownIcon="@Embed('../res/create/ball_movable.png')"   />
                           <mx:Button id="Button_CreateBall_Breakable" click="OnClickCreateEntityButton (event, &quot;CircleShape&quot;, {mAiType: Define.ShapeAiType_Breakable});" toolTip="Create C.I. Breakable Circle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/ball_breakable.png')" downIcon="@Embed('../res/create/ball-sel_breakable.png')" overIcon="@Embed('../res/create/ball_breakable.png')" selectedUpIcon="@Embed('../res/create/ball-sel_breakable.png')" selectedOverIcon="@Embed('../res/create/ball-sel_breakable.png')" selectedDownIcon="@Embed('../res/create/ball_breakable.png')"   />
                           <mx:Button id="Button_CreateBall_Infected" click="OnClickCreateEntityButton (event, &quot;CircleShape&quot;, {mAiType: Define.ShapeAiType_Infected});" toolTip="Create C.I. Infected Circle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/ball_infected.png')" downIcon="@Embed('../res/create/ball-sel_infected.png')" overIcon="@Embed('../res/create/ball_infected.png')" selectedUpIcon="@Embed('../res/create/ball-sel_infected.png')" selectedOverIcon="@Embed('../res/create/ball-sel_infected.png')" selectedDownIcon="@Embed('../res/create/ball_infected.png')"   />
                           <mx:Button id="Button_CreateBall_Uninfected" click="OnClickCreateEntityButton (event, &quot;CircleShape&quot;, {mAiType: Define.ShapeAiType_Uninfected});" toolTip="Create C.I. Uninfected Circle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/ball_uninfected.png')" downIcon="@Embed('../res/create/ball-sel_uninfected.png')" overIcon="@Embed('../res/create/ball_uninfected.png')" selectedUpIcon="@Embed('../res/create/ball-sel_uninfected.png')" selectedOverIcon="@Embed('../res/create/ball-sel_uninfected.png')" selectedDownIcon="@Embed('../res/create/ball_uninfected.png')"   />
                           <mx:Button id="Button_CreateBall_DontInfect" click="OnClickCreateEntityButton (event, &quot;CircleShape&quot;, {mAiType: Define.ShapeAiType_DontInfect});" toolTip="Create C.I. &quot;Don't Infect Me&quot; Circle" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/ball_dontinfect.png')" downIcon="@Embed('../res/create/ball-sel_dontinfect.png')" overIcon="@Embed('../res/create/ball_dontinfect.png')" selectedUpIcon="@Embed('../res/create/ball-sel_dontinfect.png')" selectedOverIcon="@Embed('../res/create/ball-sel_dontinfect.png')" selectedDownIcon="@Embed('../res/create/ball_dontinfect.png')"   />
                        </mx:Tile>
                        <mx:Tile id="CiShapePolygonPanel" direction="horizontal" borderStyle="none" width="100%" height="100%"
                               tileWidth="23" tileHeight="23"
                               horizontalGap="1" verticalGap="1"
                               paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                           <mx:Button id="Button_CreatePolygon_Static" click="OnClickCreateEntityButton (event, &quot;PolygonShape&quot;, {mAiType: Define.ShapeAiType_Static});" toolTip="Create C.I. Static Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polygon_static.png')" downIcon="@Embed('../res/create/polygon-sel_static.png')" overIcon="@Embed('../res/create/polygon_static.png')" selectedUpIcon="@Embed('../res/create/polygon-sel_static.png')" selectedOverIcon="@Embed('../res/create/polygon-sel_static.png')" selectedDownIcon="@Embed('../res/create/polygon_static.png')"   />
                           <mx:Button id="Button_CreatePolygon_Movable" click="OnClickCreateEntityButton (event, &quot;PolygonShape&quot;, {mAiType: Define.ShapeAiType_Movable});" toolTip="Create C.I. Moveable Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polygon_movable.png')" downIcon="@Embed('../res/create/polygon-sel_movable.png')" overIcon="@Embed('../res/create/polygon_movable.png')" selectedUpIcon="@Embed('../res/create/polygon-sel_movable.png')" selectedOverIcon="@Embed('../res/create/polygon-sel_movable.png')" selectedDownIcon="@Embed('../res/create/polygon_movable.png')"   />
                           <mx:Button id="Button_CreatePolygon_Breakable" click="OnClickCreateEntityButton (event, &quot;PolygonShape&quot;, {mAiType: Define.ShapeAiType_Breakable});" toolTip="Create C.I. Breakable Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polygon_breakable.png')" downIcon="@Embed('../res/create/polygon-sel_breakable.png')" overIcon="@Embed('../res/create/polygon_breakable.png')" selectedUpIcon="@Embed('../res/create/polygon-sel_breakable.png')" selectedOverIcon="@Embed('../res/create/polygon-sel_breakable.png')" selectedDownIcon="@Embed('../res/create/polygon_breakable.png')"   />
                           <mx:Button id="Button_CreatePolygon_Infected" click="OnClickCreateEntityButton (event, &quot;PolygonShape&quot;, {mAiType: Define.ShapeAiType_Infected});" toolTip="Create C.I. Infected Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polygon_infected.png')" downIcon="@Embed('../res/create/polygon-sel_infected.png')" overIcon="@Embed('../res/create/polygon_infected.png')" selectedUpIcon="@Embed('../res/create/polygon-sel_infected.png')" selectedOverIcon="@Embed('../res/create/polygon-sel_infected.png')" selectedDownIcon="@Embed('../res/create/polygon_infected.png')"   />
                           <mx:Button id="Button_CreatePolygon_Uninfected" click="OnClickCreateEntityButton (event, &quot;PolygonShape&quot;, {mAiType: Define.ShapeAiType_Uninfected});" toolTip="Create C.I. Uninfected Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polygon_uninfected.png')" downIcon="@Embed('../res/create/polygon-sel_uninfected.png')" overIcon="@Embed('../res/create/polygon_uninfected.png')" selectedUpIcon="@Embed('../res/create/polygon-sel_uninfected.png')" selectedOverIcon="@Embed('../res/create/polygon-sel_uninfected.png')" selectedDownIcon="@Embed('../res/create/polygon_uninfected.png')"   />
                           <mx:Button id="Button_CreatePolygon_Dontinfect" click="OnClickCreateEntityButton (event, &quot;PolygonShape&quot;, {mAiType: Define.ShapeAiType_DontInfect});" toolTip="Create C.I. &quot;Don't Infect Me&quot; Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polygon_dontinfect.png')" downIcon="@Embed('../res/create/polygon-sel_dontinfect.png')" overIcon="@Embed('../res/create/polygon_dontinfect.png')" selectedUpIcon="@Embed('../res/create/polygon-sel_dontinfect.png')" selectedOverIcon="@Embed('../res/create/polygon-sel_dontinfect.png')" selectedDownIcon="@Embed('../res/create/polygon_dontinfect.png')"   />
                        </mx:Tile>
                        <mx:Tile id="CiShapePolylinePanel" direction="horizontal" borderStyle="none" width="100%" height="100%"
                               tileWidth="23" tileHeight="23"
                               horizontalGap="1" verticalGap="1"
                               paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                           <mx:Button id="Button_CreatePolyline_Static" click="OnClickCreateEntityButton (event, &quot;PolylineShape&quot;, {mAiType: Define.ShapeAiType_Static});" toolTip="Create C.I. Static Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polyline_static.png')" downIcon="@Embed('../res/create/polyline-sel_static.png')" overIcon="@Embed('../res/create/polyline_static.png')" selectedUpIcon="@Embed('../res/create/polyline-sel_static.png')" selectedOverIcon="@Embed('../res/create/polyline-sel_static.png')" selectedDownIcon="@Embed('../res/create/polyline_static.png')"   />
                           <mx:Button id="Button_CreatePolyline_Movable" click="OnClickCreateEntityButton (event, &quot;PolylineShape&quot;, {mAiType: Define.ShapeAiType_Movable});" toolTip="Create C.I. Moveable Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polyline_movable.png')" downIcon="@Embed('../res/create/polyline-sel_movable.png')" overIcon="@Embed('../res/create/polyline_movable.png')" selectedUpIcon="@Embed('../res/create/polyline-sel_movable.png')" selectedOverIcon="@Embed('../res/create/polyline-sel_movable.png')" selectedDownIcon="@Embed('../res/create/polyline_movable.png')"   />
                           <mx:Button id="Button_CreatePolyline_Breakable" click="OnClickCreateEntityButton (event, &quot;PolylineShape&quot;, {mAiType: Define.ShapeAiType_Breakable});" toolTip="Create C.I. Breakable Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polyline_breakable.png')" downIcon="@Embed('../res/create/polyline-sel_breakable.png')" overIcon="@Embed('../res/create/polyline_breakable.png')" selectedUpIcon="@Embed('../res/create/polyline-sel_breakable.png')" selectedOverIcon="@Embed('../res/create/polyline-sel_breakable.png')" selectedDownIcon="@Embed('../res/create/polyline_breakable.png')"   />
                           <mx:Button id="Button_CreatePolyline_Infected" click="OnClickCreateEntityButton (event, &quot;PolylineShape&quot;, {mAiType: Define.ShapeAiType_Infected});" toolTip="Create C.I. Infected Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polyline_infected.png')" downIcon="@Embed('../res/create/polyline-sel_infected.png')" overIcon="@Embed('../res/create/polyline_infected.png')" selectedUpIcon="@Embed('../res/create/polyline-sel_infected.png')" selectedOverIcon="@Embed('../res/create/polyline-sel_infected.png')" selectedDownIcon="@Embed('../res/create/polyline_infected.png')"   />
                           <mx:Button id="Button_CreatePolyline_Uninfected" click="OnClickCreateEntityButton (event, &quot;PolylineShape&quot;, {mAiType: Define.ShapeAiType_Uninfected});" toolTip="Create C.I. Uninfected Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polyline_uninfected.png')" downIcon="@Embed('../res/create/polyline-sel_uninfected.png')" overIcon="@Embed('../res/create/polyline_uninfected.png')" selectedUpIcon="@Embed('../res/create/polyline-sel_uninfected.png')" selectedOverIcon="@Embed('../res/create/polyline-sel_uninfected.png')" selectedDownIcon="@Embed('../res/create/polyline_uninfected.png')"   />
                           <mx:Button id="Button_CreatePolyline_Dontinfect" click="OnClickCreateEntityButton (event, &quot;PolylineShape&quot;, {mAiType: Define.ShapeAiType_DontInfect});" toolTip="Create C.I. &quot;Don't Infect Me&quot; Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/polyline_dontinfect.png')" downIcon="@Embed('../res/create/polyline-sel_dontinfect.png')" overIcon="@Embed('../res/create/polyline_dontinfect.png')" selectedUpIcon="@Embed('../res/create/polyline-sel_dontinfect.png')" selectedOverIcon="@Embed('../res/create/polyline-sel_dontinfect.png')" selectedDownIcon="@Embed('../res/create/polyline_dontinfect.png')"   />
                        </mx:Tile>
                     </mx:ViewStack>
                  </mx:HBox>
                  <mx:Spacer height="8"/>
                  <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="110"
                         tileWidth="36" tileHeight="36"
                         horizontalGap="1" verticalGap="1"
                         paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                     <mx:Button id="Button_CreateJoint_Hinge" click="OnClickCreateEntityButton (event, &quot;HingeJoint&quot;);" toolTip="Create Hinge Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/joint_hinge.png')" downIcon="@Embed('../res/create/joint-sel_hinge.png')" overIcon="@Embed('../res/create/joint_hinge.png')" selectedUpIcon="@Embed('../res/create/joint-sel_hinge.png')" selectedOverIcon="@Embed('../res/create/joint-sel_hinge.png')" selectedDownIcon="@Embed('../res/create/joint_hinge.png')"   />
                     <mx:Button id="Button_CreateJoint_Slider" click="OnClickCreateEntityButton (event, &quot;SliderJoint&quot;);" toolTip="Create Slider Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/joint_slider.png')" downIcon="@Embed('../res/create/joint-sel_slider.png')" overIcon="@Embed('../res/create/joint_slider.png')" selectedUpIcon="@Embed('../res/create/joint-sel_slider.png')" selectedOverIcon="@Embed('../res/create/joint-sel_slider.png')" selectedDownIcon="@Embed('../res/create/joint_slider.png')"   />
                     <mx:Button id="Button_CreateJoint_Distance" click="OnClickCreateEntityButton (event, &quot;DistanceJoint&quot;);" toolTip="Create Distance Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/joint_distance.png')" downIcon="@Embed('../res/create/joint-sel_distance.png')" overIcon="@Embed('../res/create/joint_distance.png')" selectedUpIcon="@Embed('../res/create/joint-sel_distance.png')" selectedOverIcon="@Embed('../res/create/joint-sel_distance.png')" selectedDownIcon="@Embed('../res/create/joint_distance.png')"   />
                     <mx:Button id="Button_CreateJoint_Spring" click="OnClickCreateEntityButton (event, &quot;SpringJoint&quot;);" toolTip="Create Spring Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/joint_spring.png')" downIcon="@Embed('../res/create/joint-sel_spring.png')" overIcon="@Embed('../res/create/joint_spring.png')" selectedUpIcon="@Embed('../res/create/joint-sel_spring.png')" selectedOverIcon="@Embed('../res/create/joint-sel_spring.png')" selectedDownIcon="@Embed('../res/create/joint_spring.png')"   />
                     <mx:Button id="Button_CreateJoint_Weld" click="OnClickCreateEntityButton (event, &quot;WeldJoint&quot;);" toolTip="Create Weld Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/joint_weld.png')" downIcon="@Embed('../res/create/joint-sel_weld.png')" overIcon="@Embed('../res/create/joint_weld.png')" selectedUpIcon="@Embed('../res/create/joint-sel_weld.png')" selectedOverIcon="@Embed('../res/create/joint-sel_weld.png')" selectedDownIcon="@Embed('../res/create/joint_weld.png')"   />
                     <mx:Button id="Button_CreateJoint_Dummy" click="OnClickCreateEntityButton (event, &quot;DummyJoint&quot;);" toolTip="Create Dummy Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/joint_dummy.png')" downIcon="@Embed('../res/create/joint-sel_dummy.png')" overIcon="@Embed('../res/create/joint_dummy.png')" selectedUpIcon="@Embed('../res/create/joint-sel_dummy.png')" selectedOverIcon="@Embed('../res/create/joint-sel_dummy.png')" selectedDownIcon="@Embed('../res/create/joint_dummy.png')"   />
                     <!--
                     <mx:Button id="Button_CreateJoint_HingeSlider" toolTip="Create Slider Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/joint_hinge_slider.png')" downIcon="@Embed('../res/create/joint-sel_hinge_slider.png')" overIcon="@Embed('../res/create/joint_hinge_slider.png')" selectedUpIcon="@Embed('../res/create/joint-sel_hinge_slider.png')" selectedOverIcon="@Embed('../res/create/joint-sel_hinge_slider.png')" selectedDownIcon="@Embed('../res/create/joint_hinge_slider.png')"   />
                     -->
                  </mx:Tile>
                  <mx:Spacer height="7"/>
                  <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="73"
                         tileWidth="36" tileHeight="36"
                         horizontalGap="1" verticalGap="1"
                         paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                     <mx:Button id="Button_CreateLinearForce" click="OnClickCreateEntityButton (event, &quot;PowerSource&quot;, {mPowerSourceType: Define.PowerSource_Force});" toolTip="Create Force Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/force-linear.png')" downIcon="@Embed('../res/create/force-linear-sel.png')" overIcon="@Embed('../res/create/force-linear.png')" selectedUpIcon="@Embed('../res/create/force-linear-sel.png')" selectedOverIcon="@Embed('../res/create/force-linear-sel.png')" selectedDownIcon="@Embed('../res/create/force-linear.png')"   />
                     <mx:Button id="Button_CreateAngularForce" click="OnClickCreateEntityButton (event, &quot;PowerSource&quot;, {mPowerSourceType: Define.PowerSource_Torque});" toolTip="Create Torque Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/force-angular.png')" downIcon="@Embed('../res/create/force-angular-sel.png')" overIcon="@Embed('../res/create/force-angular.png')" selectedUpIcon="@Embed('../res/create/force-angular-sel.png')" selectedOverIcon="@Embed('../res/create/force-angular-sel.png')" selectedDownIcon="@Embed('../res/create/force-angular.png')"   />
                     <mx:Button id="Button_CreateLinearImpulse" click="OnClickCreateEntityButton (event, &quot;PowerSource&quot;, {mPowerSourceType: Define.PowerSource_LinearImpusle});" toolTip="Create Linear Impulse Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/impulse-linear.png')" downIcon="@Embed('../res/create/impulse-linear-sel.png')" overIcon="@Embed('../res/create/impulse-linear.png')" selectedUpIcon="@Embed('../res/create/impulse-linear-sel.png')" selectedOverIcon="@Embed('../res/create/impulse-linear-sel.png')" selectedDownIcon="@Embed('../res/create/impulse-linear.png')"   />
                     <mx:Button id="Button_CreateAngularImpulse" click="OnClickCreateEntityButton (event, &quot;PowerSource&quot;, {mPowerSourceType: Define.PowerSource_AngularImpulse});" toolTip="Create Angular Impulse Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/impulse-angular.png')" downIcon="@Embed('../res/create/impulse-angular-sel.png')" overIcon="@Embed('../res/create/impulse-angular.png')" selectedUpIcon="@Embed('../res/create/impulse-angular-sel.png')" selectedOverIcon="@Embed('../res/create/impulse-angular-sel.png')" selectedDownIcon="@Embed('../res/create/impulse-angular.png')"   />
                  </mx:Tile>
                  <mx:Spacer height="10"/>
                  <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="151"
                         tileWidth="36" tileHeight="36"
                         horizontalGap="1" verticalGap="1"
                         paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                     <mx:Button id="Button_CreateBox_Bomb" click="OnClickCreateEntityButton (event, &quot;RectangleShape&quot;, {mAiType: Define.ShapeAiType_Bomb});" toolTip="Create Bomb Box" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/box_bomb.png')" downIcon="@Embed('../res/create/box-sel_bomb.png')" overIcon="@Embed('../res/create/box_bomb.png')" selectedUpIcon="@Embed('../res/create/box-sel_bomb.png')" selectedOverIcon="@Embed('../res/create/box-sel_bomb.png')" selectedDownIcon="@Embed('../res/create/box_bomb.png')"   />
                     <mx:Button id="Button_CreateBall_Bomb" click="OnClickCreateEntityButton (event, &quot;CircleShape&quot;, {mAiType: Define.ShapeAiType_Bomb});" toolTip="Create Bomb Ball" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/ball_bomb.png')" downIcon="@Embed('../res/create/ball-sel_bomb.png')" overIcon="@Embed('../res/create/ball_bomb.png')" selectedUpIcon="@Embed('../res/create/ball-sel_bomb.png')" selectedOverIcon="@Embed('../res/create/ball-sel_bomb.png')" selectedDownIcon="@Embed('../res/create/ball_bomb.png')"   />
                     <mx:Button id="Button_CreateCamera" click="OnClickCreateEntityButton (event, &quot;Camera&quot;);" toolTip="Create Camera" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" disabledIcon="@Embed('../res/create/camera-disabled.png')"  upIcon="@Embed('../res/create/camera.png')" downIcon="@Embed('../res/create/camera-sel.png')" overIcon="@Embed('../res/create/camera.png')" selectedUpIcon="@Embed('../res/create/camera-sel.png')" selectedOverIcon="@Embed('../res/create/camera-sel.png')" selectedDownIcon="@Embed('../res/create/camera.png')"   />
                     <mx:Button id="Button_CreateGravityController" click="OnClickCreateEntityButton (event, &quot;ForceField&quot;);" toolTip="Create Gravity Controller" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" disabledIcon="@Embed('../res/create/gravity-controller-disabled.png')" selectedDisabledIcon="@Embed('../res/create/gravity-controller-disabled.png')" upIcon="@Embed('../res/create/gravity-controller.png')" downIcon="@Embed('../res/create/gravity-controller-sel.png')" overIcon="@Embed('../res/create/gravity-controller.png')" selectedUpIcon="@Embed('../res/create/gravity-controller-sel.png')" selectedOverIcon="@Embed('../res/create/gravity-controller-sel.png')" selectedDownIcon="@Embed('../res/create/gravity-controller.png')"   />
                     <mx:Button id="Button_CreateText" click="OnClickCreateEntityButton (event, &quot;Text&quot;);" toolTip="Create Text" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/text.png')" downIcon="@Embed('../res/create/text-sel.png')" overIcon="@Embed('../res/create/text.png')" selectedUpIcon="@Embed('../res/create/text-sel.png')" selectedOverIcon="@Embed('../res/create/text-sel.png')" selectedDownIcon="@Embed('../res/create/text.png')"   />
                     <mx:Button id="Button_CreateTextButton" click="OnClickCreateEntityButton (event, &quot;TextButton&quot;);" toolTip="Create Text Button" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/text-button.png')" downIcon="@Embed('../res/create/text-button-sel.png')" overIcon="@Embed('../res/create/text-button.png')" selectedUpIcon="@Embed('../res/create/text-button-sel.png')" selectedOverIcon="@Embed('../res/create/text-button-sel.png')" selectedDownIcon="@Embed('../res/create/text-button.png')"   />
                     <mx:Button id="Button_CreateModuleShape" click="OnClickCreateEntityButton (event, &quot;ImageModule&quot;);" toolTip="Create Module Shape" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/module-shape.png')" downIcon="@Embed('../res/create/module-shape-sel.png')" overIcon="@Embed('../res/create/module-shape.png')" selectedUpIcon="@Embed('../res/create/module-shape-sel.png')" selectedOverIcon="@Embed('../res/create/module-shape-sel.png')" selectedDownIcon="@Embed('../res/create/module-shape.png')"   />
                     <mx:Button id="Button_CreateModuleShapeButton" click="OnClickCreateEntityButton (event, &quot;ImageModuleButton&quot;);" toolTip="Create Module Button" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/module-shape-button.png')" downIcon="@Embed('../res/create/module-shape-button-sel.png')" overIcon="@Embed('../res/create/module-shape-button.png')" selectedUpIcon="@Embed('../res/create/module-shape-button-sel.png')" selectedOverIcon="@Embed('../res/create/module-shape-button-sel.png')" selectedDownIcon="@Embed('../res/create/module-shape-button.png')"   />
                  </mx:Tile>
                  <mx:Spacer height="100%"/>
               </mx:Box>
               <mx:Box icon="@Embed('../res/create/create-panel-trigger.png')" toolTip="Trigger Components" direction="vertical" borderStyle="solid" width="83" height="100%"
                        paddingTop="5" paddingLeft="1" paddingRight="1" paddingBottom="1" textAlign="center"
                        horizontalGap="0" verticalGap="0" verticalScrollPolicy="off">
                  <mx:VBox verticalAlign="middle" width="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="none">
                     <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="151" 
                            horizontalGap="1" verticalGap="1" 
                            paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                        <mx:Button id="Button_CreateAction" click="OnClickCreateEntityButton (event, &quot;Action&quot;);" toolTip="Create Action" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/action.png')" downIcon="@Embed('../res/create/action-sel.png')" overIcon="@Embed('../res/create/action.png')" selectedUpIcon="@Embed('../res/create/action-sel.png')" selectedOverIcon="@Embed('../res/create/action-sel.png')" selectedDownIcon="@Embed('../res/create/action.png')"   />
                        <mx:Button id="Button_CreateTask" click="OnClickCreateEntityButton (event, &quot;Task&quot;);" toolTip="Create Task Aggregator" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/task.png')" downIcon="@Embed('../res/create/task-sel.png')" overIcon="@Embed('../res/create/task.png')" selectedUpIcon="@Embed('../res/create/task-sel.png')" selectedOverIcon="@Embed('../res/create/task-sel.png')" selectedDownIcon="@Embed('../res/create/task.png')"   />
                        <mx:Button id="Button_CreateCondition" click="OnClickCreateEntityButton (event, &quot;Condition&quot;);" toolTip="Create Basic Condition" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/condition.png')" downIcon="@Embed('../res/create/condition-sel.png')" overIcon="@Embed('../res/create/condition.png')" selectedUpIcon="@Embed('../res/create/condition-sel.png')" selectedOverIcon="@Embed('../res/create/condition-sel.png')" selectedDownIcon="@Embed('../res/create/condition.png')"   />
                        <mx:Button id="Button_CreateConditionDoor" click="OnClickCreateEntityButton (event, &quot;ConditionDoor&quot;);" toolTip="Create Condition Gate" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/condition_door.png')" downIcon="@Embed('../res/create/condition_door-sel.png')" overIcon="@Embed('../res/create/condition_door.png')" selectedUpIcon="@Embed('../res/create/condition_door-sel.png')" selectedOverIcon="@Embed('../res/create/condition_door-sel.png')" selectedDownIcon="@Embed('../res/create/condition_door.png')"   />
                        <!--
                        <mx:Button id="Button_CreateInputEntityRegionSelector" click="OnClickCreateEntityButton (event, &quot;RegionSelector&quot;); toolTip="Create Input Entity Regions Selector" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/input_entity_region_selector.png')" downIcon="@Embed('../res/create/input_entity_region_selector-sel.png')" overIcon="@Embed('../res/create/input_entity_region_selector.png')" selectedUpIcon="@Embed('../res/create/input_entity_region_selector-sel.png')" selectedOverIcon="@Embed('../res/create/input_entity_region_selector-sel.png')" selectedDownIcon="@Embed('../res/create/input_entity_region_selector.png')"   />
                        -->
                        <mx:Button id="Button_CreateInputEntityAssigner" click="OnClickCreateEntityButton (event, &quot;ManualSelector&quot;);" toolTip="Create Input Entity Manual Assigner" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/input_entity_limiter.png')" downIcon="@Embed('../res/create/input_entity_limiter-sel.png')" overIcon="@Embed('../res/create/input_entity_limiter.png')" selectedUpIcon="@Embed('../res/create/input_entity_limiter-sel.png')" selectedOverIcon="@Embed('../res/create/input_entity_limiter-sel.png')" selectedDownIcon="@Embed('../res/create/input_entity_limiter.png')"   />
                        <mx:Button id="Button_CreateInputEntityPairAssigner" click="OnClickCreateEntityButton (event, &quot;ManualPairSelector&quot;);" toolTip="Create Input Entity Pair Manual Assigner" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/input_entity_pair_limiter.png')" downIcon="@Embed('../res/create/input_entity_pair_limiter-sel.png')" overIcon="@Embed('../res/create/input_entity_pair_limiter.png')" selectedUpIcon="@Embed('../res/create/input_entity_pair_limiter-sel.png')" selectedOverIcon="@Embed('../res/create/input_entity_pair_limiter-sel.png')" selectedDownIcon="@Embed('../res/create/input_entity_pair_limiter.png')"   />
                        <mx:Button id="Button_CreateInputEntityScriptFilter" click="OnClickCreateEntityButton (event, &quot;ScriptSelector&quot;);" toolTip="Create Input Entity Script Filter" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/input_entity_filter.png')" downIcon="@Embed('../res/create/input_entity_filter-sel.png')" overIcon="@Embed('../res/create/input_entity_filter.png')" selectedUpIcon="@Embed('../res/create/input_entity_filter-sel.png')" selectedOverIcon="@Embed('../res/create/input_entity_filter-sel.png')" selectedDownIcon="@Embed('../res/create/input_entity_filter.png')"   />
                        <mx:Button id="Button_CreateInputEntityPairScriptFilter" click="OnClickCreateEntityButton (event, &quot;ScriptPairSelector&quot;);" toolTip="Create Input Entity Pair Script Filter" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/input_entity_pair_filter.png')" downIcon="@Embed('../res/create/input_entity_pair_filter-sel.png')" overIcon="@Embed('../res/create/input_entity_pair_filter.png')" selectedUpIcon="@Embed('../res/create/input_entity_pair_filter-sel.png')" selectedOverIcon="@Embed('../res/create/input_entity_pair_filter-sel.png')" selectedDownIcon="@Embed('../res/create/input_entity_pair_filter.png')"   />
                     </mx:Tile>
                     <mx:Spacer height="7"/>
                     <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="369" 
                            horizontalGap="1" verticalGap="1" 
                            paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                        <mx:Button id="Button_CreateEventHandler0" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnWorldBeforeInitializing});" toolTip="Event - Before Level Initializing" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_level_before_initilizing.png')" downIcon="@Embed('../res/create/event_on_level_before_initilizing-sel.png')" overIcon="@Embed('../res/create/event_on_level_before_initilizing.png')" selectedUpIcon="@Embed('../res/create/event_on_level_before_initilizing-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_level_before_initilizing-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_level_before_initilizing.png')"   />
                        <mx:Button id="Button_CreateEventHandler1" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnWorldAfterInitialized});" toolTip="Event - After Level Initialized" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_level_after_initilized.png')" downIcon="@Embed('../res/create/event_on_level_after_initilized-sel.png')" overIcon="@Embed('../res/create/event_on_level_after_initilized.png')" selectedUpIcon="@Embed('../res/create/event_on_level_after_initilized-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_level_after_initilized-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_level_after_initilized.png')"   />
                        <mx:Button id="Button_CreateEventHandler2" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnWorldBeforeUpdating});" toolTip="Event - Before Level Updating" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_level_before_updating.png')" downIcon="@Embed('../res/create/event_on_level_before_updating-sel.png')" overIcon="@Embed('../res/create/event_on_level_before_updating.png')" selectedUpIcon="@Embed('../res/create/event_on_level_before_updating-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_level_before_updating-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_level_before_updating.png')"   />
                        <mx:Button id="Button_CreateEventHandler3" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnWorldAfterUpdated});" toolTip="Event - After Level Updated" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_level_after_updated.png')" downIcon="@Embed('../res/create/event_on_level_after_updated-sel.png')" overIcon="@Embed('../res/create/event_on_level_after_updated.png')" selectedUpIcon="@Embed('../res/create/event_on_level_after_updated-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_level_after_updated-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_level_after_updated.png')"   />
                        <mx:Button id="Button_CreateEventHandler8" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnWorldMouseClick});" toolTip="Event - Mouse Event (World)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_world_mouse_clicked.png')" downIcon="@Embed('../res/create/event_on_world_mouse_clicked-sel.png')" overIcon="@Embed('../res/create/event_on_world_mouse_clicked.png')" selectedUpIcon="@Embed('../res/create/event_on_world_mouse_clicked-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_world_mouse_clicked-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_world_mouse_clicked.png')"   />
                        <mx:Button id="Button_CreateEventHandler58" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnEntityMouseClick});" toolTip="Event - Mouse Event (Shape)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_shape_mouse_clicked.png')" downIcon="@Embed('../res/create/event_on_shape_mouse_clicked-sel.png')" overIcon="@Embed('../res/create/event_on_shape_mouse_clicked.png')" selectedUpIcon="@Embed('../res/create/event_on_shape_mouse_clicked-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_shape_mouse_clicked-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_shape_mouse_clicked.png')"   />
                        <mx:Button id="Button_CreateEventHandler7" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnWorldKeyDown});" toolTip="Event - Keyboard" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_key_down.png')" downIcon="@Embed('../res/create/event_on_key_down-sel.png')" overIcon="@Embed('../res/create/event_on_key_down.png')" selectedUpIcon="@Embed('../res/create/event_on_key_down-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_key_down-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_key_down.png')"   />
                        <mx:Button id="Button_CreateEventHandler5" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnJointReachUpperLimit});" toolTip="Event - Joint Reaches Limit" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_joint_reach_upper_limit.png')" downIcon="@Embed('../res/create/event_on_joint_reach_upper_limit-sel.png')" overIcon="@Embed('../res/create/event_on_joint_reach_upper_limit.png')" selectedUpIcon="@Embed('../res/create/event_on_joint_reach_upper_limit-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_joint_reach_upper_limit-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_joint_reach_upper_limit.png')"   />

                        <mx:Button id="Button_CreateEventHandler59" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnEntityCreated});" toolTip="Event - Entity Created" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_entity_created.png')" downIcon="@Embed('../res/create/event_on_entity_created-sel.png')" overIcon="@Embed('../res/create/event_on_entity_created.png')" selectedUpIcon="@Embed('../res/create/event_on_entity_created-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_entity_created-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_entity_created.png')"   />
                        <mx:Button id="Button_CreateEventHandler50" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnEntityInitialized});" toolTip="Event - Entity Initialized" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_entity_initilized.png')" downIcon="@Embed('../res/create/event_on_entity_initilized-sel.png')" overIcon="@Embed('../res/create/event_on_entity_initilized.png')" selectedUpIcon="@Embed('../res/create/event_on_entity_initilized-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_entity_initilized-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_entity_initilized.png')"   />
                        <mx:Button id="Button_CreateEventHandler51" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnEntityUpdated});" toolTip="Event - Entity Updated" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_entity_updated.png')" downIcon="@Embed('../res/create/event_on_entity_updated-sel.png')" overIcon="@Embed('../res/create/event_on_entity_updated.png')" selectedUpIcon="@Embed('../res/create/event_on_entity_updated-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_entity_updated-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_entity_updated.png')"   />
                        <mx:Button id="Button_CreateEventHandler52" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnEntityDestroyed});" toolTip="Event - Entity Destroyed" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_entity_destroyed.png')" downIcon="@Embed('../res/create/event_on_entity_destroyed-sel.png')" overIcon="@Embed('../res/create/event_on_entity_destroyed.png')" selectedUpIcon="@Embed('../res/create/event_on_entity_destroyed-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_entity_destroyed-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_entity_destroyed.png')"   />
                        <mx:Button id="Button_CreateEventHandler53" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnTwoPhysicsShapesBeginContacting});" toolTip="Event - 2 Physics Shapes Start Contacting" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_shape_start_contacting.png')" downIcon="@Embed('../res/create/event_on_shape_start_contacting-sel.png')" overIcon="@Embed('../res/create/event_on_shape_start_contacting.png')" selectedUpIcon="@Embed('../res/create/event_on_shape_start_contacting-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_shape_start_contacting-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_shape_start_contacting.png')"   />
                        <mx:Button id="Button_CreateEventHandler6" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnWorldTimer});" toolTip="Event - Timer (World)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_world_timer.png')" downIcon="@Embed('../res/create/event_on_world_timer-sel.png')" overIcon="@Embed('../res/create/event_on_world_timer.png')" selectedUpIcon="@Embed('../res/create/event_on_world_timer-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_world_timer-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_world_timer.png')"   />
                        <mx:Button id="Button_CreateEventHandler57" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnEntityTimer});" toolTip="Event - Timer (Entity)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_entity_timer.png')" downIcon="@Embed('../res/create/event_on_entity_timer-sel.png')" overIcon="@Embed('../res/create/event_on_entity_timer.png')" selectedUpIcon="@Embed('../res/create/event_on_entity_timer-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_entity_timer-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_entity_timer.png')"   />
                        <mx:Button id="Button_CreateEventHandler56" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnEntityPairTimer});" toolTip="Event - Timer (Entity Pair)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_entity_pair_timer.png')" downIcon="@Embed('../res/create/event_on_entity_pair_timer-sel.png')" overIcon="@Embed('../res/create/event_on_entity_pair_timer.png')" selectedUpIcon="@Embed('../res/create/event_on_entity_pair_timer-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_entity_pair_timer-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_entity_pair_timer.png')"   />
                        <mx:Button id="Button_CreateEventHandler67" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnSequencedModuleLoopToEnd});" toolTip="Event - Animation Reaches Sequence End" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_module_loop_to_end.png')" downIcon="@Embed('../res/create/event_on_module_loop_to_end-sel.png')" overIcon="@Embed('../res/create/event_on_module_loop_to_end.png')" selectedUpIcon="@Embed('../res/create/event_on_module_loop_to_end-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_module_loop_to_end-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_module_loop_to_end.png')"   />
                        <mx:Button id="Button_CreateEventHandler66" click="OnClickCreateEntityButton (event, &quot;EventHandler&quot;, {mDefaultEventId: CoreEventIds.ID_OnGameActivated});" toolTip="Event - Game Loses/Gains Focus" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('../res/create/event_on_game_activated.png')" downIcon="@Embed('../res/create/event_on_game_activated-sel.png')" overIcon="@Embed('../res/create/event_on_game_activated.png')" selectedUpIcon="@Embed('../res/create/event_on_game_activated-sel.png')" selectedOverIcon="@Embed('../res/create/event_on_game_activated-sel.png')" selectedDownIcon="@Embed('../res/create/event_on_game_activated.png')"   />

                     </mx:Tile>
                     <mx:Spacer height="10"/>
                  </mx:VBox>
                  
               </mx:Box>
            </mx:TabNavigator>
            <mx:Box direction="vertical" borderStyle="solid" height="100%"  width="100%"
               paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
               horizontalGap="0" verticalGap="0" borderThickness="0" clipContent="true">
               <mx:ViewStack id="ViewStack_Scenes" borderStyle="solid" height="100%" width="100%"
                        paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
                        horizontalScrollPolicy="off" verticalScrollPolicy="off"
                        horizontalGap="0" verticalGap="0" borderThickness="1">
                  <mx:VBox height="100%" width="100%"><entity:SceneEditPanel id="mCurrentSceneEditPanel" height="100%" width="100%" /></mx:VBox>
               </mx:ViewStack>
               <mx:Box id="Box_StatusInfoBar" backgroundColor="0xE0E0E0" direction="horizontal" borderStyle="solid" height="29" width="100%"
                           paddingTop="2" paddingLeft="0" paddingRight="0" paddingBottom="2"
                           horizontalScrollPolicy="off" verticalScrollPolicy="off" verticalAlign="middle"
                           horizontalGap="0" verticalGap="0" borderThickness="1">
                  <mx:Label id="Label_MainSelectedEntityInfo" text="" width="100%"/>
                  <mx:Spacer width="100%"/>
                  <!--  focusIn="EditorContext.GetSingleton ().SetHasInputFocused (true);" focusOut="EditorContext.GetSingleton ().SetHasInputFocused (false);" -->
                  <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                  <mx:Spacer width="2" />
                  <mx:Label id="Label_GoToEntity" text="Select Entity#" />
                  <mx:TextInput id="Text_FindEntityId" text="" width="76" enter="OnEnterEntityIDsToSelect ();"/>
                  <mx:Spacer width="2" />
                  <!--
                  <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                  <mx:Spacer width="2" />
                  <mx:Button id="Button_ZoomOut" click="OnClickZoomOutButton ()" focusEnabled="false" fontSize="8" width="22" toggle="false" cornerRadius="0" icon="@Embed('../res/edit/zoom-out.png')" disabledIcon="@Embed('../res/edit/zoom-out-disabled.png')" />
                  <mx:Label id="Label_ZoomScale" textAlign="center" text="1.00"/>
                  <mx:Button id="Button_ZoomIn" click="OnClickZoomInButton ()" focusEnabled="false" fontSize="8" width="22" toggle="false" cornerRadius="0" icon="@Embed('../res/edit/zoom-in.png')" disabledIcon="@Embed('../res/edit/zoom-in-disabled.png')" />
                  <mx:Spacer width="2" />
                  -->
                  <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                  <mx:Label id="Label_EntityDisplayPosition" text="" minWidth="100"/>
                  <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                  <mx:Label id="Label_EntityPhysicsPosition" text="" minWidth="116"/>
               </mx:Box>
            </mx:Box>
         </mx:HBox>
      </mx:HBox>

   </mx:VBox>
   
   <mx:XML id="SaveWorldMenuData">
      <root>
         <menuitem label="Save Online ..." data="save_online" for_online="true"/>
         <menuitem label="Save Offline (xml) ..." data="save_offline"/>
         <!--menuitem label="Save Local ..." data="save_local"/-->
         <!--menuitem label="Quick Save (Ctrl + S)" data="save_cookie"/-->
         <menuitem label="Export Selected Entities to System Clipborad" data="export_selected_entities"/>
         <!--menuitem label="Export All Functions to System Clipborad" data="export_all_functions"/-->
      </root>
   </mx:XML>

   <mx:XML id="LoadWorldMenuData">
      <root>
         <menuitem label="Load Online ..." data="load_online" for_online="true"/>
         <menuitem label="Load Offline (xml) ..." data="load_offline"/>
         <!--menuitem label="Load Local ..." data="load_local"/-->
         <!--menuitem label="Quick Load ..." data="load_quick"/-->
         <menuitem label="Import ..." data="import"/>
         <!--menuitem label="Import Functions Only ..." data="import_functions"/-->
      </root>
   </mx:XML>

   <mx:XML id="ClearOrResetSceneMenuData">
      <root>
         <menuitem label="Clear All Entities" data="clear_all"/>
         <menuitem label="Clear All Entities and Reset Scene" data="clear_all_and_reset"/>
      </root>
   </mx:XML>

   <mx:XML id="ConfigSceneMenuData">
      <root>
         <menuitem label="General Settings ..." data="general"/>
         <menuitem label="Simulation Settings ..." data="physics"/>
         <menuitem label="Config Coordinate System ..." data="coordinate"/>
         <menuitem label="Config World Appearance ..." data="appearance"/>
         <menuitem label="Config Viewport ..." data="viewport"/>
      </root>
   </mx:XML>

  <mx:Script><![CDATA[
      
      import flash.system.System;
      
      import flash.events.Event;
      import flash.events.MouseEvent;
      import flash.events.KeyboardEvent;
      import flash.ui.Keyboard;
      import flash.ui.ContextMenu;
      import flash.ui.ContextMenuItem;
      import flash.display.LoaderInfo;
      
      import flash.net.URLRequest;
      import flash.net.URLLoader;
      import flash.net.URLRequestMethod;
      import flash.net.URLLoaderDataFormat;
      
      import mx.containers.VBox;
      import mx.controls.Button;
      import mx.controls.Menu;
      import mx.events.MenuEvent;
      
      import com.tapirgames.util.DisplayObjectUtil;
      import com.tapirgames.util.UrlUtil
      
      import editor.world.World;
      
      import editor.undo.*;
      
      import editor.entity.dialog.SceneEditPanel;
      import editor.entity.dialog.ScenePlayPanel;
      import editor.entity.Entity;
      import editor.entity.EntityShape;
      
      import editor.ccat.CollisionCategory;
      import editor.ccat.CollisionCategoryManager;
      
      import editor.display.dialog.*;
      import editor.display.sprite.EffectMessagePopup;
      
      import common.DataFormat;
      import common.DataFormat2;
      import common.DataFormat3;
      import common.WorldDefine;
      
      import common.trigger.CoreEventIds;
      
      import common.Define;
      import common.Version;
   
//========================================================================================
// app
//========================================================================================
   
      private function InitApp ():void
      {
         EditorContext.sEditorApp = this;
         
         NewWorld ();
      }
      
      private function UpdateApp ():void
      {
         
      }
      
   //================================================================================
   // 
   //================================================================================
      
      private var mAppParams:Object = new Object ();
      
      private function OnAddedToStage ():void
      {  
         stage.addEventListener (KeyboardEvent.KEY_DOWN, OnKeyDown);
         stage.addEventListener (MouseEvent.MOUSE_DOWN, OnMouseAction);
         stage.addEventListener (MouseEvent.MOUSE_MOVE, OnMouseAction);
         stage.addEventListener (MouseEvent.MOUSE_UP, OnMouseAction);
         
         mOriginalFPS = stage.frameRate;
         
         try
         {
            var loadInfo:LoaderInfo = LoaderInfo(stage.root.loaderInfo);
            mAppParams.mRootUrl = UrlUtil.GetRootUrl (loaderInfo.url);
            var flashVars:Object = loaderInfo.parameters;
            if (flashVars != null)
            {
               if (flashVars.action != null)
                  mAppParams.mAction = flashVars.action;
               if (flashVars.author != null)
                  mAppParams.mAuthorName = flashVars.author;
               if (flashVars.slot != null)
                  mAppParams.mSlotID = flashVars.slot;
               if (flashVars.revision != null)
                  mAppParams.mRevisionID = flashVars.revision;
            }
         }
         catch (error:Error)
         {
            trace (error.getStackTrace ());
         }
         
         mIsOnlineEditing = mAppParams.mRootUrl != null && mAppParams.mAction != null && mAppParams.mAuthorName != null && mAppParams.mSlotID != null && mAppParams.mRevisionID != null;
         
         if (IsOnlineEditing () && mAppParams.mAction != "create") // don't change this. If it is changed, old editor versions need rebuilt.
         {
            OnlineLoad (true);
         }
      }
      
      private function OnMouseAction (event:MouseEvent):void
      {
         EditorContext.mIsMouseButtonHold = event.buttonDown;
      }
      
      private var mOriginalFPS:Number = 30;
      
      public function RestoreDefaultFPS ():void
      {
         stage.frameRate = mOriginalFPS;
      }
      
      private var mIsOnlineEditing:Boolean = false;
      
      public function IsOnlineEditing ():Boolean
      {
         return mIsOnlineEditing;
      }
   
//========================================================================================
// world
//========================================================================================
         
      private var mWorld:World = null;

      public function GetWorld ():World
      {
         return mWorld;
      }
      
      public function SetWorld (world:World):void
      {
         CloseWorld ();
         
         EditorContext.sEditorContext = new EditorContext ();
         
         mWorld = world;
         
         CreateScenePanels ();
      }
      
      public function CloseWorld ():void
      {
         CloseScenePanels ();

         mWorld = null;
         
         if (EditorContext.sEditorContext != null)
            EditorContext.sEditorContext.Cleanup ();
         
         EditorContext.sEditorContext = null;
      }
   
      public function NewWorld ():void
      {
         SetWorld (new World ());
      }
      
      public function LoadWorld ():void
      {
      }
      
      public function SaveWorld ():void
      {
      }
      
   //========================================================================================
   // asset edit dialogs
   //========================================================================================
      
      private function OnKeyDown (event:KeyboardEvent):void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (event.keyCode);
         }
      }
      
      private function ShowCollisionCategoryListDialog ():void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (Keyboard.F5);
         }
      }
   
      private function ShowCodeLibListDialog ():void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (Keyboard.F6);
         }
      }
   
      private function ShowAssetImageModuleListDialog ():void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (Keyboard.F3);
         }
      }
   
      private function ShowAssetSoundListDialog ():void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (Keyboard.F4);
         }
      }
      
   //========================================================================================
   // load / save
   //========================================================================================
      
      private var mLoadWorldMenu:Menu = null;
      
      private function OnClicLoadWorldButton ():void
      {
         if (mLoadWorldMenu == null)
         {
            var xml:XML = <root />;
            for each (var menuItem:Object in LoadWorldMenuData.menuitem)
            {
               if (IsOnlineEditing () || menuItem.@["for_online"] != "true")
               {
                  xml.appendChild (menuItem);
               }
            }
            
            mLoadWorldMenu = Menu.createMenu(Button_LoadWorld, xml, false);
            mLoadWorldMenu.labelField="@label";
            mLoadWorldMenu.addEventListener(MenuEvent.ITEM_CLICK, OnSelectLoadWorldMenu);
         }
         
         var point:Point = Button_LoadWorld.localToGlobal (new Point (0, Button_LoadWorld.height));
         
         mLoadWorldMenu.show(point.x, point.y);
      }
      
      private function OnSelectLoadWorldMenu (event:MenuEvent):void
      {
         if (event.item.@data == "load_online")
         {
            OnlineLoad ();
         }
         else if (event.item.@data == "load_offline")
         {
            OnStartOfflineLoading ();
         }
         //else if (event.item.@data == "load_local")
         //{
         //}
         //else if (event.item.@data == "load_quick")
         //{
         //   MainView.QuickLoad ();
         //}
         else if (event.item.@data == "import")
         {
            OnStartOfflineImporting ();
         }
         //else if (event.item.@data == "import_functions")
         //{
         //   MainView.OpenImportSourceCodeDialog (true);
         //}
      }
      
      private var mSaveWorldMenu:Menu = null;
      
      private function OnClicSaveWorldButton ():void
      {
         if (mSaveWorldMenu == null)
         {
            var xml:XML = <root />;
            for each (var menuItem:Object in SaveWorldMenuData.menuitem)
            {
               if (IsOnlineEditing () || menuItem.@["for_online"] != "true")
               {
                  xml.appendChild (menuItem);
               }
            }
            
            mSaveWorldMenu = Menu.createMenu(Button_SaveWorld, xml, false);
            mSaveWorldMenu.labelField="@label";
            mSaveWorldMenu.addEventListener(MenuEvent.ITEM_CLICK, OnSelectSaveWorldMenu);
         }
         
         var point:Point = Button_SaveWorld.localToGlobal (new Point (0, Button_SaveWorld.height));
         
         mSaveWorldMenu.show(point.x, point.y);
      }
      
      private function OnSelectSaveWorldMenu (event:MenuEvent):void
      {
         if (event.item.@data == "save_online")
         {
            OnStartOnlineSaving ();
         }
         else if (event.item.@data == "save_offline")
         {
            OnStartOfflineSaving ();
         }
         //else if (event.item.@data == "save_local")
         //{
         //}
         //else if (event.item.@data == "save_cookie")
         //{
         //   MainView.QuickSave ();
         //}
         else if (event.item.@data == "export_selected_entities")
         {
            OnStartOfflineExporting ();
         }
         //else if (event.item.@data == "export_all_functions")
         //{
         //   MainView.ExportSelectedsToSystemMemory ();
         //}
      }
      
      private function OnStartOfflineLoading ():void
      {
         EditorContext.ShowModalDialog (WorldLoadingDialog, OfflineLoad);
      }
      
      private function OnStartOfflineImporting ():void
      {
         EditorContext.ShowModalDialog (WorldImportDialog, OfflineImport);
      }
      
      private function OnStartOnlineSaving ():void
      {
         EditorContext.ShowModalDialog (WorldOnlineSavingDialog, OnlineSave);
      }
      
      private function OnStartOfflineSaving ():void
      {
         var offlineSaveData:Object = GetOfflineSaveData ();
         if (offlineSaveData != null)
         {
            EditorContext.ShowModalDialog (WorldSavingDialog, null, offlineSaveData);
         }
      }
      
      private function OnStartOfflineExporting ():void
      {
         OfflineExport ();
      }
      
      private function OnClickConfigWorldButton ():void
      {
         
      }
      
      private function OnClickOpenLinksButton ():void
      {
         UrlUtil.PopupPage ("http://wiki.colorinfection.com");
      }
      
      // undo / redo
      
      private function OnClickUndoSceneButton ():void
      {
         
      }
      
      private function OnClickRedoSceneButton ():void
      {
         
      }
      
   //========================================================================================
   // online io
   //========================================================================================
      
      // return: online or not
      public function OnlineLoad (isFirstTime:Boolean = false):void
      {
         if (mOnlineLoadingPopup != null)
            return;
         
         var params:Object = mAppParams;
         
         if (params.mRootUrl == null || params.mAction == null || params.mAuthorName == null || params.mSlotID == null || params.mRevisionID == null)
            return;
         
         EditorContext.GetSingleton ().SetRecommandDesignFilename (params.mAuthorName + "-" + params.mSlotID + "-" + params.mRevisionID + ".phyardx", true);
         
         var designLoadUrl:String;
         if (isFirstTime)
         {
            designLoadUrl = params.mRootUrl + "design/" + params.mAuthorName + "/" + params.mSlotID + "/revision/" + params.mRevisionID + "/loadsc";
         }
         else
         {
            designLoadUrl = params.mRootUrl + "design/" + params.mAuthorName + "/" + params.mSlotID + "/revision/latest/loadsc";
            //var isNameRevision:Boolean = isNaN (parseInt (params.mRevisionID)); // "latest", "published"
            //if (isNameRevision)
            //{
               designLoadUrl = designLoadUrl + "?time=" + (new Date ().getTime ()); // avoid browser cache
            //}
         }
         var request:URLRequest = new URLRequest (designLoadUrl);
         request.method = URLRequestMethod.GET;
         
         //trace ("designLoadUrl = " + designLoadUrl);
         
         var loader:URLLoader = new URLLoader ();
         loader.dataFormat = URLLoaderDataFormat.BINARY;
         
         loader.addEventListener (ProgressEvent.PROGRESS, OnOnlineLoadProgress);
         
         loader.addEventListener (SecurityErrorEvent.SECURITY_ERROR, OnOnlineLoadError);
         loader.addEventListener (IOErrorEvent.IO_ERROR, OnOnlineLoadError);
         
         loader.addEventListener(Event.COMPLETE, OnOnlineLoadCompleted);
         
         loader.load ( request );
         
         mOnlineLoadingPopup = new EffectMessagePopup ("Loading ...", EffectMessagePopup.kBgColor_Special, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ());
         mOnlineLoadingPopup.SetAutoFade (false);
         mCurrentSceneEditPanel.PushFloatingMessage (mOnlineLoadingPopup);
      }
      
      private var mOnlineLoadingPopup:EffectMessagePopup = null;
      
      private function OnOnlineLoadProgress (event:ProgressEvent):void
      {
         if (mOnlineLoadingPopup != null)
            mOnlineLoadingPopup.Rebuild ("Loading ... (" + Math.floor (100 * event.bytesLoaded / event.bytesTotal) + "%)", EffectMessagePopup.kBgColor_Special, 0x000000);
      } 
      
      private function OnOnlineLoadError (event:Event):void
      {
         if (mOnlineLoadingPopup != null)
            mOnlineLoadingPopup.SetAutoFade (true);
         
         mOnlineLoadingPopup = null;
         
         mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Online load error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
      } 
      
      private function OnOnlineLoadCompleted(event:Event):void 
      {
         if (mOnlineLoadingPopup != null)
            mOnlineLoadingPopup.SetAutoFade (true);
         
         mOnlineLoadingPopup = null;
         
         var loader:URLLoader = URLLoader(event.target);
         
         var returnCode:int = Define.k_ReturnCode_UnknowError;
         
         var data:ByteArray = ByteArray (loader.data);
         
         returnCode = data.readByte ();
         
         if (returnCode != Define.k_ReturnCode_Successed)
         {
            //Alert.show("Some errors in loading! returnCode = " + returnCode, "Error");
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Online load error,  returnCode = " + returnCode, EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
         }
         else
         {
            CloseWorld ();
            
            try
            {  
               var designDataForEditing:ByteArray = new ByteArray ();
               
               data.readBytes (designDataForEditing);
               designDataForEditing.uncompress ();
                  
               var newWorld:World = new World ();
               SetWorld (newWorld);
               DataFormat.WorldDefine2EditorWorld (newWorld, DataFormat2.ByteArray2WorldDefine (designDataForEditing));
               
               CreateUndoPoint ("Online data is loaded");
               
               //Alert.show("Loading Succeeded!", "Succeeded");
               mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Online load succeeded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
            }
            catch (error:Error)
            {
               if (Capabilities.isDebugger)
                  throw error;
               
               RestoreWorld (mWorldHistoryManager.GetCurrentWorldState ());
               
               //Alert.show("Sorry, online loading error!", "Error");
               
               mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Online load error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
            }
         }
      }
      
      public function OnlineSave (options:Object = null):void
      {
         //
         var isImportant:Boolean = false;
         var revisionComment:String = "";
         if (options != null)
         {
            isImportant = options.mIsImportant;
            revisionComment = options.mRevisionComment.substr (0, 100);
         }
         var designDataRevisionComment:ByteArray = new ByteArray ();
         //designDataRevisionComment.writeMultiByte (revisionComment, "utf-8"); // has bug on linux
         designDataRevisionComment.writeUTFBytes (revisionComment);
         designDataRevisionComment.position = 0;
         
         //
         var params:Object = mAppParams;
         
         if (params.mRootUrl == null || params.mAuthorName == null || params.mSlotID == null)
            return;
         
         var designDataForEditing:ByteArray = DataFormat.WorldDefine2ByteArray (DataFormat.EditorWorld2WorldDefine (mWorld));
         designDataForEditing.compress ();
         designDataForEditing.position = 0;
         
         var designDataForPlaying:ByteArray = DataFormat.WorldDefine2ByteArray (DataFormat.EditorWorld2WorldDefine (mWorld));
         designDataForPlaying.compress ();
         designDataForPlaying.position = 0;
         
         var designDataAll:ByteArray = new ByteArray ();
         
         designDataAll.writeInt (Version.VersionNumber);
         
         //>> from v1.07 (in fact, the code added in v0110 r003)
         var shareSourceCode:Boolean = mWorld.IsShareSourceCode ();
         designDataAll.writeShort (mWorld.GetEntityContainer ().GetViewportWidth ()); // view width
         designDataAll.writeShort (mWorld.GetEntityContainer ().GetViewportHeight ()); // view height
         //designDataAll.writeByte  ((mWorld.GetEntityContainer ().GetViewerUiFlags () & Define.PlayerUiFlag_ShowPlayBar) != 0 ? 1 : 0); // show play bar?
         designDataAll.writeByte  ((mWorld.GetEntityContainer ().GetViewerUiFlags () & (Define.PlayerUiFlag_UseDefaultSkin | Define.PlayerUiFlag_UseOverlaySkin)) == Define.PlayerUiFlag_UseDefaultSkin ? 1 : 0);
         designDataAll.writeByte  (shareSourceCode ? 1 : 0); // share source code?
         //<<
         
         //
         
         designDataAll.writeByte (isImportant ? 1 : 0);
         
         designDataAll.writeInt (designDataRevisionComment.length);
         designDataAll.writeInt (designDataForEditing.length);
         //designDataAll.writeInt (shareSourceCode ? 0 : designDataForPlaying.length);
         designDataAll.writeInt (0); // !! currently, playing data is totally same as editing data
         
         designDataAll.writeBytes (designDataRevisionComment);
         designDataAll.writeBytes (designDataForEditing);
         if (! shareSourceCode)
         {
            //designDataAll.writeBytes (designDataForPlaying); // !! currently, playing data is totally same as editing data
         }
         
         var designSaveUrl:String = params.mRootUrl + "design/" + params.mAuthorName + "/" + params.mSlotID + "/save";
         var request:URLRequest = new URLRequest (designSaveUrl);
         request.contentType = "application/octet-stream";
         request.method = URLRequestMethod.POST;
         request.data = designDataAll;
         
         //trace ("designSaveUrl = " + designSaveUrl)
         
         var loader:URLLoader = new URLLoader ();
         loader.dataFormat = URLLoaderDataFormat.BINARY;
            
         //loader.addEventListener (ProgressEvent.PROGRESS, OnOnlineSaveProgress); // will not be triggered
         
         loader.addEventListener (SecurityErrorEvent.SECURITY_ERROR, OnOnlineSaveError);
         loader.addEventListener (IOErrorEvent.IO_ERROR, OnOnlineSaveError);

         loader.addEventListener(Event.COMPLETE, OnOnlineSaveCompleted);
         
         loader.load ( request );
         //navigateToURL ( request )
         
         mOnlineSavingPopup = new EffectMessagePopup ("Saving ... (Please don't close the editor!)", EffectMessagePopup.kBgColor_Special, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ());
         mOnlineSavingPopup.SetAutoFade (false);
         mCurrentSceneEditPanel.PushFloatingMessage (mOnlineSavingPopup);
      }
      
      private var mOnlineSavingPopup:EffectMessagePopup = null;
      
      private function OnOnlineSaveError (event:Event):void
      {
         if (mOnlineSavingPopup != null)
            mOnlineSavingPopup.SetAutoFade (true);
         
         mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Online save error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
      } 
      
      private function OnOnlineSaveCompleted(event:Event):void 
      {
         if (mOnlineSavingPopup != null)
            mOnlineSavingPopup.SetAutoFade (true);
         
         var loader:URLLoader = URLLoader(event.target);
         
         try
         {
            var data:ByteArray = ByteArray (loader.data);
            
            var returnCode:int = data.readByte ();
            var returnMessage:String = null;
            if (data.length > data.position)
            {
               var length:int = data.readInt ();
               returnMessage = data.readUTFBytes (length);
            }
            
            if (returnCode == Define.k_ReturnCode_Successed)
            {
               mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Online save succeeded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
            }
            else
            {
               //Alert.show("Some errors in saving! returnCode = " + returnCode + ", returnMessage = " + returnMessage, "Error");
               var errorMessage:String = "Online save failed,  returnCode = " + returnCode + ",  returnMessage = " + returnMessage;
               mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup (errorMessage, EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
            }
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            //Alert.show("Sorry, online saving error! " + loader.data + " " + error, "Error");
            
            RestoreWorld (mWorldHistoryManager.GetCurrentWorldState ());
            
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Online save error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
         }
      }
      
   //========================================================================================
   // offline io
   //========================================================================================
      
      // load 
      public function OfflineLoad (params:Object):void
      {
         CloseWorld ();
         
         try
         {
            var codeString:String = params.mXmlString;
            
            var newWorldDefine:WorldDefine = null;
            
            if (codeString != null)
            {
               const Text_PlayCode:String = "playcode";
               if (codeString.length > Text_PlayCode.length && codeString.substring (0, Text_PlayCode.length) == Text_PlayCode)
               {
                  var Text_OldCodeStarting:String = "434F494E";
                  var offset:int = codeString.indexOf (Text_OldCodeStarting, Text_PlayCode.length);
                  if (offset > 0) // old playcode
                  {
                     newWorldDefine = DataFormat2.HexString2WorldDefine (codeString.substring (offset));
                  }
                  else // new base64 playcode
                  {
                     offset = Text_PlayCode.length;
                     var Text_CompressFormat:String = "compressformat=base64";
                     offset = codeString.indexOf (Text_CompressFormat, offset);
                     if (offset > 0)
                     {
                        offset += Text_CompressFormat.length;
                        var Text_PlayCode2:String = "playcode=";
                        offset = codeString.indexOf (Text_PlayCode2, offset);
                        if (offset > 0)
                        {
                           offset += Text_PlayCode2.length;
                           var offset2:int = codeString.indexOf ("@}", offset);
                           if (offset2 > 0)
                           {
                              newWorldDefine = DataFormat2.PlayCode2WorldDefine_Base64 (codeString.substring (offset, offset2));
                           }
                        }
                     }
                  }
               }
               else
               {
                  var xml:XML = new XML (codeString);
                  
                  newWorldDefine = DataFormat.Xml2WorldDefine (xml);
               }
            }
            
            if (newWorldDefine == null)
               throw new Error ("newWorldDefine == null !!!");
            
            var newWorld:World = new World ();
            SetWorld (newWorld);
            DataFormat.WorldDefine2EditorWorld (newWorld, newWorldDefine);
            
            //mWorldHistoryManager.ClearHistories ();
            
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Offline loading succeeded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
            
            CreateUndoPoint ("Offline loading");
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            //Alert.show ("Loading error: " + error + "\n " + error.getStackTrace ());
            
            RestoreWorld (mWorldHistoryManager.GetCurrentWorldState ());
            
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Offline loading failed", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
         }
      }
      
      public function OfflineImport (params:Object):void
      {
         ImportFromXmlString (params, true, true);
      }
      
      private function ImportFromXmlString (params:Object, importEntities:Boolean, importFunctions:Boolean):void
      {
         var xmlString:String = params.mXmlString;
         var mergeVariablesWithSameNames:Boolean = params.mMergeVariablesWithSameNames;
         var centerNewEntitiesInScreen:Boolean = params.mCenterNewEntitiesInScreen;         
         
         var xml:XML = new XML (xmlString);
         
         try
         {
            var oldEntitiesCount:int = mWorld.GetEntityContainer ().GetNumAssets ();
            var oldCategoriesCount:int = mWorld.GetCollisionCategoryManager ().GetNumCollisionCategories ();
            
            var worldDefine:WorldDefine = DataFormat.Xml2WorldDefine (xml);
            
            if (oldEntitiesCount + worldDefine.mEntityDefines.length > Define.MaxEntitiesCount)
               return;
            
            if (oldCategoriesCount + worldDefine.mCollisionCategoryDefines.length > Define.MaxCCatsCount)
               return;
            
            DataFormat.WorldDefine2EditorWorld (mWorld, worldDefine, true, mergeVariablesWithSameNames);
            
            if (mWorld.GetCodeLibManager ().IsChanged ())
            {
               mWorld.GetCodeLibManager ().UpdateFunctionMenu ();
               mWorld.GetCodeLibManager ().SetChanged (false);
            }
            
            if (oldEntitiesCount == mWorld.GetEntityContainer ().GetNumAssets ())
               return;
            
            mWorld.GetEntityContainer ().CancelAllAssetSelections ();
            
            var i:int;
            var j:int;
            var entity:Entity;
            var entities:Array;
            var centerX:Number = 0;
            var centerY:Number = 0;
            var numSelecteds:int = 0;
            
            var newEntitiesCount:int = mWorld.GetEntityContainer ().GetNumAssets ();
            
            var entitiesToSelect:Array = new Array ();
            for (i = oldEntitiesCount; i < newEntitiesCount; ++ i)
            {
               entities = (mWorld.GetEntityContainer ().GetAssetByCreationId (i) as Entity).GetSelectableAssets ();
               entitiesToSelect = entitiesToSelect.concat (entities);
               
               for (j = 0; j < entities.length; ++ j)
               {
                  entity = entities [j] as Entity;
                  centerX += entity.GetPositionX ();
                  centerY += entity.GetPositionY ();
                  ++ numSelecteds;
               }
            }
            
            mWorld.GetEntityContainer ().SetSelectedAssets (entitiesToSelect);

            if (centerNewEntitiesInScreen && numSelecteds > 0)
            {
               centerX /= numSelecteds;
               centerY /= numSelecteds;
               
               var point:Point = mCurrentSceneEditPanel.GetPanelCenterWorldPoint ();
               mCurrentSceneEditPanel.MoveSelectedAssets (false, point.x - centerX, point.y - centerY, true);
            }
            
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Import succeeded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
            
            CreateUndoPoint ("Import");
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            //Alert.show("Sorry, import error!", "Error");
            
            RestoreWorld (mWorldHistoryManager.GetCurrentWorldState ());
            
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Import failed", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
         }
      }
      
      public function GetOfflineSaveData ():Object
      {
         try
         {
            // ...
            var width:int = mWorld.GetEntityContainer ().GetViewportWidth ();
            var height:int = mWorld.GetEntityContainer ().GetViewportHeight ();
            //var showPlayBar:Boolean = (mWorld.GetEntityContainer ().GetViewerUiFlags () & Define.PlayerUiFlag_ShowPlayBar) != 0;
            var showPlayBar:Boolean = (mWorld.GetEntityContainer ().GetViewerUiFlags () & (Define.PlayerUiFlag_UseDefaultSkin | Define.PlayerUiFlag_UseOverlaySkin)) == Define.PlayerUiFlag_UseDefaultSkin;
            var heightWithPlayBar:int = (showPlayBar ? height + Define.DefaultPlayerSkinPlayBarHeight : height);
            
            var fileFormatVersionString:String = DataFormat3.GetVersionHexString (Version.VersionNumber);
            
            var values:Object = new Object ();
            
            //========== source code ========== 
         
            values.mXmlString = DataFormat2.WorldDefine2Xml (DataFormat.EditorWorld2WorldDefine (mWorld));
            
            //=========== play code ========== 
         
            // before v1.55, depreciated now
            //var playcode:String = DataFormat.WorldDefine2HexString (DataFormat.EditorWorld2WorldDefine (mWorld)); 
            //values.mHexString = playcode;
            
            // new one, from v1.55
            var playcodeBase64:String = DataFormat.WorldDefine2PlayCode_Base64 (DataFormat.EditorWorld2WorldDefine (mWorld));
            
            values.mHexString = DataFormat3.CreateForumEmbedCode (fileFormatVersionString, width, height, showPlayBar, playcodeBase64);
            
            //======== html embed code ======== 
         
            // before v1.55, depreciated now
            //values.mEmbedCode = "<embed src=\"http://www.phyard.com/uniplayer.swf?app=ci&format=0x" + fileFormatVersionString
            //                  + "\"\n width=\"" + width + "\" height=\"" + heightWithPlayBar + "\"\n"
            //                  + "  FlashVars=\"playcode=" + playcode
            //                  + "\"\n quality=\"high\" allowScriptAccess=\"sameDomain\"\n type=\"application/x-shockwave-flash\"\n pluginspage=\"http://www.macromedia.com/go/getflashplayer\">\n</embed>"
            //                  ;
            
            // new one: add compressformat in FlashVars; change app=ci to app=coin and change format to fileversion in url.
            values.mEmbedCode = "<embed src=\"http://www.phyard.com/uniplayer.swf?app=coin&fileversion=0x" + fileFormatVersionString
                              + "\"\n width=\"" + width + "\" height=\"" + heightWithPlayBar + "\"\n"
                              + "  FlashVars=\"compressformat=" + DataFormat3.CompressFormat_Base64 + "&playcode=" + playcodeBase64
                              + "\"\n quality=\"high\" allowScriptAccess=\"sameDomain\"\n type=\"application/x-shockwave-flash\"\n pluginspage=\"http://www.macromedia.com/go/getflashplayer\">\n</embed>"
                              ;
            
            return values;
         }
         catch (error:Error)
         {
            //Alert.show("Sorry, saving error!", "Error");
            
            if (Capabilities.isDebugger)
               throw error;
         }
         
         return null;
      }
      
      public function OfflineExport ():void
      {
         var newWorld:World = null;
         
         try
         {
            var worldDefine:WorldDefine = DataFormat.EditorWorld2WorldDefine (mWorld);
            newWorld = DataFormat.WorldDefine2EditorWorld (newWorld, worldDefine);
            
            var selectedEntities:Array = mWorld.GetEntityContainer ().GetSelectedAssets ();
            
            if (selectedEntities.length == 0)
               return;
            
            var numEntities:int = selectedEntities.length;
            var i:int;
            var index:int;
            var entity:Entity;
            for (i = 0; i < numEntities; ++ i)
            {
               //trace ("selectedEntities[i] = " + selectedEntities[i]);
               //trace ("selectedEntities[i].parent = " + selectedEntities[i].parent);
               
               index = mWorld.GetEntityContainer ().GetAssetCreationId (selectedEntities[i]);
               entity = newWorld.GetEntityContainer ().GetAssetByCreationId (index) as Entity;
               
               entity = entity.GetMainAsset () as Entity;
               newWorld.GetEntityContainer ().AddAssetSelection (entity);
               newWorld.GetEntityContainer ().AddAssetSelections (entity.GetSelectableAssets ());
            }
            
            i = 0;
            //numEntities = newWorld.GetEntityContainer ().GetNumAssets (); // this is bug
            while (i < newWorld.GetEntityContainer ().GetNumAssets ()) // numEntities)
            {
               entity = newWorld.GetEntityContainer ().GetAssetByCreationId (i) as Entity;
               if ( entity.IsSelected () ) // generally should use world.IsEntitySelected instead, this one is fast but only for internal uses
               {
                  ++ i;
               }
               else
               {
                  newWorld.GetEntityContainer ().DestroyAsset (entity);
               }
            }
            
            //var cm:CollisionCManager = newWorld.GetCollisionManager ();
            //var ccId:int;
            //numEntities = newWorld.GetEntityContainer ().GetNumAssets ();
            //
            //for (i = 0; i < numEntities; ++ i)
            //{
            //   entity = newWorld.GetEntityContainer ().GetAssetByCreationId (i) as Entity;
            //   if (entity is EntityVectorShape)
            //   {
            //      ccId = (entity as EntityVectorShape).GetCollisionCategoryIndex ();
            //      if (ccId >= 0)
            //         cm.SelectEntity (cm.GetCollisionCategoryByIndex (ccId));
            //   }
            //}
            //
            //ccId = 0;
            // //var numCats:int = cm.GetNumCollisionCategories ();// this is bug
            //while (ccId < cm.GetNumCollisionCategories ()) //numCats)
            //{
            //   entity = cm.GetCollisionCategoryByIndex (ccId);
            //   if ( entity.IsSelected () ) // generally should use world.IsEntitySelected instead, this one is fast but only for internal uses
            //   {
            //      ++ ccId;
            //   }
            //   else
            //   {
            //      cm.DestroyEntity (entity);
            //   }
            //}
            
            var cm:CollisionCategoryManager = newWorld.GetCollisionCategoryManager ();
            cm.CancelAllAssetSelections ();
            var ccId:int;
            numEntities = newWorld.GetEntityContainer ().GetNumAssets ();
            
            for (i = 0; i < numEntities; ++ i)
            {
               entity = newWorld.GetEntityContainer ().GetAssetByCreationId (i) as Entity;
               if (entity is EntityShape)
               {
                  ccId = (entity as EntityShape).GetCollisionCategoryIndex ();
                  if (ccId >= 0)
                     cm.AddAssetSelection (cm.GetCollisionCategoryByIndex (ccId));
               }
            }
            
            var ccat:CollisionCategory;
            ccId = 0;
            //var numCats:int = cm.GetNumCollisionCategories ();// this is bug
            while (ccId < cm.GetNumCollisionCategories ()) //numCats)
            {
               ccat = cm.GetCollisionCategoryByIndex (ccId);
               if ( ccat.IsSelected () ) // generally should use world.IsEntitySelected instead, this one is fast but only for internal uses
               {
                  ++ ccId;
               }
               else
               {
                  cm.DestroyAsset (ccat);
               }
            }
            
            System.setClipboard(DataFormat2.WorldDefine2Xml (DataFormat.EditorWorld2WorldDefine (newWorld)));
            
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Export succeeded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
         }
         catch (error:Error)
         {
            //Alert.show("Sorry, export  error!", "Error");
            
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Export failed", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
            
            if (Capabilities.isDebugger)
               throw error;
         }
         //finally // comment off for bug of secureSWF 
         //{
            if (newWorld != null)
               newWorld.Destroy ();
         //}
      }
      
   //========================================================================================
   // undo / redo
   //========================================================================================
      
      private var mWorldHistoryManager:WorldHistoryManager = new WorldHistoryManager ();
      
      public function CreateUndoPoint (description:String, editActions:Array = null):void
      {
         if (mWorld == null)
            return;
         
         var worldState:WorldState = new WorldState (description, editActions);
         
         var object:Object = new Object ();
         worldState.mUserData = object;
         
         object.mWorldDefine = DataFormat.EditorWorld2WorldDefine (mWorld);
         
         var entityArray:Array = mWorld.GetEntityContainer ().GetSelectedAssets ();
         
         object.mSelectedEntityCreationIds = new Array (entityArray.length);
         object.mMainSelectedEntityId = -1;
         object.mSelectedVertexControllerId = -1;
         
         for (var i:int = 0; i < entityArray.length; ++ i)
         {
            var entity:Entity = entityArray [i] as Entity;
            var entityId:int = mWorld.GetEntityContainer ().GetAssetCreationId (entity);
            object.mSelectedEntityCreationIds [i] = entityId;
            if (entity.AreControlPointsVisible ())
            {
               object.mMainSelectedEntityId = entityId;
               
               //var vertexControllerArray:Array = mWorld.GetEntityContainer ().GetSelectedVertexControllers ();
               //if (vertexControllerArray.length > 0)
               //   object.mSelectedVertexControllerId = entity.GetVertexControllerIndex (vertexControllerArray [0]);
            }
         }
         
         mWorldHistoryManager.AddHistory (worldState);
         
         mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Undo point created (" + description + ")", EffectMessagePopup.kBgColor_General, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
      }
      
      private function RestoreWorld (worldState:WorldState):void
      {
         if (worldState == null)
         {
            //OnCloseClearAllAndResetSceneAlert (null);
            return;
         }
         
         CloseWorld ();
         
         try
         {  
            var currentSceneX:Number = mCurrentSceneEditPanel.GetCurrentManagerX ();
            var currentSceneY:Number = mCurrentSceneEditPanel.GetCurrentManagerY ();
            var currentSceneScale:Number = mCurrentSceneEditPanel.GetCurrentManagerScale ();
            
            mCurrentSceneEditPanel.CancelAllAssetSelections ();
            
            var object:Object = worldState.mUserData;
            
            var newWorld:World = new World ();
            SetWorld (newWorld);
            DataFormat.WorldDefine2EditorWorld (newWorld, object.mWorldDefine, false);
            
            mCurrentSceneEditPanel.MoveManagerTo (currentSceneX, currentSceneY);
            mCurrentSceneEditPanel.ScaleManagerTo (currentSceneScale);
            
            mWorld.GetEntityContainer ().SetZoomScale (mCurrentSceneEditPanel.GetCurrentManagerScale ());
            
            var numEntities:int = mWorld.GetEntityContainer ().GetNumAssets ();
            var entityId:int;
            var entity:Entity;
            
            for (var i:int = 0; i < object.mSelectedEntityCreationIds.length; ++ i)
            {
               entityId = object.mSelectedEntityCreationIds [i];
               if (entityId >= 0 && entityId < numEntities)
               {
                  entity = mWorld.GetEntityContainer ().GetAssetByCreationId (entityId) as Entity;
                  mWorld.GetEntityContainer ().AddAssetSelection (entity);
                  
                  if (entityId == object.mMainSelectedEntityId)
                  {
                     entity.SetControlPointsVisible (true);
                     
                     //if (object.mSelectedVertexControllerId >= 0)
                     //{
                     //   var vertexController:VertexController = entity.GetVertexControllerByIndex (object.mSelectedVertexControllerId);
                     //   if (vertexController != null)
                     //      mWorld.GetEntityContainer ().SetSelectedVertexController (vertexController);
                     //}
                  }
               }
            }
            
            mCurrentSceneEditPanel.OnAssetSelectionsChanged ();
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            RestoreWorld (mWorldHistoryManager.GetCurrentWorldState ());
            
            //Alert.show("Sorry, online loading error!", "Error");
            
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Online load error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
         }
      }
      
      public function Undo ():void
      {
         var worldState:WorldState = mWorldHistoryManager.UndoHistory ();
         
         if (worldState == null)
         {
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("No undo points available", EffectMessagePopup.kBgColor_General, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
            return;
         }
         
         RestoreWorld (worldState);
         
         worldState = worldState.GetNextWorldState ();
         if (worldState != null) // should not
         {
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Undo (" + worldState.GetDescription () + ")", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
         }
      }
      
      public function Redo ():void
      {
         var worldState:WorldState = mWorldHistoryManager.RedoHistory ();
         
         if (worldState == null)
         {
            mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("No redo points available", EffectMessagePopup.kBgColor_General, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
            return;
         }
         
         RestoreWorld (worldState);
         
         mCurrentSceneEditPanel.PushFloatingMessage (new EffectMessagePopup ("Redo (" + worldState.GetDescription () + ")", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mCurrentSceneEditPanel.GetPanelWidth ()));
      }
      
   //========================================================================================
   // 
   //========================================================================================
      
      private function GetWorldBinaryData ():ByteArray
      {
         if (mWorld == null)
            return null;
         
         var byteArray:ByteArray = DataFormat.WorldDefine2ByteArray (DataFormat.EditorWorld2WorldDefine (mWorld));
         byteArray.position = 0;
         
         return byteArray;
      }
      
      import player.WorldPlugin;
      
      private function Dummy ():void
      {
         new WorldPlugin (); // to make mxmlc include WorldPlugin, so the all player.* package, ...
      }

//========================================================================================
// scene
//========================================================================================
      
      //private var mCurrentSceneEditPanel:SceneEditPanel = null; // to rename to mCurrentSceneEditPanel
      
      public function GetCurrentSceneEditPanel ():SceneEditPanel
      {
         return mCurrentSceneEditPanel;
      }
      
      private function CreateScenePanels ():void
      {
         if (mWorld != null)
         {
            var box:VBox = new VBox ();
            box.percentWidth = 100;
            box.percentHeight = 100;
            ViewStack_Scenes.addChild (box);
            
            //mCurrentSceneEditPanel = new SceneEditPanel ();
            //mCurrentSceneEditPanel.percentWidth = 100;
            //mCurrentSceneEditPanel.percentHeight = 100;
            //box.addChild (mCurrentSceneEditPanel);
            
            mCurrentSceneEditPanel.SetScene (mWorld.GetEntityContainer ());
            mCurrentSceneEditPanel.SetDialogCallbacks ({
                                          UpdateInterface: UpdateInterface,
                                          SetInfoOfSelectedEntity: SetInfoOfSelectedEntity, 
                                          SetCurrentSceneScale: SetCurrentSceneScale, 
                                          SetMousePosition: SetMousePosition
                                       });
         }
      }
      
      private function CloseScenePanels ():void
      {
         if (mCurrentSceneEditPanel != null)
         {
            //if (mCurrentSceneEditPanel.parent != null && mCurrentSceneEditPanel.parent.parent == ViewStack_Scenes)
            //{
            //   ViewStack_Scenes.removeChild (mCurrentSceneEditPanel.parent);
            //}
            
            mCurrentSceneEditPanel.SetScene (null);
            //mCurrentSceneEditPanel = null;
         }
      }
      
   //========================================================================================
   // play / stop
   //========================================================================================
      
      private function OnClickPlayCurrentSceneButton ():void
      {
         if (ViewStack_Scenes.selectedChild != null)
         {
            if (mCurrentSceneEditPanel.parent == ViewStack_Scenes.selectedChild)
               ViewStack_Scenes.selectedChild.removeChild (mCurrentSceneEditPanel);
            
            var scenePlayPanel:ScenePlayPanel = new ScenePlayPanel ();
            scenePlayPanel.percentWidth = 100;
            scenePlayPanel.percentHeight = 100;
            ViewStack_Scenes.selectedChild.addChild (scenePlayPanel);
            
            scenePlayPanel.SetWorldViewerParams (GetWorldBinaryData (), mCurrentSceneEditPanel.IsMaskFieldInPlaying ());            
            
            Button_Play.enabled = false;
            Button_Stop.enabled = true;
         }
      }
      
      private function OnClickStopCurrentSceneButton ():void
      {
         if (ViewStack_Scenes.selectedChild != null)
         {
            while (ViewStack_Scenes.selectedChild.numChildren > 0)
               ViewStack_Scenes.selectedChild.removeChildAt (0);
            
            if (mCurrentSceneEditPanel != null)
            {
               ViewStack_Scenes.selectedChild.addChild (mCurrentSceneEditPanel);
               
               Button_Play.enabled = true;
            }
            
            Button_Stop.enabled = false;
         }
      }

   //========================================================================================
   // event handlers, creating
   //========================================================================================
      
      private var mCurrentSelectedCreateButton:Button = null;
      
      private function OnClickCreateEntityButton (event:MouseEvent, entityType:String, params:Object = null):void
      {
         if (mCurrentSelectedCreateButton == event.currentTarget)
         {
            mCurrentSceneEditPanel.OnStartCreatingEntity (null, null, null); // to cancel current
         }
         else
         {
            mCurrentSceneEditPanel.OnStartCreatingEntity (entityType, params, OnEndCreating);
            
            mCurrentSelectedCreateButton = event.currentTarget as Button;
            mCurrentSelectedCreateButton.selected = true;
         }
      }
      
      private function OnEndCreating ():void
      {
         //if (mCurrentSelectedCreateButton != null)
         {
            mCurrentSelectedCreateButton.selected = false;
            mCurrentSelectedCreateButton = null;
         }
      }

   //========================================================================================
   // callbacks for panel
   //========================================================================================

      private function SetInfoOfSelectedEntity (info:String):void
      {
      }
      
      private function SetCurrentSceneScale (sceneScale:Number):void
      {
      }
      
      private function SetMousePosition (physicsX:Number, physicsY:Number, pixelX:Number, pixelY:Number):void
      {
      }
      
      private var mBatchEntitiesSettingsContextMenuBuilt:Boolean = false;
            
         private var mBatchEntityCommonContextMenuItem:ContextMenuItem;
            
            private var mBatchShapePhysicsContextMenuItem:ContextMenuItem;
            private var mBatchShapeAppearanceContextMenuItem:ContextMenuItem;
            private var mBatchShapeCircleContextMenuItem:ContextMenuItem;
            private var mBatchShapeRectangleContextMenuItem:ContextMenuItem;
            private var mBatchShapePolylineContextMenuItem:ContextMenuItem;
            
            private var mBatchJointCollideConnectedsContextMenuItem:ContextMenuItem;
      
      private function UpdateInterface (numSelectedEntities:int, hasUndoPoints:Boolean, hasRedoPoints:Boolean):void
      {
         if (! mBatchEntitiesSettingsContextMenuBuilt)
         {
            mBatchEntitiesSettingsContextMenuBuilt = true;
            
            mBatchEntityCommonContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_EntitySettings, "Batch Modify Entity Common Basic Properties ...", OnSelectShowBatchModifyEntityCommonPropertiesDialog);
            
            mBatchShapePhysicsContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_EntitySettings, "Batch Modify Shape Physics Properties ...", OnSelectShowBatchModifyShapePhysicsPropertiesDialog, true);
            mBatchShapeAppearanceContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_EntitySettings, "Batch Modify Shape Appearance Properties ...", OnSelectShowBatchModifyShapeAppearancePropertiesDialog);
            mBatchShapeCircleContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_EntitySettings, "Batch Modify Circle Special Properties ...", OnSelectShowBatchModifyShapeCirclePropertiesDialog);
            mBatchShapeRectangleContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_EntitySettings, "Batch Modify Rectangle Special Properties ...", OnSelectShowBatchModifyShapeRectanglePropertiesDialog);
            mBatchShapePolylineContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_EntitySettings, "Batch Modify Polyline Special Properties ...", OnSelectShowBatchModifyShapePolylinePropertiesDialog);
            
            mBatchJointCollideConnectedsContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_EntitySettings, "Batch Modify Joint \"Collide Connecteds\" Property ...", OnSelectShowBatchModifyJointCollideConnectedsDialog, true);
         }
      }

   //========================================================================================
   // event handlers, editing
   //========================================================================================
      
      // 
      private var mClearOrResetSceneMenu:Menu = null;
      
      private function OnClickClearOrResetSceneButton ():void
      {
         if (mClearOrResetSceneMenu == null)
         {
            mClearOrResetSceneMenu = Menu.createMenu(Button_ClearOrResetScene, ClearOrResetSceneMenuData, false);
            mClearOrResetSceneMenu.labelField="@label";
            mClearOrResetSceneMenu.addEventListener(MenuEvent.ITEM_CLICK, OnSelectClearOrResetSceneMenu);
         }
         
         var point:Point = Button_ClearOrResetScene.localToGlobal (new Point (0, Button_ClearOrResetScene.height));
         
         mClearOrResetSceneMenu.show(point.x, point.y);
      }
      
      private function OnSelectClearOrResetSceneMenu (event:MenuEvent):void
      {
         if (event.item.@data == "clear_all")
         {
            mCurrentSceneEditPanel.ClearAllEntities (false);
         }
         else if (event.item.@data == "clear_all_and_reset")
         {
            mCurrentSceneEditPanel.ClearAllEntities (true);
         }
      }
      
      private var mConfigSceneMenu:Menu = null;
      
      private function OnClickConfigSceneButton ():void
      {
         if (mConfigSceneMenu == null)
         {
            mConfigSceneMenu = Menu.createMenu(Button_ConfigScene, ConfigSceneMenuData, false);
            mConfigSceneMenu.labelField="@label";
            mConfigSceneMenu.addEventListener(MenuEvent.ITEM_CLICK, OnSelectConfigSceneMemu);
         }
         
         var point:Point = Button_ConfigScene.localToGlobal (new Point (0, Button_ConfigScene.height));
         
         mConfigSceneMenu.show(point.x, point.y);
      }
      
      private function OnSelectConfigSceneMemu (event:MenuEvent):void
      {
         if (event.item.@data == "general")
         {
            mCurrentSceneEditPanel.ShowLevelRulesEditDialog ();
         }
         else if (event.item.@data == "coordinate")
         {
            mCurrentSceneEditPanel.ShowCoordinateSystemEditDialog ();
         }
         else if (event.item.@data == "physics")
         {
            mCurrentSceneEditPanel.ShowWorldPhysicsEditDialog ();
         }
         else if (event.item.@data == "appearance")
         {
            mCurrentSceneEditPanel.ShowWorldAppearanceEditDialog ();
         }
         else if (event.item.@data == "viewport")
         {
            mCurrentSceneEditPanel.ShowViewportEditDialog ();
         }
      }
      
      private function OnClickMoveSceneModeButton ():void
      {
         mCurrentSceneEditPanel.SetMoveSceneMode (Button_MoveSceneMode.selected);
      }
      
      private function OnClickCookieSelectModeButton ():void
      {
         mCurrentSceneEditPanel.SetCookieSelectMode (Button_MouseCookieMode.selected);
      }
      
      private function OnClickShowAllEntityLinksButton ():void
      {
         mCurrentSceneEditPanel.SetShowAllEntityLinks (Button_ShowAllEntityLinks.selected);
      }
      
      // find entity
      
      private function OnEnterEntityIDsToSelect ():void
      {
         var text:String = Text_FindEntityId.text;
         
         var idStrs:Array = text.split (/\s+/);
         if (idStrs == null || idStrs.length == 0)
            return;
         
         var entityIds:Array = new Array ();
         for each (var idStr:String in idStrs)
         {
            var entityId:Number = parseInt (idStr);
            if (! isNaN (entityId))
            {
               entityIds.push (int(entityId));
            }
         }
         
         if (entityIds.length == 0)
            return;
               
         mCurrentSceneEditPanel.SelectEntities (entityIds);
      }
      
      // zoom in / out
      
      private function OnClickZoomOutButton ():void
      {
         mCurrentSceneEditPanel.ZoomOut ();
      }
      
      private function OnClickZoomInButton ():void
      {
         mCurrentSceneEditPanel.ZoomIn ();
      }
      
      // entity settings
      
      private function OnClickEntitySettingsButton ():void
      {
         mCurrentSceneEditPanel.ShowEntitySettingsDialog ();
      }
      
      private function OnSelectShowBatchModifyEntityCommonPropertiesDialog (event:ContextMenuEvent):void
      {
         mCurrentSceneEditPanel.ShowBatchModifyEntityCommonPropertiesDialog ();
      }
      
      private function OnSelectShowBatchModifyShapePhysicsPropertiesDialog (event:ContextMenuEvent):void
      {
         mCurrentSceneEditPanel.ShowBatchModifyShapePhysicsPropertiesDialog ();
      }
      
      private function OnSelectShowBatchModifyShapeAppearancePropertiesDialog (event:ContextMenuEvent):void
      {
         mCurrentSceneEditPanel.ShowBatchModifyShapeAppearancePropertiesDialog ();
      }
      
      private function OnSelectShowBatchModifyShapeCirclePropertiesDialog (event:ContextMenuEvent):void
      {
         mCurrentSceneEditPanel.ShowBatchModifyShapeCirclePropertiesDialog ();
      }
      
      private function OnSelectShowBatchModifyShapeRectanglePropertiesDialog (event:ContextMenuEvent):void
      {
         mCurrentSceneEditPanel.ShowBatchModifyShapeRectanglePropertiesDialog ();
      }
      
      private function OnSelectShowBatchModifyShapePolylinePropertiesDialog (event:ContextMenuEvent):void
      {
         mCurrentSceneEditPanel.ShowBatchModifyShapePolylinePropertiesDialog ();
      }
      
      private function OnSelectShowBatchModifyJointCollideConnectedsDialog (event:ContextMenuEvent):void
      {
         mCurrentSceneEditPanel.ShowBatchModifyJointCollideConnectedsDialog ();
      }
      
      // clone / delete
      
      private function OnClickCloneEntityButton ():void
      {
         mCurrentSceneEditPanel.CloneSelectedEntities (); 
      }
      
      private function OnClickDeleteEntityButton ():void
      {
         mCurrentSceneEditPanel.DeleteSelectedEntities (); 
      }
      
      // move to top/bottom 
      
      private function OnClickMoveEntityToTopButton ():void
      {
         mCurrentSceneEditPanel.MoveSelectedEntitiesToTop (); 
      }
      
      private function OnClickMoveEntityToBottomButton ():void
      {
         mCurrentSceneEditPanel.MoveSelectedEntitiesToBottom (); 
      }
      
      // brothers
      
      private function OnClickMakeEntityBrothersButton ():void
      {
         mCurrentSceneEditPanel.MakeBrothersForSelectedEntities (); 
      }
      
      private function OnClickBreakApartEntityBrothersButton ():void
      {
         mCurrentSceneEditPanel.BreakApartBrothersForSelectedEntities (); 
      }

   //========================================================================================
   // event handlers, playing
   //========================================================================================
      
      private function PlaySlower ():void
      {
         
      }
      
      private function PlayFaster ():void
      {
         
      }
      
      private function PlayRestart ():void
      {
         
      }
      
      private function PlayToggleStartPause ():void
      {
         
      }
      
      private function PlayOneStep ():void
      {
         
      }
      
      private function ToggleMaskPlayerField ():void
      {
         
      }

   ]]></mx:Script>
</mx:Application>

