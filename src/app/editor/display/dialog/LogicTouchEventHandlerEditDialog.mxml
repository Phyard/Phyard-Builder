<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component.
     You cannot run it independently. -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="editor.display.dialog.*"
    title="Event Handler Setting" width="700">

   <mx:TabNavigator width="100%" height="100%">
      <mx:VBox label="Code Snippet" borderStyle="solid" height="100%" width="100%"
               paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"
               horizontalScrollPolicy="off" verticalScrollPolicy="off"
               horizontalGap="0" verticalGap="0" borderThickness="0" creationComplete="OnCodeSnippetSettingPanelCreationComplete()">
         <CodeSnippetEditPanel id="theCodeSnippetEditPanel" width="100%" height="100%"/>
      </mx:VBox>
      <mx:VBox label="Basic" borderStyle="solid" height="100%" width="100%"
               paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"
               horizontalScrollPolicy="off" verticalScrollPolicy="off"
               horizontalGap="0" verticalGap="0" borderThickness="0">
         <EntityBasicSettingPanel id="BasicSettingPanel" creationComplete="OnEntityBasicSettingPanelCreationComplete()"/>
         <mx:HRule  strokeWidth="1" strokeColor="0xC0C0C0" width="100%"/>
         <mx:Spacer height="100%" />
         <mx:HBox width="100%" id="HanlderBasicSettingPanel" creationComplete="OnHanlderBasicSettingPanelCreationComplete()">
            <mx:Spacer width="100%"/>
            <mx:VBox>
               <mx:RadioButton groupName="EventType" id="RadioButton_TouchBegin" value="Down" label="Touch Begin" />
               <mx:RadioButton groupName="EventType" id="RadioButton_TouchEnd" value="Up" label="Touch End" />
               <mx:RadioButton groupName="EventType" id="RadioButton_TouchTap" value="Click" label="Touch Click (Tap)" />
            </mx:VBox>
            <mx:Spacer width="20"/>
            <mx:VBox>
               <mx:RadioButton groupName="EventType" id="RadioButton_TouchMove" value="Move" label="Touch Move" />
               <mx:RadioButton groupName="EventType" id="RadioButton_TouchEnter" value="Enter" label="Touch Enter" />
               <mx:RadioButton groupName="EventType" id="RadioButton_TouchOut" value="Out" label="Touch Out" />
            </mx:VBox>
            <mx:Spacer width="100%"/>
         </mx:HBox>
         <mx:Spacer height="100%" />
      </mx:VBox>
   </mx:TabNavigator>

   <mx:HBox width="100%">
      <mx:Spacer width="100%"/>
      <mx:Button label="OK" click="OnClickOkButton ();"/>
      <mx:Spacer width="30"/>
      <mx:Button label="Cancel" click="OnClickCancelButton ();"/>
      <!--
      <mx:Spacer width="30"/>
      <mx:Button label="Default" click="OnClickDefaultButton ();"/>
      -->
      <mx:Spacer width="100%"/>
   </mx:HBox>


   <mx:Script>
      <![CDATA[

         import mx.events.MenuEvent;
         import mx.managers.PopUpManager;
         import mx.controls.Menu;

         import common.Define;
         import common.trigger.CoreEventIds;

         private var OnConfirm:Function = null;
         private var OnClose:Function = null;

         private var mParams:Object;

         private var mIsWorldEvent:Boolean = false;

         public function SetValues (initialValues:Object):void
         {
            mParams = initialValues;

            mIsWorldEvent = mParams.mEventId >= CoreEventIds.ID_OnWorldTouchTap && mParams.mEventId <= CoreEventIds.MaxWorldTouchEventId;
         }

         public function OnCodeSnippetSettingPanelCreationComplete ():void
         {
            this.title = "Event Handler Setting - " + mParams.mCodeSnippet.GetOwnerFunctionDefinition ().GetName ();

            theCodeSnippetEditPanel.SetCodeSnippetAndCodeLibManager (mParams.mCodeSnippet, mParams.mCodeLibManager);
            theCodeSnippetEditPanel.OnCodeLibManagerSwitched ();
         }

         public function GetValues (returnValues:Object):void
         {
            returnValues.mReturnFunctionCallings = theCodeSnippetEditPanel.GetCommandListDefinition ();
         }

         private function OnInitPanel ():void
         {
         }

         private function OnEntityBasicSettingPanelCreationComplete ():void
         {
            mParams.mRotationNonSense = true;
            mParams.mScaleNonSense = true;
            mParams.mFlippedNonSense = true;
            mParams.mVisibleNonsense = true;
            BasicSettingPanel.SetValues (mParams);
         }

         private function OnHanlderBasicSettingPanelCreationComplete ():void
         {
            switch (mParams.mEventId)
            {
               case CoreEventIds.ID_OnWorldTouchBegin:
               case CoreEventIds.ID_OnEntityTouchBegin:
                  RadioButton_TouchBegin.selected = true;
                  break;
               case CoreEventIds.ID_OnWorldTouchEnd:
               case CoreEventIds.ID_OnEntityTouchEnd:
                  RadioButton_TouchEnd.selected = true;
                  break;
               case CoreEventIds.ID_OnWorldTouchMove:
               case CoreEventIds.ID_OnEntityTouchMove:
                  RadioButton_TouchMove.selected = true;
                  break;
               case CoreEventIds.ID_OnEntityTouchEnter:
                  RadioButton_TouchEnter.selected = true;
                  break;
               case CoreEventIds.ID_OnEntityTouchOut:
                  RadioButton_TouchOut.selected = true;
                  break;
               case CoreEventIds.ID_OnWorldTouchTap:
               case CoreEventIds.ID_OnEntityTouchTap:
               default:
               {
                  RadioButton_TouchTap.selected = true;
                  break;
               }
            }

            if (mIsWorldEvent)
            {
               RadioButton_TouchEnter.parent.removeChild (RadioButton_TouchEnter);
               RadioButton_TouchOut.parent.removeChild (RadioButton_TouchOut);
            }
         }

         public function SetConfirmFunc (onConfirm:Function):void
         {
            OnConfirm = onConfirm;
         }

         public function SetCloseFunc (onClose:Function):void
         {
            OnClose = onClose;
         }

         private function OnClickOkButton():void
         {
            GetValues (mParams);

            if (BasicSettingPanel != null)
            {
               BasicSettingPanel.GetValues (mParams);
            }

            if (HanlderBasicSettingPanel != null)
            {
               if (mIsWorldEvent)
               {
                  if (RadioButton_TouchBegin.selected)
                     mParams.mEventId = CoreEventIds.ID_OnWorldTouchBegin;
                  else if (RadioButton_TouchEnd.selected)
                     mParams.mEventId = CoreEventIds.ID_OnWorldTouchEnd;
                  else if (RadioButton_TouchMove.selected)
                     mParams.mEventId = CoreEventIds.ID_OnWorldTouchMove;
                  else //if (RadioButton_TouchTap.selected)
                     mParams.mEventId = CoreEventIds.ID_OnWorldTouchTap;
               }
               else
               {
                  if (RadioButton_TouchBegin.selected)
                     mParams.mEventId = CoreEventIds.ID_OnEntityTouchBegin;
                  else if (RadioButton_TouchEnd.selected)
                     mParams.mEventId = CoreEventIds.ID_OnEntityTouchEnd;
                  else if (RadioButton_TouchMove.selected)
                     mParams.mEventId = CoreEventIds.ID_OnEntityTouchMove;
                  else if (RadioButton_TouchEnter.selected)
                     mParams.mEventId = CoreEventIds.ID_OnEntityTouchEnter;
                  else if (RadioButton_TouchOut.selected)
                     mParams.mEventId = CoreEventIds. ID_OnEntityTouchOut;
                  else //if (RadioButton_TouchTap.selected)
                  {
                     mParams.mEventId = CoreEventIds.ID_OnEntityTouchTap;
                  }
               }
            }

            //PopUpManager.removePopUp(this);

            if (OnClose != null)
               OnClose ();

            if (OnConfirm != null)
               OnConfirm (mParams);
         }

         private function OnClickCancelButton():void
         {
             //PopUpManager.removePopUp(this);

             if (OnClose != null)
               OnClose (true);
         }

     ]]>
   </mx:Script>



</mx:TitleWindow>
