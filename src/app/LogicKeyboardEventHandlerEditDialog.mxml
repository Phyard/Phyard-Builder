<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component. 
     You cannot run it independently. -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" xmlns:ed="editor.controls.*"
    title="Event Handler Setting" width="600">

   <mx:TabNavigator width="100%" height="100%">
      <mx:VBox label="Script" borderStyle="solid" height="100%" width="100%"
               paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"
               horizontalScrollPolicy="off" verticalScrollPolicy="off"
               horizontalGap="0" verticalGap="0" borderThickness="0" creationComplete="OnCodeSnippetSettingPanelCreationComplete()">
         <CodeSnippetEditPanel id="theCodeSnippetEditPanel" width="100%" height="100%"/>
      </mx:VBox>
      <mx:VBox label="Basic" borderStyle="solid" height="100%" width="100%"
               paddingTop="5" paddingLeft="1" paddingRight="1" paddingBottom="5"
               horizontalScrollPolicy="off" verticalScrollPolicy="off"
               horizontalGap="0" verticalGap="0" borderThickness="0">
         <EntityBasicSettingPanel id="BasicSettingPanel" creationComplete="OnEntityBasicSettingPanelCreationComplete()"/>
         <mx:Spacer height="100%" />
         <mx:HRule strokeWidth="1" strokeColor="#C0C0C0" width="100%"/>
         <mx:Spacer height="100%" />
         <mx:HBox width="100%" id="HanlderBasicSettingPanel" creationComplete="OnHanlderBasicSettingPanelCreationComplete()">
            <mx:Spacer width="100%"/>
            <mx:RadioButton groupName="EventType" id="RadioButton_Down" value="Down" label="Key Down" />
            <mx:Spacer width="100%"/>
            <mx:RadioButton groupName="EventType" id="RadioButton_Up" value="Up" label="Key Up" />
            <mx:Spacer width="100%"/>
            <mx:RadioButton groupName="EventType" id="RadioButton_Hold" value="Hold" label="Key Hold" />
            <mx:Spacer width="100%"/>
         </mx:HBox>
         <mx:HBox width="100%" height="167">
            <ed:KeyboardForSelecting id="KeyboardPanel"/>
         </mx:HBox>
         <mx:Spacer height="100%" />
      </mx:VBox>
   </mx:TabNavigator>

   <mx:HBox width="100%">
      <mx:Spacer width="100%"/>
      <mx:Button label="OK" click="OnClickOkButton ();"/>
      <mx:Spacer width="30"/>
      <mx:Button label="Cancel" click="OnClickCancelButton ();"/>
      <!--
      <mx:Spacer width="30"/>
      <mx:Button label="Default" click="OnClickDefaultButton ();"/>
      -->
      <mx:Spacer width="100%"/>
   </mx:HBox>


   <mx:Script>
      <![CDATA[       
         
         import mx.events.MenuEvent;
         import mx.managers.PopUpManager;
         import mx.controls.Menu;
         
         import common.Define;
         import common.trigger.CoreEventIds;
         
         private var OnConfirm:Function = null;
         private var OnClose:Function = null;
         
         private var mParams:Object;
         
         public function SetValues (initialValues:Object):void
         {
            mParams = initialValues;
         }
         
         public function OnCodeSnippetSettingPanelCreationComplete ():void
         {
         // ...
            this.title = "Event Handler Setting - " + mParams.mCodeSnippet.GetOwnerFunctionDefinition ().GetName ();
            
            theCodeSnippetEditPanel.SetCodeSnippet (mParams.mCodeSnippet);
         }
         
         public function GetValues (returnValues:Object):void
         {
            returnValues.mReturnFunctionCallings = theCodeSnippetEditPanel.GetCommandListDefinition ();
         }
         
         private function OnInitPanel ():void
         {
         }
         
         private function OnEntityBasicSettingPanelCreationComplete ():void
         {
            mParams.mRotationNonSense = true;
            mParams.mVisibleNonsense = true;
            BasicSettingPanel.SetValues (mParams);
         }
         
         private function OnHanlderBasicSettingPanelCreationComplete ():void
         {
            KeyboardPanel.selectedKeyCodes = mParams.mKeyCodes;
            
            switch (mParams.mEventId)
            {
               case CoreEventIds.ID_OnWorldKeyUp:
                  RadioButton_Up.selected = true;
                  break;
               case CoreEventIds.ID_OnWorldKeyHold:
                  RadioButton_Hold.selected = true;
                  break;
               case CoreEventIds.ID_OnWorldKeyDown:
               default:
                  RadioButton_Down.selected = true;
                  break;
            }
         }
         
         public function SetConfirmFunc (onConfirm:Function):void
         {
            OnConfirm = onConfirm;
         }
         
         public function SetCloseFunc (onClose:Function):void
         {
            OnClose = onClose;
         }
         
         private function OnClickOkButton():void 
         {
            GetValues (mParams);
            
            if (BasicSettingPanel != null)
            {
               BasicSettingPanel.GetValues (mParams);
            }
            
            if (HanlderBasicSettingPanel != null)
            {
               if (RadioButton_Up.selected)
                  mParams.mEventId = CoreEventIds.ID_OnWorldKeyUp;
               else if (RadioButton_Hold.selected)
                  mParams.mEventId = CoreEventIds.ID_OnWorldKeyHold;
               else //if (RadioButton_Down.selected)
                  mParams.mEventId = CoreEventIds.ID_OnWorldKeyDown;
            }
            
            if (KeyboardPanel != null)
            {
               mParams.mKeyCodes = KeyboardPanel.selectedKeyCodes;
            }
            
            PopUpManager.removePopUp(this);
            
            if (OnClose != null)
               OnClose ();
            
            if (OnConfirm != null)
               OnConfirm (mParams);
         }
         
         private function OnClickCancelButton():void 
         {
             PopUpManager.removePopUp(this);
             
             if (OnClose != null)
               OnClose ();
         }
         
     ]]>
   </mx:Script>



</mx:TitleWindow>