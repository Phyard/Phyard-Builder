<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component. 
     You cannot run it independently. -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
      borderStyle="solid" borderThickness="0"
      width="100%" height="100%"
      creationComplete="OnInitPanel()"
      >

   <mx:VBox width="100%">
      <mx:HBox id="Box_Toolbar" width="100%">
         <mx:HBox borderStyle="solid" borderThickness="1" height="100%" horizontalGap="1" verticalGap="1" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
            <mx:Button id="Button_MenuBarSwitch" click="OnSwitchMenuBar ()" toggle="true" focusEnabled="false" fontSize="8" left="5" top="5" width="20" height="20" cornerRadius="0" upIcon="@Embed('../../res/action/command_menubar_longer.png')" downIcon="@Embed('../../res/action/command_menubar_longer.png')" overIcon="@Embed('../../res/action/command_menubar_longer.png')" selectedUpIcon="@Embed('../../res/action/command_menubar_shorter.png')" selectedOverIcon="@Embed('../../res/action/command_menubar_shorter.png')" selectedDownIcon="@Embed('../../res/action/command_menubar_shorter.png')" />
         </mx:HBox>
         <mx:MenuBar id="MenuBar_Api" itemClick="OnMenuBarClick (event);" height="100%"/>
         <mx:Spacer width="100%"/>
         <mx:HBox borderStyle="solid" borderThickness="1" height="100%" horizontalGap="1" verticalGap="1" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
            <mx:Button id="Button_CodeFormatSwitch" click="OnSwitchCodeFormat ()" toggle="true" focusEnabled="false" fontSize="8" left="5" top="5" width="20" height="20" cornerRadius="0" upIcon="@Embed('../../res/action/command_coding_format_poem.png')" downIcon="@Embed('../../res/action/command_coding_format_poem.png')" overIcon="@Embed('../../res/action/command_coding_format_poem.png')" selectedUpIcon="@Embed('../../res/action/command_coding_format_traditional.png')" selectedOverIcon="@Embed('../../res/action/command_coding_format_traditional.png')" selectedDownIcon="@Embed('../../res/action/command_coding_format_traditional.png')" />
         </mx:HBox>
         <mx:HBox borderStyle="solid" borderThickness="1" height="100%" horizontalGap="1" verticalGap="1" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
            <mx:Button id="Button_MoveUpCommmand" click="OnMoveCallingUp ()" toolTip="Move Up" focusEnabled="false" fontSize="8" left="5" top="5" width="20" height="20" toggle="false" cornerRadius="0" icon="@Embed('../../res/action/command_moveup.png')" disabledIcon="@Embed('../../res/action/command_moveup-disabled.png')" />
            <mx:Button id="Button_MoveDownCommmand" click="OnMoveCallingDown ()" toolTip="Move Down" focusEnabled="false" fontSize="8" left="5" top="5" width="20" height="20" toggle="false" cornerRadius="0" icon="@Embed('../../res/action/command_movedown.png')" disabledIcon="@Embed('../../res/action/command_movedown-disabled.png')" />
         </mx:HBox>
         <mx:Spacer width="10"/>
         <mx:HBox borderStyle="solid" borderThickness="1" height="100%" horizontalGap="1" verticalGap="1" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
            <mx:Button id="Button_DeleteCommmand" click="OnDeleteCalling ()" toolTip="Delete Command" focusEnabled="false" fontSize="8" left="5" top="5" width="20" height="20" toggle="false" cornerRadius="0" icon="@Embed('../../res/action/command_delete.png')" disabledIcon="@Embed('../../res/action/command_delete-disabled.png')" />
         </mx:HBox>
      </mx:HBox>
      <mx:HBox id="Box_Commands" height="216" width="100%">
         <mx:List id="List_Commands" dataProvider="{mCommandListDataProvider}" labelField="mName" showDataTips="true" dataTipField="mDataTip" allowMultipleSelection="true" width="100%" height="100%" editable="false" change="OnCurrentCommandChanged ()" />
      </mx:HBox>
      <mx:HBox height="166" width="100%">
         <mx:ViewStack borderStyle="solid" width="100%" height="100%">
            <mx:Form label="Parameters" id="Box_ParamsAndReturns" width="100%" height="100%" horizontalScrollPolicy="off" autoLayout="true" labelWidth="200" verticalGap="3" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6">
            </mx:Form>
         </mx:ViewStack>
      </mx:HBox>
      <!--
      <mx:HBox id="Box_ParamsAndReturns" width="100%">
         <mx:VBox id="Box_ParamNames" width="200">

         </mx:VBox>
         <mx:VBox id="Box_ParamValues" width="200">

         </mx:VBox>
      </mx:HBox>
      -->
   </mx:VBox>

   <mx:Script>
      <![CDATA[       
         
         import flash.geom.Point;
         
         import flash.events.ContextMenuEvent;
         import flash.ui.ContextMenu;
         import flash.ui.ContextMenuItem;
         
         import mx.events.MenuEvent;
         import mx.controls.Menu;
         import mx.events.ListEvent;
         import mx.controls.Alert;
         
         import mx.containers.HBox;
         import mx.controls.Label;
         import mx.controls.Spacer;
         import mx.core.UIComponent;
         import mx.containers.FormItem;
         import mx.core.Container;
         
         import common.Define;
         import common.trigger.ValueTypeDefine;
         import common.trigger.ValueSpaceTypeDefine;
         import common.trigger.ValueSourceTypeDefine;
         
         import com.tapirgames.util.DisplayObjectUtil;
         import com.tapirgames.util.TextUtil;
         
         import editor.runtime.Runtime;
         
         import editor.trigger.TriggerEngine;
         import editor.trigger.FunctionDeclaration;
         import editor.trigger.FunctionDeclaration_EventHandler;
         import editor.trigger.FunctionDefinition
         import editor.trigger.VariableDefinition;
         import editor.trigger.CodeSnippet;
         import editor.trigger.FunctionCalling;
         import editor.trigger.ValueSource;
         import editor.trigger.ValueSource_Direct;
         import editor.trigger.ValueSource_Variable;
         //import editor.trigger.ValueSource_Property;
         //import editor.trigger.ValueSource_Property_OwnerVariable;
         import editor.trigger.ValueTarget;
         import editor.trigger.ValueTarget_Null;
         import editor.trigger.ValueTarget_Variable;
         import editor.trigger.VariableSpace;
         import editor.trigger.VariableSpaceInput;
         import editor.trigger.VariableSpaceReturn;
         import editor.trigger.VariableSpaceGlobal;
         import editor.trigger.VariableSpaceLocal;
         import editor.trigger.VariableSpaceRegister;
         
         private var mInputValues:Object;
         
         private var mCodeSnippet:CodeSnippet = null;
         
         private var mCurrentEditingItem:Object = null;
         
         [Bindable]
         private var mCommandListDataProvider:Object = [];
         
         private var mCopySelectedMenuItem:ContextMenuItem = null;
         private var mCopyAllMenuItem:ContextMenuItem = null;
         private var mPasteBeforeMenuItem:ContextMenuItem = null;
         private var mPasteAfterMenuItem:ContextMenuItem = null;
         
         private function OnInitPanel ():void
         {
            MenuBar_Api.labelField="@name"
            MenuBar_Api.showRoot = false;
            
            Button_MenuBarSwitch.selected = Runtime.mLongerCodeEditorMenuBar;
            OnSwitchMenuBar ();
            
            Button_CodeFormatSwitch.selected = Runtime.mPoemCodingFormat;
            
            mCopySelectedMenuItem = DisplayObjectUtil.AppendContextMenuItem (List_Commands, "Copy Selected Calling(s)", OnCopySelectedCallings);
            mCopyAllMenuItem = DisplayObjectUtil.AppendContextMenuItem (List_Commands, "Copy All Callings", OnCopyAllCallings);
            mPasteBeforeMenuItem = DisplayObjectUtil.AppendContextMenuItem (List_Commands, "Insert Callings Before The Selected", OnPasteCallingsBefore);
            mPasteAfterMenuItem = DisplayObjectUtil.AppendContextMenuItem (List_Commands, "", OnPasteCallingsAfter);
            
            UpdateInterface ();
         }
         
         private function OnCopySelectedCallings (event:ContextMenuEvent):void
         {
            var selectedIndices:Array = List_Commands.selectedIndices;
            selectedIndices.sort ();
            CopyCallings (selectedIndices);
         }
         
         private function OnCopyAllCallings (event:ContextMenuEvent):void
         {
            CopyCallings (null);
         }
         
         private function CopyCallings (ids:Array):void
         {
            var copiedCallings:Array = GetFunctionCallings (ids, false);
            if (copiedCallings.length == 0)
            {
               Runtime.mCopiedCodeSnippet = null;
            }
            else
            {
               Runtime.mCopiedCodeSnippet = new CodeSnippet (mCodeSnippet.GetOwnerFunctionDefinition ());
               Runtime.mCopiedCodeSnippet.AssignFunctionCallings (copiedCallings);
            }
            
            UpdateInterface ();
         }
         
         private function OnPasteCallingsBefore (event:ContextMenuEvent):void
         {
            if (List_Commands.selectedIndex >= 0)
            {
               PasteCallingsAt (List_Commands.selectedIndex);
            }
         }
         
         private function OnPasteCallingsAfter (event:ContextMenuEvent):void
         {
            if (List_Commands.dataProvider.length > 0 && List_Commands.selectedIndex < 0)
               return;
            
            PasteCallingsAt (List_Commands.selectedIndex + 1);
         }
         
         private function PasteCallingsAt (insertAt:int):void
         {
            if (Runtime.mCopiedCodeSnippet == null)
               return;
            
            var codeSnippet:CodeSnippet = Runtime.mCopiedCodeSnippet.Clone (mCodeSnippet.GetOwnerFunctionDefinition ());
            
            AddFunctionCallingsFromCodeSnippet (codeSnippet, insertAt);
         }
         
         private function OnSwitchMenuBar ():void
         {
            Runtime.mLongerCodeEditorMenuBar = Button_MenuBarSwitch.selected;
            if (Button_MenuBarSwitch.selected)
            {
               Button_MenuBarSwitch.toolTip = "Shorter Manu Bar";
               MenuBar_Api.dataProvider = TriggerEngine.GetCoreApiFunctionsMenuBarDataProvider_Longer ();
            }
            else
            {
               Button_MenuBarSwitch.toolTip = "Longer Manu Bar";
               MenuBar_Api.dataProvider = TriggerEngine.GetCoreApiFunctionsMenuBarDataProvider_Shorter ();
            }
         }
         
         private function OnSwitchCodeFormat ():void
         {
            RetrieveCurrentCommandValueSourcesFromControls (false);
            
            Runtime.mPoemCodingFormat = Button_CodeFormatSwitch.selected;
            if (Button_CodeFormatSwitch.selected)
            {
               Button_CodeFormatSwitch.toolTip = "Traditional Format";
            }
            else
            {
               Button_CodeFormatSwitch.toolTip = "Poem Format";
            }
            
            for (var i:int = 0; i < List_Commands.dataProvider.length; ++ i)
            {
               var item:Object = List_Commands.dataProvider.getItemAt (i);
               var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (item.mID);
               item.mName = item.mDataTip = func_declaration.CreateFormattedCallingText (item.mCurrentValueSources, item.mCurrentValueTargets);
            }
            
            List_Commands.invalidateList ();
         }
         
         private function OnMenuBarClick (event:MenuEvent):void
         {
            OnNewCalling (event.item.@id);
         }
         
         public function SetCodeSnippet (codeSnippet:CodeSnippet):void
         {
            mCodeSnippet = codeSnippet;
            
            Initialize ();
         }
         
         public function GetCommandListDefinition ():Array
         {
            return GetFunctionCallings (null, true);
         }
         
         private function Initialize ():void
         {
            if (mCodeSnippet == null)
               return;
            
            AddFunctionCallingsFromCodeSnippet (mCodeSnippet, 0);
         }
         
         private function AddFunctionCallingsFromCodeSnippet (codeSnippet:CodeSnippet, insertAt:int):void
         {
            var i:int;
            var j:int;
            var func_calling:FunctionCalling;
            var func_declaration:FunctionDeclaration;
            var value_source:ValueSource;
            var value_target:ValueTarget;
            
            var count:int = codeSnippet.GetNumFunctionCallings ();
            
            if (insertAt < 0)
               insertAt = 0;
            else if (insertAt > List_Commands.dataProvider.length)
               insertAt = List_Commands.dataProvider.length;
            
            var oldSelectedIndex:int = List_Commands.selectedIndex;
            var newSelectedIndex:int;
            if (List_Commands.selectedIndex < 0 && count > 0)
               newSelectedIndex = insertAt;
            else if (List_Commands.selectedIndex >= insertAt)
               newSelectedIndex = List_Commands.selectedIndex + count;
            else
               newSelectedIndex = List_Commands.selectedIndex;
            
            for (i = 0; i < count; ++ i)
            {
               func_calling = codeSnippet.GetFunctionCallingAt (i);
               func_declaration = func_calling.GetFunctionDeclaration ();
               
               var func_name:String = func_declaration.GetName ();
               var func_id:int = func_declaration.GetID ();
               var initialValueSources:Array = new Array ();
               var currentValueSources:Array = new Array ();
               var initialReturnTargets:Array = new Array ();
               var currentReturnTargets:Array = new Array ();
               
               var codeLine:String = func_calling.ToCodeString ();
               
               for (j = 0; j < func_declaration.GetNumInputs (); ++ j)
               {
                  value_source = func_calling.GetInputValueSource (j);
                  
                  initialValueSources.push (value_source.CloneSource ());
                  currentValueSources.push (value_source.CloneSource ());
               }
               
               for (j = 0; j < func_declaration.GetNumOutputs (); ++ j)
               {
                  value_target = func_calling.GetReturnValueTarget (j);
                  
                  initialReturnTargets.push (value_target.CloneTarget ());
                  currentReturnTargets.push (value_target.CloneTarget ());
               }
               
               List_Commands.dataProvider.addItemAt ({mName:codeLine, mID:func_id, mDataTip: codeLine,
                                                      mInitialValueSources:initialValueSources, mCurrentValueSources:currentValueSources,
                                                      mInitialValueTargets:initialReturnTargets, mCurrentValueTargets:currentReturnTargets
                                                      },
                                                      insertAt ++);
            }
            
            if (oldSelectedIndex != newSelectedIndex)
            {
               List_Commands.selectedIndex = newSelectedIndex;
               OnCurrentCommandChanged ();
            }
            
            if (codeSnippet.GetNumFunctionCallings () > 0)
            {
               List_Commands.validateNow ();
               OnCurrentCommandChanged ();
            }
            
            UpdateInterface ();
         }
         
         public function GetFunctionCallings (callingIds:Array = null, clearContextMenus:Boolean = false):Array
         {
            RetrieveCurrentCommandValueSourcesFromControls (clearContextMenus);
            
            var func_calling_list:Array = new Array ();
            
            var result_inverteds:Array = new Array ();
            var is_conditions:Array = new Array ();
            
            var i:int;
            var j:int;
            var item_array:Array = List_Commands.dataProvider.toArray ();
            
            var count:int = item_array.length;
            
            if (callingIds == null)
            {
               callingIds = new Array (count);
               for (i = 0; i < count; ++ i)
               {
                  callingIds [i] = i;
               }
            }
            
            var callingId:int;
            
            for (i = 0; i < callingIds.length; ++ i)
            {
               callingId = callingIds [i];
               
               if (callingId >= 0 && callingId < count)
               {
                  var item:Object = item_array [callingId];
                  
                  var func_id:int = item.mID;
                  var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
                  var func_calling:FunctionCalling = new FunctionCalling (func_declaration);
                  func_calling.AssignInputValueSources (item.mCurrentValueSources);
                  func_calling.AssignOutputValueTargets (item.mCurrentValueTargets);
                  
                  func_calling_list.push (func_calling);
               }
            }
            
            return func_calling_list;
         }
         
         private function OnNewCalling (id:int):void
         {
            if (isNaN (id) || id < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (id);
            
            if (func_declaration == null)
               return;
            
            var func_id:int = func_declaration.GetID ();
            var func_name:String = func_declaration.GetName ();
            var initialValueSources:Array = new Array ();
            var currentValueSources:Array = new Array ();
            var initialReturnTargets:Array = new Array ();
            var currentReturnTargets:Array = new Array ();
            
            var variable_def:VariableDefinition;
            var j:int;
            
            var value_source:ValueSource;
            
            for (j = 0; j < func_declaration.GetNumInputs (); ++ j)
            {
               variable_def = func_declaration.GetInputParamDefinitionAt (j);
               value_source = variable_def.GetDefaultValueSource ();
               initialValueSources.push (value_source.CloneSource ());
               currentValueSources.push (value_source.CloneSource ());
            }
            
            var value_target:ValueTarget;
            
            for (j = 0; j < func_declaration.GetNumOutputs (); ++ j)
            {
               variable_def = func_declaration.GetOutputParamDefinitionAt (j);
               value_target = variable_def.GetDefaultValueTarget ();
               initialReturnTargets.push (value_target.CloneTarget ());
               currentReturnTargets.push (value_target.CloneTarget ());
            }
            
            var insert_index:int = List_Commands.selectedIndex + 1;
            
            List_Commands.dataProvider.addItemAt ({mName:func_name, mID:func_id, 
                                                   mInitialValueSources:initialValueSources, mCurrentValueSources:currentValueSources, 
                                                   mInitialValueTargets:initialReturnTargets, mCurrentValueTargets:currentReturnTargets
                                                   }, 
                                                   insert_index);
            
            List_Commands.selectedIndex = insert_index;
            
            OnCurrentCommandChanged ();
            
            List_Commands.validateNow ();
            UpdateInterface ();
         }
         
         private function OnDeleteCalling ():void
         {
            var selectedIndices:Array = List_Commands.selectedIndices;
            selectedIndices.sort (Array.DESCENDING);
            var selectedIndex:int = List_Commands.selectedIndex;
            var index:int;
            for (var i:int = 0; i < selectedIndices.length; ++ i)
            {
               index = selectedIndices [i];
               if (index == selectedIndex)
               {
               }
               else
               {
                  if (index < selectedIndex)
                  {
                     -- selectedIndex;
                  }
                  
                  List_Commands.dataProvider.removeItemAt (index);
               }
            }
            
            if (selectedIndex >= 0)
            {
               List_Commands.dataProvider.removeItemAt (selectedIndex);
               mCurrentEditingItem = null;
               
               if (selectedIndex >= List_Commands.dataProvider.length)
                  -- selectedIndex;
               
               if (selectedIndex >= 0)
                  List_Commands.selectedItem = List_Commands.dataProvider.getItemAt (selectedIndex);
            }
            
            if (selectedIndices.length > 0)
            {
               OnCurrentCommandChanged ();
               
               List_Commands.validateNow ();
               UpdateInterface ();
            }
         }
         
         private function OnMoveCallingUp ():void
         {
            if (List_Commands.selectedIndex >= 1)
            {
               var index:int = List_Commands.selectedIndex;
               
               var item:Object = List_Commands.dataProvider.setItemAt (List_Commands.dataProvider.getItemAt (index), index - 1);
               List_Commands.dataProvider.setItemAt (item, index);
               
               List_Commands.selectedItem = List_Commands.dataProvider.getItemAt (index - 1);
               
               UpdateInterface ();
            }
         }
         
         private function OnMoveCallingDown ():void
         {
            if (List_Commands.selectedIndex >= 0 && List_Commands.selectedIndex < List_Commands.dataProvider.length - 1)
            {
               var index:int = List_Commands.selectedIndex;
               
               var item:Object = List_Commands.dataProvider.setItemAt (List_Commands.dataProvider.getItemAt (index), index + 1);
               List_Commands.dataProvider.setItemAt (item, index);
               
               List_Commands.selectedItem = List_Commands.dataProvider.getItemAt (index + 1);
               
               UpdateInterface ();
            }
         }
         
         private function UpdateInterface ():void
         {
            if (List_Commands.selectedIndex >= 0)
            {
               List_Commands.scrollToIndex (List_Commands.selectedIndex);
            }
            
            Button_DeleteCommmand.enabled = List_Commands.selectedIndex >= 0;
            Button_MoveUpCommmand.enabled = List_Commands.selectedIndex >= 1;
            Button_MoveDownCommmand.enabled = List_Commands.selectedIndex >= 0 && List_Commands.selectedIndex < List_Commands.dataProvider.length - 1;
            
            mCopySelectedMenuItem.enabled = List_Commands.selectedIndices.length > 0;
            mCopyAllMenuItem.enabled = List_Commands.dataProvider.length > 0;
            mPasteBeforeMenuItem.enabled = Runtime.mCopiedCodeSnippet != null &&  List_Commands.selectedIndex >= 0 && List_Commands.dataProvider.length > 0;
            mPasteAfterMenuItem .enabled = Runtime.mCopiedCodeSnippet != null && (List_Commands.selectedIndex >= 0 || List_Commands.dataProvider.length == 0);
            
            mPasteAfterMenuItem.caption = List_Commands.dataProvider.length == 0 ? "Paste Copied Callings" : "Insert Callings After The Selected";
         }
         
         private function OnCurrentCommandChanged ():void
         {
            RetrieveCurrentCommandValueSourcesFromControls (true);
            mCurrentEditingItem = null;
            
            while (Box_ParamsAndReturns.numChildren > 0)
               Box_ParamsAndReturns.removeChildAt (0);
            
         //===========================
         // ...
         //===========================
            
            UpdateInterface ();
            
            if (List_Commands.selectedItem == null)
               return;
            
            mCurrentEditingItem = List_Commands.selectedItem;
            var func_id:int = mCurrentEditingItem.mID;
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
            var currentValueSources:Array = mCurrentEditingItem.mCurrentValueSources;
            var currentValueTargets:Array = mCurrentEditingItem.mCurrentValueTargets;
            
         //===========================
         // create new controls
         //===========================
            
            var source_form_items:Array = new Array ();
            var source_value_controls:Array = new Array ();
            var target_form_items:Array = new Array ();
            var target_value_controls:Array = new Array ();
            mCurrentEditingItem.mValueSourceParentControls = source_form_items;
            mCurrentEditingItem.mValueSourceControls = source_value_controls;
            mCurrentEditingItem.mValueTargetParentControls = target_form_items;
            mCurrentEditingItem.mValueTargetControls = target_value_controls;
            
            var block_title:Label;
            var title_box:HBox;
            
            if (func_declaration.GetNumInputs () > 0)
            {
               title_box = new HBox ();
               title_box.percentWidth = 100;
               title_box.setStyle ("backgroundColor", 0x7FCEFF);
               
               block_title = new Label ();
               block_title.text = func_declaration.GetNumInputs () == 1 ? "Input Parameter: " : "Input Parameters: ";
               block_title.setStyle ("fontWeight", "bold");
               block_title.setStyle ("textAlign", "left");
               block_title.percentWidth = 100;
               
               title_box.addChild (block_title);
               Box_ParamsAndReturns.addChild (title_box);
            }
            
            var variable_def:VariableDefinition;
            var j:int;
            var form_item:FormItem;
            
            var value_source:ValueSource;
            
            for (j = 0; j < func_declaration.GetNumInputs (); ++ j)
            {
               value_source = currentValueSources [j];
               
               variable_def = func_declaration.GetInputParamDefinitionAt (j);
               
               form_item = new FormItem ();
               form_item.percentWidth = 100;
               //form_item.width = 266;
               //form_item.maxWidth = 266;
               form_item.horizontalScrollPolicy = "off";
               form_item.label = variable_def.GetName () + ":";
               //form_item.toolTip = "hi hi";
               
               //form_item.addEventListener (MouseEvent.CLICK, OnParamLabelClick);
               source_form_items.push (form_item);
               
               CreateValueSourceControl (j, form_item, source_value_controls);
               
               Box_ParamsAndReturns.addChild (form_item);
               
               BuildContextMenuForValueSource (form_item, variable_def, value_source);
            }
            
            if (func_declaration.GetNumOutputs () > 0)
            {
               if (func_declaration.GetNumInputs () > 0)
               {
                  var spacer:Spacer = new Spacer ();   
                  spacer.height = 5;
                  Box_ParamsAndReturns.addChild (spacer);
               }
               
               title_box = new HBox ();
               title_box.percentWidth = 100;
               title_box.setStyle ("backgroundColor", 0x7FCEFF);
               
               block_title = new Label ();
               block_title.text = func_declaration.GetNumOutputs () == 1 ? "Output Parameter: " : "Output Parameters: ";
               block_title.setStyle ("fontWeight", "bold");
               block_title.setStyle ("textAlign", "left");
               block_title.percentWidth = 100;
               
               title_box.addChild (block_title);
               Box_ParamsAndReturns.addChild (title_box);
            }
            
            var value_target:ValueTarget;
            for (j = 0; j < func_declaration.GetNumOutputs (); ++ j)
            {
               value_target = currentValueTargets [j];
               
               variable_def = func_declaration.GetOutputParamDefinitionAt (j);
               
               form_item = new FormItem ();
               form_item.percentWidth = 100;
               //form_item.width = 490;
               //form_item.maxWidth = 490;
               form_item.horizontalScrollPolicy = "off";
               form_item.label = variable_def.GetName () + ":";
               //form_item.toolTip = "hi hi";
               
               //form_item.addEventListener (MouseEvent.CLICK, OnParamLabelClick);
               target_form_items.push (form_item);
               
               CreateValueTargetControl (j, form_item, target_value_controls);
               
               Box_ParamsAndReturns.addChild (form_item);
               
               BuildContextMenuForValueTarget (form_item, variable_def, value_target);
            }
         }
         
         private function CreateValueSourceControl (inputId:int, parentContainer:Container, valueControls:Array):UIComponent
         {
            var func_id:int = mCurrentEditingItem.mID;
            var currentValueSources:Array = mCurrentEditingItem.mCurrentValueSources;
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
            
            if (valueControls [inputId] != null)
            {
               parentContainer.removeChild (valueControls [inputId]);
               valueControls [inputId] = null;
            }
            
            var variable_def:VariableDefinition = func_declaration.GetInputParamDefinitionAt (inputId);
            var value_source:ValueSource = currentValueSources [inputId];
            
            var value_control:UIComponent = null;
            if (value_source is ValueSource_Direct)
               value_control = variable_def.CreateControlForDirectValueSource (value_source as ValueSource_Direct);
            else if (value_source is ValueSource_Variable)
            {
               var validVariableIndexes:Array = null;
               var space_type:int = (value_source as ValueSource_Variable).GetVariableSpaceType ();
               
               if (space_type == ValueSpaceTypeDefine.ValueSpace_Input)
               {
                  var ownerFuncDeclaration:FunctionDeclaration = mCodeSnippet.GetOwnerFunctionDefinition ().GetFunctionDeclaration ();
                  validVariableIndexes = ownerFuncDeclaration.GetInputVariableIndexesSatisfy (variable_def);
               }
               
               value_control = variable_def.CreateControlForVariableValueSource (value_source as ValueSource_Variable, validVariableIndexes)
            }
            
            if (value_control != null)
            {
               value_control.percentWidth = 100;
               //value_control.width = 133;
               //value_control.maxWidth = 133;
               
               valueControls [inputId] = value_control;
               
               parentContainer.addChild (value_control);
            }
            
            return value_control;
         }
         
         private function CreateValueTargetControl (returnId:int, parentContainer:Container, valueControls:Array):UIComponent
         {
            var func_id:int = mCurrentEditingItem.mID;
            var currentValueTargets:Array = mCurrentEditingItem.mCurrentValueTargets;
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
            
            if (valueControls [returnId] != null)
            {
               parentContainer.removeChild (valueControls [returnId]);
               valueControls [returnId] = null;
            }
            
            var variable_def:VariableDefinition = func_declaration.GetOutputParamDefinitionAt (returnId);
            var value_target:ValueTarget= currentValueTargets [returnId];
            
            var value_control:UIComponent = null;
            if (value_target is ValueTarget_Null)
               value_control = variable_def.CreateControlForNullValueTarget (value_target as ValueTarget_Null);
            else if (value_target is ValueTarget_Variable)
            {
               var validVariableIndexes:Array = null;
               var space_type:int = (value_target as ValueTarget_Variable).GetVariableSpaceType ();
               
               if (space_type == ValueSpaceTypeDefine.ValueSpace_Output)
               {
                  var ownerFuncDeclaration:FunctionDeclaration = mCodeSnippet.GetOwnerFunctionDefinition ().GetFunctionDeclaration ();
                  validVariableIndexes = ownerFuncDeclaration.GetOutputVariableIndexesSatisfiedBy (variable_def);
               }
               
               value_control = variable_def.CreateControlForVariableValueTarget (value_target as ValueTarget_Variable, validVariableIndexes);
            }
            
            if (value_control != null)
            {
               value_control.percentWidth = 100;
               //value_control.width = 133;
               //value_control.maxWidth = 133;
               
               valueControls [returnId] = value_control;
               
               parentContainer.addChild (value_control);
            }
            
            return value_control;
         }
         
         private function RetrieveCurrentCommandValueSourcesFromControls (clearContextMenus:Boolean):void
         {
            if (mCurrentEditingItem == null)
               return;
            
            var func_id:int = mCurrentEditingItem.mID;
            var currentValueSources:Array = mCurrentEditingItem.mCurrentValueSources;
            var source_value_controls:Array = mCurrentEditingItem.mValueSourceControls;
            var currentReturnTargets:Array = mCurrentEditingItem.mCurrentValueTargets;
            var target_value_controls:Array = mCurrentEditingItem.mValueTargetControls;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
            
            var variable_def:VariableDefinition;
            var j:int;
            
            var value_source:ValueSource;
            var source_control:UIComponent;
            
            for (j = 0; j < func_declaration.GetNumInputs (); ++ j)
            {
               value_source = currentValueSources [j];
               source_control = source_value_controls [j];
               variable_def = func_declaration.GetInputParamDefinitionAt (j);
               
               if (value_source is ValueSource_Direct)
               {
                  var newValueSource:ValueSource = variable_def.RetrieveDirectValueSourceFromControl (value_source as ValueSource_Direct, source_control);
                  if (newValueSource != null)
                     currentValueSources [j] = newValueSource;
               }
               else if (value_source is ValueSource_Variable)
               {
                  variable_def.RetrieveVariableValueSourceFromControl (value_source as ValueSource_Variable, source_control);
               }
               else
               {
                  trace ("? unknow source type");
               }
               
               if (clearContextMenus)
               {
                  ClearCustomContextMenus (source_control, true);
               }
            }
            
            var value_target:ValueTarget;
            var target_control:UIComponent;
            
            for (j = 0; j < func_declaration.GetNumOutputs (); ++ j)
            {
               value_target = currentReturnTargets [j];
               target_control = target_value_controls [j];
               variable_def = func_declaration.GetOutputParamDefinitionAt (j);
               
               if (value_target is ValueTarget_Null)
                  variable_def.RetrieveNullValueTargetFromControl (value_target as ValueTarget_Null, target_control);
               else if (value_target is ValueTarget_Variable)
                  variable_def.RetrieveVariableValueTargetFromControl (value_target as ValueTarget_Variable, target_control);
               else
                  trace ("? unknow target type");
               
               if (clearContextMenus)
               {
                  ClearCustomContextMenus (target_control, true);
               }
            }
            
            var codeLine:String = func_declaration.CreateFormattedCallingText (currentValueSources, currentReturnTargets);
            mCurrentEditingItem.mName = codeLine;
            mCurrentEditingItem.mDataTip = codeLine;
            List_Commands.invalidateList ();
         }
         
         private function AppendContextMenuItem (sprite:InteractiveObject, caption:String, selectedListener:Function, addSaperator:Boolean = false, isEnabled:Boolean = true):void
         {
            if (sprite.contextMenu == null)
            {
               sprite.contextMenu = new ContextMenu ();
               sprite.contextMenu.hideBuiltInItems ();
            }
            
            var menuItem:ContextMenuItem = new ContextMenuItem(caption, addSaperator);
            menuItem.enabled = isEnabled;
            if (selectedListener != null)
               menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, selectedListener);
            sprite.contextMenu.customItems.push (menuItem);
         }
         
         private function ClearCustomContextMenus (sprite:InteractiveObject, alsoSetNull:Boolean):void
         {
            if (sprite.contextMenu == null)
               return;
            
            sprite.contextMenu.customItems.splice (0, sprite.contextMenu.customItems.length);
            sprite.contextMenu.customItems = null;
            
            if (alsoSetNull)
            {
               sprite.contextMenu = null;
            }
         }
         
   //================================================================================================
   // switch value source types
   //================================================================================================
         
         private function BuildContextMenuForValueSource (sprite:InteractiveObject, variableDefinition:VariableDefinition, valueSource:ValueSource):void
         {
            if (sprite.contextMenu == null)
            {
               sprite.contextMenu = new ContextMenu ();
               sprite.contextMenu.hideBuiltInItems ();
            }
            else
            {
               sprite.contextMenu.customItems.splice (0, sprite.contextMenu.customItems.length);
            }
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var value_type:int = variableDefinition.GetValueType ();
            var space_type:int = (valueSource is ValueSource_Variable) ? (valueSource as ValueSource_Variable).GetVariableInstance ().GetSpaceType () : ValueSpaceTypeDefine.ValueSpace_Void;
            
            AppendContextMenuItem (sprite, "Default", OnSetValueSourceDefault, false);
            AppendContextMenuItem (sprite, "Reset", OnResetValueSource, false);
            
            AppendContextMenuItem (sprite, "from Direct Value", OnSelectValueSource_Direct, true, space_type != ValueSpaceTypeDefine.ValueSpace_Void);
            
            if (ownerFuncDefinition.HasInputsSatisfy (variableDefinition))
               AppendContextMenuItem (sprite, "from Input Varialbes", OnSelectValueSource_InputVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_Input);
            
            //AppendContextMenuItem (sprite, "from Local Variable", null, false, space_type != ValueSpaceTypeDefine.ValueSpace_Local);
            //AppendContextMenuItem (sprite, "from Global Variable", null, false), space_type != ValueSpaceTypeDefine.ValueSpace_Global;
            
            AppendContextMenuItem (sprite, "from Register Variable", OnSelectValueSource_RegisterVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_GlobalRegister);
         }
         
         private function OnSetValueSourceDefault (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetInputParamDefinitionAt (param_index);
            var new_value_source:ValueSource = variable_def.GetDefaultValueSource ();
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
        }
         
         private function OnResetValueSource (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetInputParamDefinitionAt (param_index);
            var new_value_source:ValueSource = mCurrentEditingItem.mInitialValueSources [param_index];
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
        }
         
         private function OnSelectValueSource_Direct (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetInputParamDefinitionAt (param_index);
            var new_value_source:ValueSource = variable_def.GetDefaultDirectValueSource ();
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
        }
         
         private function OnSelectValueSource_InputVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetInputParamDefinitionAt (param_index);
            var new_value_source:ValueSource = variable_def.GetDefaultVariableValueSource (ownerFuncDefinition.GetInputVariableSpace ());
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
         }
         
         private function OnSelectValueSource_RegisterVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetInputParamDefinitionAt (param_index);
            var new_value_source:ValueSource = variable_def.GetDefaultVariableValueSource (TriggerEngine.GetRegisterVariableSpace (variable_def.GetValueType()));
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
         }
         
   //================================================================================================
   // switch value target types
   //================================================================================================
         
         private function BuildContextMenuForValueTarget (sprite:InteractiveObject, variableDefinition:VariableDefinition, valueTarget:ValueTarget):void
         {
            if (sprite.contextMenu == null)
            {
               sprite.contextMenu = new ContextMenu ();
               sprite.contextMenu.hideBuiltInItems ();
            }
            else
            {
               sprite.contextMenu.customItems.splice (0, sprite.contextMenu.customItems.length);
            }
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var value_type:int = variableDefinition.GetValueType ();
            var space_type:int = (valueTarget is ValueTarget_Variable) ? (valueTarget as ValueTarget_Variable).GetVariableInstance ().GetSpaceType () : ValueSpaceTypeDefine.ValueSpace_Void;
            
            AppendContextMenuItem (sprite, "Reset", OnResetValueTarge, false);
            
            AppendContextMenuItem (sprite, "to Nothing", OnSelectValueTarget_Null, true, space_type != ValueSpaceTypeDefine.ValueSpace_Void);
            
            if (ownerFuncDefinition.HasOutputsSatisfiedBy (variableDefinition))
               AppendContextMenuItem (sprite, "to Output Variables", OnSelectValueTarget_ReturnVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_Output);
            
            //AppendContextMenuItem (sprite, "to Local Variable", null, false, space_type != ValueSpaceTypeDefine.ValueSpace_Local);
            //AppendContextMenuItem (sprite, "to Global Variable", null, false), space_type != ValueSpaceTypeDefine.ValueSpace_Global;
            
            AppendContextMenuItem (sprite, "to Register Variable", OnSelectValueTarget_RegisterVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_GlobalRegister);
         }
         
         private function OnResetValueTarge (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var return_index:int = mCurrentEditingItem.mValueTargetParentControls.indexOf (form_item);
            if (return_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetOutputParamDefinitionAt (return_index);
            var new_value_target:ValueTarget = mCurrentEditingItem.mInitialValueTargets [return_index];
            
            mCurrentEditingItem.mCurrentValueTargets [return_index] = new_value_target;
            CreateValueTargetControl (return_index, form_item, mCurrentEditingItem.mValueTargetControls);
            BuildContextMenuForValueTarget (form_item, variable_def, new_value_target);
        }
        
         private function OnSelectValueTarget_Null (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var return_index:int = mCurrentEditingItem.mValueTargetParentControls.indexOf (form_item);
            if (return_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetOutputParamDefinitionAt (return_index);
            var new_value_target:ValueTarget = variable_def.GetDefaultNullValueTarget ();
            
            mCurrentEditingItem.mCurrentValueTargets [return_index] = new_value_target;
            CreateValueTargetControl (return_index, form_item, mCurrentEditingItem.mValueTargetControls);
            BuildContextMenuForValueTarget (form_item, variable_def, new_value_target);
        }
         
         private function OnSelectValueTarget_ReturnVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var return_index:int = mCurrentEditingItem.mValueTargetParentControls.indexOf (form_item);
            if (return_index < 0)
               return;
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetOutputParamDefinitionAt (return_index);
            var new_value_target:ValueTarget = variable_def.GetDefaultVariableValueTarget (ownerFuncDefinition.GetReturnVariableSpace ());
            
            mCurrentEditingItem.mCurrentValueTargets [return_index] = new_value_target;
            CreateValueTargetControl (return_index, form_item, mCurrentEditingItem.mValueTargetControls);
            BuildContextMenuForValueTarget (form_item, variable_def, new_value_target);
         }
         
         private function OnSelectValueTarget_RegisterVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var return_index:int = mCurrentEditingItem.mValueTargetParentControls.indexOf (form_item);
            if (return_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetOutputParamDefinitionAt (return_index);
            var new_value_target:ValueTarget = variable_def.GetDefaultVariableValueTarget (TriggerEngine.GetRegisterVariableSpace (variable_def.GetValueType()));
            
            mCurrentEditingItem.mCurrentValueTargets [return_index] = new_value_target;
            CreateValueTargetControl (return_index, form_item, mCurrentEditingItem.mValueTargetControls);
            BuildContextMenuForValueTarget (form_item, variable_def, new_value_target);
         }
         
   //=========================================================================================
   // 
   //=========================================================================================
         
     ]]>
   </mx:Script>

</mx:VBox>