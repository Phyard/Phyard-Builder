<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component. 
     You cannot run it independently. -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
      borderStyle="solid" borderThickness="0"
      width="100%" height="100%"
      creationComplete="OnInitPanel()"
      >

   <mx:HBox width="100%">
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:CheckBox id="CheckBox_EnablePhysics" label="Enable Physics" click="OnUpdateComponents()"/>
         <mx:CheckBox id="CheckBox_IsSensor" label="Sensor" click="OnUpdateComponents()"/>
      </mx:VBox>
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:CheckBox id="CheckBox_IsStatic" label="Static"/>
         <mx:CheckBox id="CheckBox_Hollow" label="Hollow"/>
      </mx:VBox>
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:CheckBox id="CheckBox_IsBullet" label="Bullet"/>
         <mx:CheckBox id="CheckBox_BuildBorder" label="Build Border"/>
      </mx:VBox>
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:CheckBox id="CheckBox_AllowSleeping" label="Allow Sleeping"/>
         <mx:CheckBox id="CheckBox_FixRotation" label="Fix Rotation"/>
      </mx:VBox>
      <mx:Spacer width="100%"/>
   </mx:HBox>

   <mx:Spacer height="5" />

   <mx:HBox width="100%">
      <mx:Spacer width="100%"/>
      <mx:Label id="Label_CollisionCategory" text="Collision Category:" textAlign="right" />
      <mx:ComboBox id="SelectList_CollisionCategory" />
      <mx:Spacer width="100%"/>
   </mx:HBox>

   <mx:Spacer height="5" />

   <mx:HBox width="100%">
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_AngularDamping" text="Angular Damping:" textAlign="right"/>
            <mx:TextInput id="Text_AngularDamping" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_InitialAngularMagnitude" text="Angular Velocity:" textAlign="right"/>
            <mx:TextInput id="Text_InitialAngularMagnitude" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_Friction" text="Friction:" textAlign="right"/>
            <mx:TextInput id="Text_Friction" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_Restitution" text="Restitution:" textAlign="right"/>
            <mx:TextInput id="Text_Restitution" text="" width="100"/>
         </mx:HBox>
      </mx:VBox>
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_LinearDamping" text="Linear Damping:" textAlign="right"/>
            <mx:TextInput id="Text_LinearDamping" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_InitialVelocityMagnitude" text="Linear Velocity Magnitude:" textAlign="right"/>
            <mx:TextInput id="Text_InitialVelocityMagnitude" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_InitialVelocityAngle" text="Linear Velocity Angle:" textAlign="right"/>
            <mx:TextInput id="Text_InitialVelocityAngle" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:CheckBox id="CheckBox_InfinteMass" label="Infinite"/>
            <mx:Label id="Label_Denstiy" text="Density:" textAlign="right"/>
            <mx:TextInput id="Text_Density" text="" width="100"/>
         </mx:HBox>
      </mx:VBox>
      <mx:Spacer width="100%"/>
   </mx:HBox>

   <mx:Spacer height="10" />

   <mx:Script>
      <![CDATA[       
         
         import common.Define;
         
         private var mInputValues:Object;
         
         private function OnInitPanel ():void
         {
         }
         
         private function OnUpdateComponents ():void
         {
            if (CheckBox_EnablePhysics.selected)
            {
               CheckBox_IsStatic.enabled = true;
               CheckBox_IsBullet.enabled = true;
               CheckBox_IsSensor.enabled = true;
               
               Label_Denstiy.enabled = true;
               Label_Friction.enabled = true;
               Label_Restitution.enabled = true;
               
               Text_Density.enabled = true;
               Text_Friction.enabled = true;
               Text_Restitution.enabled = true;
               
               Label_CollisionCategory.enabled = true;
               SelectList_CollisionCategory.enabled = true;
               
                CheckBox_Hollow.enabled = ! mInputValues.mDisableHollowEditing;
            }
            else
            {
               CheckBox_IsStatic.enabled = false;
               CheckBox_IsBullet.enabled = false;
               CheckBox_IsSensor.enabled = false;
               
               Label_Denstiy.enabled = false;
               Text_Friction.enabled = false;
               Label_Restitution.enabled = false;
               
               Text_Density.enabled = false;
               Text_Friction.enabled = false;
               Text_Restitution.enabled = false;
               
               Label_CollisionCategory.enabled = false;
               SelectList_CollisionCategory.enabled = false;
               
               CheckBox_Hollow.enabled = false;
            }
            
            if (CheckBox_IsSensor.enabled)
            {
               if (CheckBox_IsSensor.selected)
               {
                  Label_Denstiy.enabled = true;
                  Label_Friction.enabled = false;
                  Label_Restitution.enabled = false;
                  
                  Text_Density.enabled = true;
                  Text_Friction.enabled = false;
                  Text_Restitution.enabled = false;
               }
               else
               {
                  Label_Denstiy.enabled = true;
                  Label_Friction.enabled = true;
                  Label_Restitution.enabled = true;
                  
                  Text_Density.enabled = true;
                  Text_Friction.enabled = true;
                  Text_Restitution.enabled = true;
               }
            }
         }
         
         public function SetValues (inputValues:Object):void
         {
            mInputValues = inputValues;
            
            CheckBox_EnablePhysics.selected = inputValues.mIsPhysicsEnabled;
            CheckBox_IsStatic.selected = inputValues.mIsStatic;
            CheckBox_IsBullet.selected = inputValues.mIsBullet;
            CheckBox_IsSensor.selected = inputValues.mIsSensor;
            CheckBox_Hollow.selected = inputValues.mIsHollow;
            
            Text_Density.text = inputValues.mDensity;
            Text_Friction.text = inputValues.mFriction;
            Text_Restitution.text = inputValues.mRestitution;
            
            SelectList_CollisionCategory.dataProvider = mInputValues.mCollisionCategoryListDataProvider;
            SelectList_CollisionCategory.selectedIndex = mInputValues.mCollisionCategoryListSelectedIndex;
            
            OnUpdateComponents ();
         }
         
         public function GetValues (returnValues:Object):void
         {
            returnValues.mIsPhysicsEnabled = CheckBox_EnablePhysics.selected;
            returnValues.mIsStatic = CheckBox_IsStatic.selected;
            returnValues.mIsBullet = CheckBox_IsBullet.selected;
            returnValues.mIsSensor = CheckBox_IsSensor.selected;
            returnValues.mIsHollow = CheckBox_Hollow.selected;
            
            var density:Number = parseFloat (Text_Density.text);
            if ( ! isNaN (density) )
               returnValues.mDensity = density;
            
            var friction:Number = parseFloat (Text_Friction.text);
            if ( ! isNaN (friction) )
               returnValues.mFriction = friction;
            
            var restitution:Number = parseFloat (Text_Restitution.text);
            if ( ! isNaN (restitution) )
               returnValues.mRestitution = restitution;
            
            returnValues.mCollisionCategoryIndex = SelectList_CollisionCategory.selectedItem.mCategoryIndex;
         }
         
         // temp functionsg
         public function SetMustEnablePhysics ():void
         {
            CheckBox_EnablePhysics.enabled = false;
         }
         
     ]]>
   </mx:Script>

</mx:VBox>