<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component. 
     You cannot run it independently. -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
      borderStyle="solid" borderThickness="0"
      width="100%" height="100%"
      creationComplete="OnInitPanel()"
      >

   <mx:HBox width="100%">
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:CheckBox id="CheckBox_EnablePhysics" label="Enable Physics" click="OnUpdateComponents()"/>
         <mx:CheckBox id="CheckBox_IsSensor" label="Sensor" click="OnUpdateComponents()"/>
      </mx:VBox>
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:CheckBox id="CheckBox_IsStatic" label="Static" click="OnUpdateComponents()"/>
         <mx:CheckBox id="CheckBox_Hollow" label="Hollow"/>
      </mx:VBox>
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:CheckBox id="CheckBox_IsBullet" label="Bullet"/>
         <mx:CheckBox id="CheckBox_BuildBorder" label="Build Border"/>
      </mx:VBox>
      <mx:Spacer width="100%"/>
      <mx:VBox>
         <mx:CheckBox id="CheckBox_AllowSleeping" label="Allow Sleeping"/>
         <mx:CheckBox id="CheckBox_FixRotation" label="Fix Rotation" click="OnUpdateComponents()"/>
      </mx:VBox>
      <mx:Spacer width="100%"/>
   </mx:HBox>

   <mx:Spacer height="5" />

   <mx:HBox width="100%" id="Box_CollisionCategory">
      <mx:Spacer width="100%"/>
      <mx:Label id="Label_CollisionCategory" text="Collision Category:" textAlign="right" />
      <mx:ComboBox id="SelectList_CollisionCategory" />
      <mx:Spacer width="100%"/>
   </mx:HBox>

   <mx:Spacer height="5" />

   <mx:HBox width="100%" id="Box_Bottom">
      <mx:Spacer width="100%"/>
      <mx:VBox id="Box_Left">
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_InitialVelocityMagnitude" text="Linear Velocity Magnitude:" textAlign="right"/>
            <mx:TextInput id="Text_InitialVelocityMagnitude" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_InitialVelocityAngle" text="Linear Velocity Angle (degrees):" textAlign="right"/>
            <mx:TextInput id="Text_InitialVelocityAngle" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%" id="Box_InitialAngularVelocity">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_InitialAngularVelocity" text="Angular Velocity (degrees/s):" textAlign="right"/>
            <mx:TextInput id="Text_InitialAngularVelocity" text="" width="100"/>
         </mx:HBox>
         <!--mx:HBox width="100%" id="Box_LinearDamping">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_LinearDamping" text="Linear Damping:" textAlign="right"/>
            <mx:TextInput id="Text_LinearDamping" text="" width="100"/>
         </mx:HBox-->
      </mx:VBox>
      <mx:Spacer width="100%"/>
      <mx:VBox id="Box_Right">
         <mx:HBox width="100%">
            <mx:Spacer width="100%" />
            <mx:Label id="Label_Denstiy" text="Density:" textAlign="right"/>
            <mx:TextInput id="Text_Density" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_Friction" text="Friction:" textAlign="right"/>
            <mx:TextInput id="Text_Friction" text="" width="100"/>
         </mx:HBox>
         <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_Restitution" text="Restitution:" textAlign="right"/>
            <mx:TextInput id="Text_Restitution" text="" width="100"/>
         </mx:HBox>
         <!--mx:HBox width="100%" id="Box_AngularDamping">
            <mx:Spacer width="100%"/>
            <mx:Label id="Label_AngularDamping" text="Angular Damping:" textAlign="right"/>
            <mx:TextInput id="Text_AngularDamping" text="" width="100"/>
         </mx:HBox-->
      </mx:VBox>
      <mx:Spacer width="100%"/>
   </mx:HBox>

   <mx:Spacer height="10" />

   <mx:Script>
      <![CDATA[       
         
         import common.Define;
         
         private var mInputValues:Object;
         
         private function OnInitPanel ():void
         {
         }
         
         private function OnUpdateComponents ():void
         {
            if (CheckBox_EnablePhysics.selected)
            {
               CheckBox_IsStatic.enabled = true;
               CheckBox_IsBullet.enabled = true;
               CheckBox_IsSensor.enabled = true;
               CheckBox_BuildBorder.enabled = true
               CheckBox_AllowSleeping.enabled = true;
               CheckBox_FixRotation.enabled = true;
               
               CheckBox_Hollow.enabled = mInputValues.mDisableHollowEditing == null || (! mInputValues.mDisableHollowEditing);
               CheckBox_BuildBorder.enabled = mInputValues.mDisableBuildBorderEditing == null || (! mInputValues.mDisableBuildBorderEditing);
                
               Box_Bottom.enabled = true;
               Box_CollisionCategory.enabled = true;
                
               if (CheckBox_IsStatic.selected)
               {
                  Box_Left.enabled = false;
                  //Box_LinearDamping.enabled = false;
                  //Box_AngularDamping.enabled = false;
               }
               else
               {
                  Box_Left.enabled = true;
                  //Box_LinearDamping.enabled = true;
                  //Box_AngularDamping.enabled = true;
                  
                  Box_InitialAngularVelocity.enabled = ! CheckBox_FixRotation.selected;
               }
               
               Box_Right.enabled = ! CheckBox_IsSensor.selected;
            }
            else
            {
               CheckBox_IsStatic.enabled = false;
               CheckBox_IsBullet.enabled = false;
               CheckBox_IsSensor.enabled = false;
               CheckBox_Hollow.enabled = false;
               CheckBox_BuildBorder.enabled = false;
               CheckBox_AllowSleeping.enabled = false;
               CheckBox_FixRotation.enabled = false;
               
               CheckBox_Hollow.enabled = false;
               
               Box_Bottom.enabled = false
               Box_CollisionCategory.enabled = false;
            }
         }
         
         public function SetValues (inputValues:Object):void
         {
            mInputValues = inputValues;
            
            CheckBox_EnablePhysics.enabled = inputValues.mEnablePhysicsChangeable == undefined || inputValues.mEnablePhysicsChangeable;
            
            CheckBox_EnablePhysics.selected = inputValues.mIsPhysicsEnabled;
            CheckBox_IsStatic.selected = inputValues.mIsStatic;
            CheckBox_IsBullet.selected = inputValues.mIsBullet;
            CheckBox_IsSensor.selected = inputValues.mIsSensor;
            CheckBox_Hollow.selected = inputValues.mIsHollow;
            CheckBox_BuildBorder.selected = inputValues.mBuildBorder;
            CheckBox_AllowSleeping.selected = inputValues.mAllowSleeping;
            CheckBox_FixRotation.selected = inputValues.mFixRotation;
            
            Text_Density.text = inputValues.mDensity;
            
            Text_InitialVelocityMagnitude.text = inputValues.mLinearVelocityMagnitude;
            Text_InitialVelocityAngle.text = inputValues.mLinearVelocityAngle;
            Text_InitialAngularVelocity.text = inputValues.mAngularVelocity;
            
            //Text_LinearDamping.text = inputValues.mLinearDamping;
            //Text_AngularDamping.text = inputValues.mAngularDamping;
            Text_Friction.text = inputValues.mFriction;
            Text_Restitution.text = inputValues.mRestitution;
            
            SelectList_CollisionCategory.dataProvider = mInputValues.mCollisionCategoryListDataProvider;
            SelectList_CollisionCategory.selectedIndex = mInputValues.mCollisionCategoryListSelectedIndex;
            
            OnUpdateComponents ();
         }
         
         public function GetValues (returnValues:Object):void
         {
            returnValues.mIsPhysicsEnabled = CheckBox_EnablePhysics.selected;
            returnValues.mIsStatic = CheckBox_IsStatic.selected;
            returnValues.mIsBullet = CheckBox_IsBullet.selected;
            returnValues.mIsSensor = CheckBox_IsSensor.selected;
            returnValues.mIsHollow = CheckBox_Hollow.selected;
            returnValues.mBuildBorder = CheckBox_BuildBorder.selected;
            returnValues.mAllowSleeping = CheckBox_AllowSleeping.selected;
            returnValues.mFixRotation = CheckBox_FixRotation.selected;
            
            var density:Number = parseFloat (Text_Density.text);
            if ( ! isNaN (density) )
               returnValues.mDensity = density;
            else
               returnValues.mDensity = mInputValues.mDensity;
            
            var linearSpeed:Number = parseFloat (Text_InitialVelocityMagnitude.text);
            if ( ! isNaN (linearSpeed) )
               returnValues.mLinearVelocityMagnitude = linearSpeed;
            else
               returnValues.mLinearVelocityMagnitude = mInputValues.mLinearVelocityMagnitude;
            
            var linearVelocityAngle:Number = parseFloat (Text_InitialVelocityAngle.text);
            if ( ! isNaN (linearVelocityAngle) )
               returnValues.mLinearVelocityAngle = linearVelocityAngle;
            else
               returnValues.mLinearVelocityAngle = mInputValues.mLinearVelocityAngle;
            
            var angularVelocity:Number = parseFloat (Text_InitialAngularVelocity.text);
            if ( ! isNaN (angularVelocity) )
               returnValues.mAngularVelocity = angularVelocity;
            else
               returnValues.mAngularVelocity = mInputValues.mAngularVelocity;
            
            //var linearDamping:Number = parseFloat (Text_LinearDamping.text);
            //if ( ! isNaN (linearDamping) )
            //   returnValues.mLinearDamping = linearDamping;
            //else
            //   returnValues.mLinearDamping = mInputValues.mLinearDamping;
            
            //var angularDamping:Number = parseFloat (Text_AngularDamping.text);
            //if ( ! isNaN (angularDamping) )
            //   returnValues.mAngularDamping = angularDamping;
            //else
            //   returnValues.mAngularDamping = mInputValues.mAngularDamping;
            
            var friction:Number = parseFloat (Text_Friction.text);
            if ( ! isNaN (friction) )
               returnValues.mFriction = friction;
            else
               returnValues.mFriction = mInputValues.mFriction;
            
            var restitution:Number = parseFloat (Text_Restitution.text);
            if ( ! isNaN (restitution) )
               returnValues.mRestitution = restitution;
            else
               returnValues.mRestitution = mInputValues.mRestitution;
            
            returnValues.mCollisionCategoryIndex = SelectList_CollisionCategory.selectedItem.mCategoryIndex;
         }
         
         // temp functionsg
         public function SetMustEnablePhysics ():void
         {
            CheckBox_EnablePhysics.enabled = false;
         }
         
     ]]>
   </mx:Script>

</mx:VBox>
