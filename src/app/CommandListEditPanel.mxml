<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component. 
     You cannot run it independently. -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
      borderStyle="solid" borderThickness="0"
      width="100%" height="100%"
      creationComplete="OnInitPanel()"
      >

   <mx:HBox width="100%">
      <mx:VBox id="Box_Commands" width="186">
         <mx:HBox width="100%">
            <mx:Button id="Button_AddCommmand" click="OnNewCalling ()" toolTip="Add Command" focusEnabled="false" fontSize="8" left="5" top="5" width="30" height="30" toggle="false" cornerRadius="0" icon="@Embed('res/action/command_add.png')" disabledIcon="@Embed('res/action/command_add-disabled.png')" />
            <mx:Button id="Button_DeleteCommmand" click="OnDeleteCalling ()" toolTip="Delete Command" focusEnabled="false" fontSize="8" left="5" top="5" width="30" height="30" toggle="false" cornerRadius="0" icon="@Embed('res/action/command_delete.png')" disabledIcon="@Embed('res/action/command_delete-disabled.png')" />
            <mx:Button id="Button_MoveUpCommmand" click="OnMoveCallingUp ()" toolTip="Move Up" focusEnabled="false" fontSize="8" left="5" top="5" width="30" height="30" toggle="false" cornerRadius="0" icon="@Embed('res/action/command_moveup.png')" disabledIcon="@Embed('res/action/command_moveup-disabled.png')" />
            <mx:Button id="Button_MoveDownCommmand" click="OnMoveCallingDown ()" toolTip="Move Down" focusEnabled="false" fontSize="8" left="5" top="5" width="30" height="30" toggle="false" cornerRadius="0" icon="@Embed('res/action/command_movedown.png')" disabledIcon="@Embed('res/action/command_movedown-disabled.png')" />
            <mx:Button id="Button_ToggleIsCondition" click="OnToggleIsCondition ()" toolTip="Toggle Condition" focusEnabled="false" fontSize="8" left="5" top="5" width="30" height="30" toggle="false" cornerRadius="0" icon="@Embed('res/action/condition_toogle.png')" disabledIcon="@Embed('res/action/condition_toogle-disabled.png')" />
         </mx:HBox>
         <mx:List id="List_Commands" dataProvider="{mCommandListDataProvider}" labelField="mName" width="100%" height="100%" editable="false" change="OnCurrentCommandChanged ()" />
      </mx:VBox>
      <mx:ViewStack borderStyle="solid" width="309" height="100%">
         <mx:Form label="Parameters" id="Box_ParamsAndReturns" width="100%" horizontalScrollPolicy="off" autoLayout="true" labelWidth="118">
         </mx:Form>
      </mx:ViewStack>
      <!--
      <mx:HBox id="Box_ParamsAndReturns" width="100%">
         <mx:VBox id="Box_ParamNames" width="200">

         </mx:VBox>
         <mx:VBox id="Box_ParamValues" width="200">

         </mx:VBox>
      </mx:HBox>
      -->
   </mx:HBox>

   <mx:Script>
      <![CDATA[       
         
         import flash.geom.Point;
         
         import flash.events.ContextMenuEvent;
         import flash.ui.ContextMenu;
         import flash.ui.ContextMenuItem;
         
         import mx.events.MenuEvent;
         import mx.controls.Menu;
         import mx.events.ListEvent;
         import mx.controls.Alert;
         
         import mx.containers.HBox;
         import mx.controls.Label;
         import mx.controls.Spacer;
         import mx.core.UIComponent;
         import mx.containers.FormItem;
         import mx.core.Container;
         
         import common.Define;
         import common.trigger.ValueTypeDefine;
         import common.trigger.ValueSpaceTypeDefine;
         import common.trigger.ValueSourceTypeDefine;
         
         import com.tapirgames.util.TextUtil;
         
         import editor.trigger.TriggerEngine;
         import editor.trigger.FunctionDeclaration;
         import editor.trigger.FunctionDeclaration_EventHandler;
         import editor.trigger.FunctionDefinition
         import editor.trigger.VariableDefinition;
         import editor.trigger.CodeSnippet;
         import editor.trigger.CommandListDefinition;
         import editor.trigger.ConditionListDefinition;
         import editor.trigger.FunctionCalling;
         import editor.trigger.ValueSource;
         import editor.trigger.ValueSource_Direct;
         import editor.trigger.ValueSource_Variable;
         //import editor.trigger.ValueSource_Property;
         //import editor.trigger.ValueSource_Property_OwnerVariable;
         import editor.trigger.ValueTarget;
         import editor.trigger.ValueTarget_Null;
         import editor.trigger.ValueTarget_Variable;
         import editor.trigger.VariableSpace;
         import editor.trigger.VariableSpaceInput;
         import editor.trigger.VariableSpaceReturn;
         import editor.trigger.VariableSpaceGlobal;
         import editor.trigger.VariableSpaceLocal;
         import editor.trigger.VariableSpaceRegister;
         
         private var mInputValues:Object;
         
         private var mCodeSnippet:CodeSnippet = null;
         private var mCommandListDefinition:CommandListDefinition = null;
         private var mConditionListDefinition:ConditionListDefinition = null;
         
         private var mCurrentEditingItem:Object = null;
         
         public var SetInvertCallingResultCheckBoxVisible:Function = null;
         public var SetInvertCallingResultCheckBoxSelected:Function = null;
         public var IsInvertCallingResultCheckBoxSelected:Function = null;
         
         [Bindable]
         private var mCommandListDataProvider:Object = [];
         
         private function OnInitPanel ():void
         {
         }
         
         public function SetCommandListDefinition (listDef:CommandListDefinition):void
         {
            mCodeSnippet = listDef;
            mCommandListDefinition = listDef;
            Button_ToggleIsCondition.visible = false;
            Initialize ();
         }
         
         public function SetConditionListDefinition (listDef:ConditionListDefinition):void
         {
            mCodeSnippet = listDef;
            mConditionListDefinition = listDef;
            
            Initialize ();
         }
         
         public function GetValues (params:Object):void
         {
            GetFunctionCallingsAndTheirProperties (params);
         }
         
         private function Initialize ():void
         {
            if (mCodeSnippet == null)
               return;
            
            var i:int;
            var j:int;
            var func_calling:FunctionCalling;
            var func_declaration:FunctionDeclaration;
            var value_source:ValueSource;
            var value_target:ValueTarget;
            
            for (i = 0; i < mCodeSnippet.GetNumFunctionCallings (); ++ i)
            {
               func_calling = mCodeSnippet.GetFunctionCallingAt (i);
               func_declaration = func_calling.GetFunctionDeclaration ();
               
               var func_name:String = func_declaration.GetName ();
               var func_id:int = func_declaration.GetID ();
               var initialValueSources:Array = new Array ();
               var currentValueSources:Array = new Array ();
               var initialReturnTargets:Array = new Array ();
               var currentReturnTargets:Array = new Array ();
               
               for (j = 0; j < func_declaration.GetNumInputs (); ++ j)
               {
                  value_source = func_calling.GetInputValueSource (j);
                  
                  initialValueSources.push (value_source.CloneSource ());
                  currentValueSources.push (value_source.CloneSource ());
               }
               
               for (j = 0; j < func_declaration.GetNumReturns (); ++ j)
               {
                  value_target = func_calling.GetReturnValueTarget (j);
                  
                  initialReturnTargets.push (value_target.CloneTarget ());
                  currentReturnTargets.push (value_target.CloneTarget ());
               }
               
               if (mConditionListDefinition != null)
               {
                  var is_condition:Boolean = mConditionListDefinition.IsConditionCalling (i); // temp, if is bool function
                  if (! is_condition)
                     func_name = "   " + func_name;
                  var result_inverted:Boolean = mConditionListDefinition.IsConditionResultInverted (i);
                  List_Commands.dataProvider.addItemAt ({mName:func_name, mID:func_id, 
                                                         mInitialValueSources:initialValueSources, mCurrentValueSources:currentValueSources, 
                                                         mInitialValueTargets:initialReturnTargets, mCurrentValueTargets:currentReturnTargets, 
                                                         mConditionResultInverted:result_inverted, mIsConditionCalling:is_condition
                                                         },
                                                         i);
               }
               else
               {
                  List_Commands.dataProvider.addItemAt ({mName:func_name, mID:func_id, 
                                                         mInitialValueSources:initialValueSources, mCurrentValueSources:currentValueSources,
                                                         mInitialValueTargets:initialReturnTargets, mCurrentValueTargets:currentReturnTargets
                                                         },
                                                         i);
               }
            }
            
            if (mCodeSnippet.GetNumFunctionCallings () > 0)
            {
               List_Commands.selectedIndex = 0;
               OnCurrentCommandChanged ();
            }
            
            UpdateInterface ();
         }
         
         public function GetFunctionCallingsAndTheirProperties (params:Object):void
         {
            RetrieveCurrentCommandValueSourcesFromControls ();
            
            var func_calling_list:Array = new Array ();
            
            var result_inverteds:Array = new Array ();
            var is_conditions:Array = new Array ();
            
            var i:int;
            var j:int;
            var item_array:Array = List_Commands.dataProvider.toArray ();
            for (i = 0; i < item_array.length; ++ i)
            {
               var item:Object = item_array [i];
               
               var func_id:int = item.mID;
               var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
               var func_calling:FunctionCalling = new FunctionCalling (func_declaration);
               func_calling.SetInputValueSources (item.mCurrentValueSources)
               func_calling.SetReturnValueTargets (item.mCurrentValueTargets)
               
               func_calling_list.push (func_calling);
               
               if (mConditionListDefinition != null)
               {
                  is_conditions.push (item.mIsConditionCalling);
                  result_inverteds.push (item.mConditionResultInverted);
               }
            }
            
            if (mConditionListDefinition != null)
            {
               params.mReturnFunctionCallings_ConditionList = func_calling_list;
               params.mReturnIsConditionCallings = is_conditions;
               params.mReturnConditionResultInverteds = result_inverteds;
            }
            else
            {
               params.mReturnFunctionCallings_CommandList = func_calling_list;
            }
         }
         
         private function OnNewCalling ():void
         {
            var myMenuData:XML;
            
            if (mConditionListDefinition != null)
               myMenuData = TriggerEngine.GetPlayerConditionFunctionsMenuItemXML ();
            else
               myMenuData = TriggerEngine.GetPlayerCommandFunctionsMenuItemXML ();
               
            var myMenu:Menu= Menu.createMenu(Button_AddCommmand, myMenuData, false);
            myMenu.labelField="@name"
            myMenu.addEventListener("itemClick", OnNewCommandMenuItemClicked);
            
            // Calculate position of Menu in Application's coordinates. 
            var point:Point = new Point (0, Button_AddCommmand.height);
            point=Button_AddCommmand.localToGlobal(point);
            
            myMenu.show(point.x, point.y);
         }
         
         private function OnNewCommandMenuItemClicked(event:MenuEvent):void
         {
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (event.item.@id);
            
            if (func_declaration == null)
               return;
            
            var func_id:int = func_declaration.GetID ();
            var func_name:String = func_declaration.GetName ();
            var initialValueSources:Array = new Array ();
            var currentValueSources:Array = new Array ();
            var initialReturnTargets:Array = new Array ();
            var currentReturnTargets:Array = new Array ();
            
            var variable_def:VariableDefinition;
            var j:int;
            
            var value_source:ValueSource;
            
            for (j = 0; j < func_declaration.GetNumInputs (); ++ j)
            {
               variable_def = func_declaration.GetParamDefinitionAt (j);
               value_source = variable_def.GetDefaultValueSource ();
               initialValueSources.push (value_source.CloneSource ());
               currentValueSources.push (value_source.CloneSource ());
            }
            
            var value_target:ValueTarget;
            
            for (j = 0; j < func_declaration.GetNumReturns (); ++ j)
            {
               variable_def = func_declaration.GetReturnDefinitionAt (j);
               value_target = variable_def.GetDefaultValueTarget ();
               initialReturnTargets.push (value_target.CloneTarget ());
               currentReturnTargets.push (value_target.CloneTarget ());
            }
            
            var insert_index:int = List_Commands.selectedIndex + 1;
            
            if (mConditionListDefinition != null)
            {
               var is_condition:Boolean = func_declaration.GetNumReturns () == 1 && func_declaration.GetReturnValueType (0) == ValueTypeDefine.ValueType_Boolean;
               if (!is_condition)
                  func_name = "   " + func_name;
               List_Commands.dataProvider.addItemAt ({mName:func_name, mID:func_id, 
                                                      mInitialValueSources:initialValueSources, mCurrentValueSources:currentValueSources, 
                                                      mInitialValueTargets:initialReturnTargets, mCurrentValueTargets:currentReturnTargets, 
                                                      mConditionResultInverted:false, mIsConditionCalling:is_condition
                                                      }, 
                                                      insert_index);
            }
            else
            {
               List_Commands.dataProvider.addItemAt ({mName:func_name, mID:func_id, 
                                                      mInitialValueSources:initialValueSources, mCurrentValueSources:currentValueSources, 
                                                      mInitialValueTargets:initialReturnTargets, mCurrentValueTargets:currentReturnTargets
                                                      }, 
                                                      insert_index);
            }
            
            List_Commands.selectedIndex = insert_index;
            
            OnCurrentCommandChanged ();
            
            UpdateInterface ();
         }
         
         private function OnDeleteCalling ():void
         {
            if (List_Commands.selectedIndex >= 0)
            {
               var index:int = List_Commands.selectedIndex;
               
               List_Commands.dataProvider.removeItemAt (index);
               mCurrentEditingItem = null;
               
               if (index >= List_Commands.dataProvider.length)
                  -- index;
               
               if (index >= 0)
                  List_Commands.selectedItem = List_Commands.dataProvider.getItemAt (index);
               
               OnCurrentCommandChanged ();
               
               UpdateInterface ();
            }
         }
         
         private function OnMoveCallingUp ():void
         {
            if (List_Commands.selectedIndex >= 1)
            {
               var index:int = List_Commands.selectedIndex;
               
               var item:Object = List_Commands.dataProvider.setItemAt (List_Commands.dataProvider.getItemAt (index), index - 1);
               List_Commands.dataProvider.setItemAt (item, index);
               
               List_Commands.selectedItem = List_Commands.dataProvider.getItemAt (index - 1);
               
               UpdateInterface ();
            }
         }
         
         private function OnMoveCallingDown ():void
         {
            if (List_Commands.selectedIndex >= 0 && List_Commands.selectedIndex < List_Commands.dataProvider.length - 1)
            {
               var index:int = List_Commands.selectedIndex;
               
               var item:Object = List_Commands.dataProvider.setItemAt (List_Commands.dataProvider.getItemAt (index), index + 1);
               List_Commands.dataProvider.setItemAt (item, index);
               
               List_Commands.selectedItem = List_Commands.dataProvider.getItemAt (index + 1);
               
               UpdateInterface ();
            }
         }
         
         private function OnToggleIsCondition ():void
         {
            if (mConditionListDefinition != null && mCurrentEditingItem != null)
            {
               if (true) // if is bool function
               {
                  mCurrentEditingItem.mIsConditionCalling = ! mCurrentEditingItem.mIsConditionCalling;
                  
                  var old_func_name:String = List_Commands.dataProvider.getItemAt (List_Commands.selectedIndex).mName;
                  
                  var new_func_name:String = TextUtil.TrimString (old_func_name);;
                  if (! mCurrentEditingItem.mIsConditionCalling)
                     new_func_name = "   " + new_func_name;
                  
                  List_Commands.dataProvider.getItemAt (List_Commands.selectedIndex).mName = new_func_name;
                  
                  List_Commands.dataProvider.itemUpdated ( List_Commands.dataProvider.getItemAt (List_Commands.selectedIndex), "mName");//, old_func_name, new_func_name);
                  
                  UpdateInterface2 ();
               }
            }
            
         }
         
         private function UpdateInterface2 ():void
         {
            if (mConditionListDefinition != null)
            {
               if (mCurrentEditingItem == null)
               {
                  SetInvertCallingResultCheckBoxVisible (false);
                  SetInvertCallingResultCheckBoxSelected (false);
               }
               else
               {
                  if (mCurrentEditingItem.mIsConditionCalling)
                  {
                     SetInvertCallingResultCheckBoxVisible (true);
                     SetInvertCallingResultCheckBoxSelected (mCurrentEditingItem.mConditionResultInverted);
                  }
                  else
                  {
                     SetInvertCallingResultCheckBoxVisible (false);
                     SetInvertCallingResultCheckBoxSelected (false);
                  }
                  
                  var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
                  Button_ToggleIsCondition.enabled = func_declaration.GetNumReturns () == 1 && func_declaration.GetReturnValueType (0) == ValueTypeDefine.ValueType_Boolean;
               }
            }
            else
            {
               Button_ToggleIsCondition.enabled = false;
            }
         }
         
         private function UpdateInterface ():void
         {
            Button_DeleteCommmand.enabled = List_Commands.selectedIndex >= 0;
            Button_MoveUpCommmand.enabled = List_Commands.selectedIndex >= 1;
            Button_MoveDownCommmand.enabled = List_Commands.selectedIndex >= 0 && List_Commands.selectedIndex < List_Commands.dataProvider.length - 1;
            
            UpdateInterface2 ();
         }
         
         private function OnCurrentCommandChanged ():void
         {
            RetrieveCurrentCommandValueSourcesFromControls ();
            mCurrentEditingItem = null;
            
            while (Box_ParamsAndReturns.numChildren > 0)
               Box_ParamsAndReturns.removeChildAt (0);
            
         //===========================
         // ...
         //===========================
            
            if (List_Commands.selectedItem == null)
               return;
            
            mCurrentEditingItem = List_Commands.selectedItem;
            var func_id:int = mCurrentEditingItem.mID;
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
            var currentValueSources:Array = mCurrentEditingItem.mCurrentValueSources;
            var currentValueTargets:Array = mCurrentEditingItem.mCurrentValueTargets;
            
            UpdateInterface ();
            
         //===========================
         // create new controls
         //===========================
            
            var source_form_items:Array = new Array ();
            var source_value_controls:Array = new Array ();
            var target_form_items:Array = new Array ();
            var target_value_controls:Array = new Array ();
            mCurrentEditingItem.mValueSourceParentControls = source_form_items;
            mCurrentEditingItem.mValueSourceControls = source_value_controls;
            mCurrentEditingItem.mValueTargetParentControls = target_form_items;
            mCurrentEditingItem.mValueTargetControls = target_value_controls;
            
            var block_title:Label;
            var title_box:HBox;
            
            if (func_declaration.GetNumInputs () > 0)
            {
               title_box = new HBox ();
               title_box.percentWidth = 100;
               title_box.setStyle ("backgroundColor", 0x7FCEFF);
               
               block_title = new Label ();
               block_title.text = func_declaration.GetNumInputs () == 1 ? "Parameter (Input):" : "Parameters (Inputs):";
               block_title.setStyle ("fontWeight", "bold");
               
               title_box.addChild (block_title);
               Box_ParamsAndReturns.addChild (title_box);
            }
            
            var variable_def:VariableDefinition;
            var j:int;
            var form_item:FormItem;
            
            var value_source:ValueSource;
            
            for (j = 0; j < func_declaration.GetNumInputs (); ++ j)
            {
               value_source = currentValueSources [j];
               
               variable_def = func_declaration.GetParamDefinitionAt (j);
               
               form_item = new FormItem ();
               //form_item.percentWidth = 100;
               form_item.width = 266;
               form_item.maxWidth = 266;
               form_item.horizontalScrollPolicy = "off";
               form_item.label = variable_def.GetName () + ":";
               form_item.toolTip = "hi hi";
               
               //form_item.addEventListener (MouseEvent.CLICK, OnParamLabelClick);
               source_form_items.push (form_item);
               
               CreateValueSourceControl (j, form_item, source_value_controls);
               
               Box_ParamsAndReturns.addChild (form_item);
               
               BuildContextMenuForValueSource (form_item, variable_def, value_source);
            }
            
            if (func_declaration.GetNumReturns () > 0)
            {
               title_box = new HBox ();
               title_box.percentWidth = 100;
               title_box.setStyle ("backgroundColor", 0x7FCEFF);
               
               block_title = new Label ();
               block_title.text = func_declaration.GetNumReturns () == 1 ? "Return (Output):" : "Returns (Outputs):";
               block_title.setStyle ("fontWeight", "bold");
               
               title_box.addChild (block_title);
               Box_ParamsAndReturns.addChild (title_box);
            }
            
            var value_target:ValueTarget;
            for (j = 0; j < func_declaration.GetNumReturns (); ++ j)
            {
               value_target = currentValueTargets [j];
               
               variable_def = func_declaration.GetReturnDefinitionAt (j);
               
               form_item = new FormItem ();
               //form_item.percentWidth = 100;
               form_item.width = 266;
               form_item.maxWidth = 266;
               form_item.horizontalScrollPolicy = "off";
               form_item.label = variable_def.GetName () + ":";
               form_item.toolTip = "hi hi";
               
               //form_item.addEventListener (MouseEvent.CLICK, OnParamLabelClick);
               target_form_items.push (form_item);
               
               CreateValueTargetControl (j, form_item, target_value_controls);
               
               Box_ParamsAndReturns.addChild (form_item);
               
               BuildContextMenuForValueTarget (form_item, variable_def, value_target);
            }
         }
         
         private function CreateValueSourceControl (inputId:int, parentContainer:Container, valueControls:Array):UIComponent
         {
            var func_id:int = mCurrentEditingItem.mID;
            var currentValueSources:Array = mCurrentEditingItem.mCurrentValueSources;
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
            
            if (valueControls [inputId] != null)
            {
               parentContainer.removeChild (valueControls [inputId]);
               valueControls [inputId] = null;
            }
            
            var variable_def:VariableDefinition = func_declaration.GetParamDefinitionAt (inputId);
            var value_source:ValueSource = currentValueSources [inputId];
            
            var value_control:UIComponent = null;
            if (value_source is ValueSource_Direct)
               value_control = variable_def.CreateControlForDirectValueSource (value_source as ValueSource_Direct);
            else if (value_source is ValueSource_Variable)
               value_control = variable_def.CreateControlForVariableValueSource (value_source as ValueSource_Variable)
            
            if (value_control != null)
            {
               //value_control.percentWidth = 100;
               value_control.width = 133;
               value_control.maxWidth = 133;
               
               valueControls [inputId] = value_control;
               
               parentContainer.addChild (value_control);
            }
            
            return value_control;
         }
         
         private function CreateValueTargetControl (returnId:int, parentContainer:Container, valueControls:Array):UIComponent
         {
            var func_id:int = mCurrentEditingItem.mID;
            var currentValueTargets:Array = mCurrentEditingItem.mCurrentValueTargets;
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
            
            if (valueControls [returnId] != null)
            {
               parentContainer.removeChild (valueControls [returnId]);
               valueControls [returnId] = null;
            }
            
            var variable_def:VariableDefinition = func_declaration.GetReturnDefinitionAt (returnId);
            var value_target:ValueTarget= currentValueTargets [returnId];
            
            var value_control:UIComponent = null;
            if (value_target is ValueTarget_Null)
               value_control = variable_def.CreateControlForNullValueTarget (value_target as ValueTarget_Null);
            else if (value_target is ValueTarget_Variable)
               value_control = variable_def.CreateControlForVariableValueTarget (value_target as ValueTarget_Variable)
            
            if (value_control != null)
            {
               //value_control.percentWidth = 100;
               value_control.width = 133;
               value_control.maxWidth = 133;
               
               valueControls [returnId] = value_control;
               
               parentContainer.addChild (value_control);
            }
            
            return value_control;
         }
         
         private function RetrieveCurrentCommandValueSourcesFromControls ():void
         {
            if (mCurrentEditingItem == null)
               return;
            
            if (mConditionListDefinition != null)
            {
               mCurrentEditingItem.mConditionResultInverted = IsInvertCallingResultCheckBoxSelected ();
               //mCurrentEditingItem.mIsConditionCalling
            }
            
            var func_id:int = mCurrentEditingItem.mID;
            var currentValueSources:Array = mCurrentEditingItem.mCurrentValueSources;
            var source_value_controls:Array = mCurrentEditingItem.mValueSourceControls;
            var currentReturnTargets:Array = mCurrentEditingItem.mCurrentValueTargets;
            var target_value_controls:Array = mCurrentEditingItem.mValueTargetControls;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
            
            var variable_def:VariableDefinition;
            var j:int;
            
            var value_source:ValueSource;
            var source_control:UIComponent;
            
            for (j = 0; j < func_declaration.GetNumInputs (); ++ j)
            {
               value_source = currentValueSources [j];
               source_control = source_value_controls [j];
               variable_def = func_declaration.GetParamDefinitionAt (j);
               
               if (value_source is ValueSource_Direct)
                  variable_def.RetrieveDirectValueSourceFromControl (value_source as ValueSource_Direct, source_control);
               else if (value_source is ValueSource_Variable)
                  variable_def.RetrieveVariableValueSourceFromControl (value_source as ValueSource_Variable, source_control);
               else
                  trace ("? unknow source type");
            }
            
            var value_target:ValueTarget;
            var target_control:UIComponent;
            
            for (j = 0; j < func_declaration.GetNumReturns (); ++ j)
            {
               value_target = currentReturnTargets [j];
               target_control = target_value_controls [j];
               variable_def = func_declaration.GetReturnDefinitionAt (j);
               
               if (value_target is ValueTarget_Null)
                  variable_def.RetrieveNullValueTargetFromControl (value_target as ValueTarget_Null, target_control);
               else if (value_target is ValueTarget_Variable)
                  variable_def.RetrieveVariableValueTargetFromControl (value_target as ValueTarget_Variable, target_control);
               else
                  trace ("? unknow target type");
            }
         }
         
         private function AppendContextMenuItem (sprite:InteractiveObject, caption:String, selectedListener:Function, addSaperator:Boolean = false, isEnabled:Boolean = true):void
         {
            if (sprite.contextMenu == null)
            {
               sprite.contextMenu = new ContextMenu ();
               sprite.contextMenu.hideBuiltInItems ();
            }
            
            var menuItem:ContextMenuItem = new ContextMenuItem(caption, addSaperator);
            menuItem.enabled = isEnabled;
            if (selectedListener != null)
               menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, selectedListener);
            sprite.contextMenu.customItems.push (menuItem);
         }
         
   //================================================================================================
   // switch value source types
   //================================================================================================
         
         private function BuildContextMenuForValueSource (sprite:InteractiveObject, variableDefinition:VariableDefinition, valueSource:ValueSource):void
         {
            if (sprite.contextMenu == null)
            {
               sprite.contextMenu = new ContextMenu ();
               sprite.contextMenu.hideBuiltInItems ();
            }
            else
            {
               sprite.contextMenu.customItems.splice (0, sprite.contextMenu.customItems.length);
            }
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var inputVariableSpae:VariableSpaceInput = ownerFuncDefinition.GetInputVariableSpace ();
            var returnVariableSpae:VariableSpaceReturn = ownerFuncDefinition.GetReturnVariableSpace ();
            
            var value_type:int = variableDefinition.GetValueType ();
            var space_type:int = (valueSource is ValueSource_Variable) ? (valueSource as ValueSource_Variable).GetVariableInstance ().GetSpaceType () : ValueSpaceTypeDefine.ValueSpace_Void;
            
            AppendContextMenuItem (sprite, "Default", OnSetValueSourceDefault, false);
            AppendContextMenuItem (sprite, "Reset", OnResetValueSource, false);
            
            AppendContextMenuItem (sprite, "from Direct Value", OnSelectValueSource_Direct, true, space_type != ValueSpaceTypeDefine.ValueSpace_Void);
            
            if (inputVariableSpae.HasVariablesWithValueType (value_type))
               AppendContextMenuItem (sprite, "from Input Variable", OnSelectValueSource_InputVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_Input);
            
            if (returnVariableSpae.HasVariablesWithValueType (value_type))
               AppendContextMenuItem (sprite, "from Return Variable", OnSelectValueSource_ReturnVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_Return);
            
            //AppendContextMenuItem (sprite, "from Local Variable", null, false, space_type != ValueSpaceTypeDefine.ValueSpace_Local);
            //AppendContextMenuItem (sprite, "from Global Variable", null, false), space_type != ValueSpaceTypeDefine.ValueSpace_Global;
            
            AppendContextMenuItem (sprite, "from Register Variable", OnSelectValueSource_RegisterVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_GlobalRegister);
         }
         
         private function OnSetValueSourceDefault (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetParamDefinitionAt (param_index);
            var new_value_source:ValueSource = variable_def.GetDefaultValueSource ();
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
        }
         
         private function OnResetValueSource (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetParamDefinitionAt (param_index);
            var new_value_source:ValueSource = mCurrentEditingItem.mInitialValueSources [param_index];
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
        }
         
         private function OnSelectValueSource_Direct (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetParamDefinitionAt (param_index);
            var new_value_source:ValueSource = variable_def.GetDefaultDirectValueSource ();
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
        }
         
         private function OnSelectValueSource_InputVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetParamDefinitionAt (param_index);
            var new_value_source:ValueSource = variable_def.GetDefaultVariableValueSource (ownerFuncDefinition.GetInputVariableSpace ());
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
         }
         
         private function OnSelectValueSource_ReturnVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetParamDefinitionAt (param_index);
            var new_value_source:ValueSource = variable_def.GetDefaultVariableValueSource (ownerFuncDefinition.GetReturnVariableSpace ());
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
         }
         
         private function OnSelectValueSource_RegisterVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var param_index:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetParamDefinitionAt (param_index);
            var new_value_source:ValueSource = variable_def.GetDefaultVariableValueSource (TriggerEngine.GetRegisterVariableSpace (variable_def.GetValueType()));
            
            mCurrentEditingItem.mCurrentValueSources [param_index] = new_value_source;
            CreateValueSourceControl (param_index, form_item, mCurrentEditingItem.mValueSourceControls);
            BuildContextMenuForValueSource (form_item, variable_def, new_value_source);
         }
         
   //================================================================================================
   // switch value target types
   //================================================================================================
         
         private function BuildContextMenuForValueTarget (sprite:InteractiveObject, variableDefinition:VariableDefinition, valueTarget:ValueTarget):void
         {
            if (sprite.contextMenu == null)
            {
               sprite.contextMenu = new ContextMenu ();
               sprite.contextMenu.hideBuiltInItems ();
            }
            else
            {
               sprite.contextMenu.customItems.splice (0, sprite.contextMenu.customItems.length);
            }
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var inputVariableSpae:VariableSpaceInput = ownerFuncDefinition.GetInputVariableSpace ();
            var returnVariableSpae:VariableSpaceReturn = ownerFuncDefinition.GetReturnVariableSpace ();
            
            var value_type:int = variableDefinition.GetValueType ();
            var space_type:int = (valueTarget is ValueTarget_Variable) ? (valueTarget as ValueTarget_Variable).GetVariableInstance ().GetSpaceType () : ValueSpaceTypeDefine.ValueSpace_Void;
            
            AppendContextMenuItem (sprite, "Reset", OnResetValueTarge, false);
            
            AppendContextMenuItem (sprite, "to Nothing", OnSelectValueTarget_Null, true, space_type != ValueSpaceTypeDefine.ValueSpace_Void);
            
            if (inputVariableSpae.HasVariablesWithValueType (value_type))
               AppendContextMenuItem (sprite, "to Input Variable", OnSelectValueTarget_InputVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_Input);
            
            if (returnVariableSpae.HasVariablesWithValueType (value_type))
               AppendContextMenuItem (sprite, "to Return Variable", OnSelectValueTarget_ReturnVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_Return);
            
            //AppendContextMenuItem (sprite, "to Local Variable", null, false, space_type != ValueSpaceTypeDefine.ValueSpace_Local);
            //AppendContextMenuItem (sprite, "to Global Variable", null, false), space_type != ValueSpaceTypeDefine.ValueSpace_Global;
            
            AppendContextMenuItem (sprite, "to Register Variable", OnSelectValueTarget_RegisterVariable, false, space_type != ValueSpaceTypeDefine.ValueSpace_GlobalRegister);
         }
         
         private function OnResetValueTarge (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var return_index:int = mCurrentEditingItem.mValueTargetParentControls.indexOf (form_item);
            if (return_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetReturnDefinitionAt (return_index);
            var new_value_target:ValueTarget = mCurrentEditingItem.mInitialValueTargets [return_index];
            
            mCurrentEditingItem.mCurrentValueTargets [return_index] = new_value_target;
            CreateValueTargetControl (return_index, form_item, mCurrentEditingItem.mValueTargetControls);
            BuildContextMenuForValueTarget (form_item, variable_def, new_value_target);
        }
        
         private function OnSelectValueTarget_Null (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var return_index:int = mCurrentEditingItem.mValueTargetParentControls.indexOf (form_item);
            if (return_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetReturnDefinitionAt (return_index);
            var new_value_target:ValueTarget = variable_def.GetDefaultNullValueTarget ();
            
            mCurrentEditingItem.mCurrentValueTargets [return_index] = new_value_target;
            CreateValueTargetControl (return_index, form_item, mCurrentEditingItem.mValueTargetControls);
            BuildContextMenuForValueTarget (form_item, variable_def, new_value_target);
        }
         
         private function OnSelectValueTarget_InputVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var return_index:int = mCurrentEditingItem.mValueTargetParentControls.indexOf (form_item);
            if (return_index < 0)
               return;
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetReturnDefinitionAt (return_index);
            var new_value_target:ValueTarget = variable_def.GetDefaultVariableValueTarget (ownerFuncDefinition.GetInputVariableSpace ());
            
            mCurrentEditingItem.mCurrentValueTargets [return_index] = new_value_target;
            CreateValueTargetControl (return_index, form_item, mCurrentEditingItem.mValueTargetControls);
            BuildContextMenuForValueTarget (form_item, variable_def, new_value_target);
         }
         
         private function OnSelectValueTarget_ReturnVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var return_index:int = mCurrentEditingItem.mValueTargetParentControls.indexOf (form_item);
            if (return_index < 0)
               return;
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetReturnDefinitionAt (return_index);
            var new_value_target:ValueTarget = variable_def.GetDefaultVariableValueTarget (ownerFuncDefinition.GetReturnVariableSpace ());
            
            mCurrentEditingItem.mCurrentValueTargets [return_index] = new_value_target;
            CreateValueTargetControl (return_index, form_item, mCurrentEditingItem.mValueTargetControls);
            BuildContextMenuForValueTarget (form_item, variable_def, new_value_target);
         }
         
         private function OnSelectValueTarget_RegisterVariable (event:ContextMenuEvent):void
         {
            var form_item:FormItem = event.contextMenuOwner as FormItem;
            if (form_item == null)
               return;
            
            if (mCurrentEditingItem == null)
               return;
            
            var return_index:int = mCurrentEditingItem.mValueTargetParentControls.indexOf (form_item);
            if (return_index < 0)
               return;
            
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (mCurrentEditingItem.mID);
            var variable_def:VariableDefinition = func_declaration.GetReturnDefinitionAt (return_index);
            var new_value_target:ValueTarget = variable_def.GetDefaultVariableValueTarget (TriggerEngine.GetRegisterVariableSpace (variable_def.GetValueType()));
            
            mCurrentEditingItem.mCurrentValueTargets [return_index] = new_value_target;
            CreateValueTargetControl (return_index, form_item, mCurrentEditingItem.mValueTargetControls);
            BuildContextMenuForValueTarget (form_item, variable_def, new_value_target);
         }
         
         /*
         private function OnParamLabelClick (event:MouseEvent):void
         {
            if (!event.ctrlKey && !event.shiftKey)
               return;
             
            var form_item:FormItem = event.currentTarget as FormItem;
            if (form_item == null)
               return;
            
            var param_id:int = mCurrentEditingItem.mValueSourceParentControls.indexOf (form_item);
            if (param_id < 0)
               return;
            
            var ownerFuncDefinition:FunctionDefinition = mCodeSnippet.GetOwnerFunctionDefinition ();
            
            var func_id:int = mCurrentEditingItem.mID;
            var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (func_id);
            
            var value_source:ValueSource = mCurrentEditingItem.mCurrentValueSources [param_id] as ValueSource;
            
            // create value source type select menu
            
            var data_provider:Array = new Array ();
            
            data_provider.push ({id:0, mParamId:param_id, label:"Reset"});
            data_provider.push ({id:1, mParamId:param_id, label:"Default"});
            data_provider.push (       {type:"separator"}          );
            data_provider.push ({id:2, mParamId:param_id, label:"Direct Value",   enabled:! (value_source is ValueSource_Direct)});
            data_provider.push ({id:3, mParamId:param_id, label:"Variable Value", enabled:! (value_source is ValueSource_Variable)});
            data_provider.push ({id:4, mParamId:param_id, label:"Property Value",  enabled:! (value_source is ValueSource_Property)});
            
            var myMenu:Menu= Menu.createMenu(Button_AddCommmand, data_provider, false);
            myMenu.labelField="label"
            myMenu.addEventListener("itemClick", OnParamLabelMenuItemClicked);
            
            myMenu.show(event.stageX, event.stageY);
            
            if (event.stageY + myMenu.height > stage.stageHeight)
               myMenu.y = stage.stageHeight - myMenu.height;
            if (event.stageX + myMenu.width > stage.stageWidth)
               myMenu.x = stage.stageWidth - myMenu.width;
         }
         
         private function OnSelectNewValueSource (event:MenuEvent):void
         {
            var id:int = event.item.id;
            var param_id:int = event.item.mParamId;
            
            switch (id)
            {
               case 0:
                  break;
               case 1:
                  break;
               case 2:
                  break;
               case 3:
                  break;
               case 4:
                  break;
               default:
                  break;
            }
            
            //var func_declaration:FunctionDeclaration = TriggerEngine.GetPlayerFunctionDeclarationById (event.item.@id);
            
         
         trace ("aaa " + e.currentTarget);
            var label:Label = e.currentTarget as Label;
         trace ("bbbb");
            var index:int = label.parent.getChildIndex (label) + 1;
         trace ("cccc");
            var uic:UIComponent = label.parent.getChildAt (index) as UIComponent;
         trace ("ddd");
            uic.height = 60;
            var label2:Label = new Label ();
            label2.text = "new";
            label.parent.removeChild (uic);
            label.parent.addChild (label2);
            label2.height = 60;
         trace ("eee");
         }
         */
         
   //=========================================================================================
   // 
   //=========================================================================================
         
     ]]>
   </mx:Script>

</mx:VBox>