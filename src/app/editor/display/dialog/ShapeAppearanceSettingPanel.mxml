<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component. 
     You cannot run it independently. -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ctl="editor.display.control.*"
      borderStyle="solid" borderThickness="0"
      width="100%" height="100%"
      creationComplete="OnInitPanel()"
      >

   <mx:HBox width="100%" id="Box_CiType">
      <mx:Spacer width="60"/>
      <mx:CheckBox id="CheckBox_IsCiShape" label="Is C.I. Shape" width="22%" click="OnCiTypeSelectListClick();"/>
      <mx:Label id="Label_AiType" text="C.I. Shape Type:" textAlign="right"/>
      <mx:ComboBox id="SelectList_AiType" rowCount="10" change="OnCiTypeSelectListClick ()"/>
   </mx:HBox>
   <mx:HRule strokeWidth="1" strokeColor="0xC0C0C0" width="100%"/>
   <mx:HBox width="100%">
      <mx:Spacer width="60"/>
      <mx:CheckBox id="CheckBox_DrawBackground" label="Filled" width="22%"/>
      <mx:Label id="Label_Opacity" text="Opacity:" textAlign="right"/>
      <mx:NumericStepper id="NumericStepper_Opacity" stepSize="1" minimum="0" maximum="100" value="100" width="80" />
      <mx:Label text="(0-100)" textAlign="left"/>
   </mx:HBox>

   <mx:HBox width="100%">
      <mx:Spacer width="60"/>
      <mx:Spacer width="22%"/>
      <mx:Label id="Label_BackgroundColor" text="Filled Color:" textAlign="right"/>
      <mx:ColorPicker id="ColorPicker_BackgroundColor" showTextField="true" selectedColor="0xFFFFFF"/>
      <mx:Label id="Label_BodyTexture" text=", Or Use Texture: " textAlign="right"/>
      <ctl:ModulePickButton id="Button_PickBodyTexture" label="Null" width="128" />
   </mx:HBox>

   <mx:HBox width="100%">
      <mx:Spacer width="60"/>
      <mx:CheckBox id="CheckBox_DrawBorder" label="Show Border" width="22%"/>
      <mx:Label id="Label_BorderColor" text="Border Color:" textAlign="right"/>
      <mx:ColorPicker id="ColorPicker_BorderColor" showTextField="true" selectedColor="0x000000"/>
   </mx:HBox>

   <mx:HBox width="100%">
      <mx:Spacer width="60"/>
      <mx:Spacer width="22%"/>
      <mx:Label id="Label_BorderThickness" text="Border Thickness:" textAlign="right"/>
      <mx:NumericStepper id="NumericStepper_BorderThickness" stepSize="1" minimum="0" maximum="255" value="1" width="80" />
      <mx:Label text="(pixels)" textAlign="left"/>
   </mx:HBox>

   <mx:HBox width="100%">
      <mx:Spacer width="60"/>
      <mx:Spacer width="22%"/>
      <mx:Label id="Label_BorderOpacity" text="Border Opacity:" textAlign="right"/>
      <mx:NumericStepper id="NumericStepper_BorderOpacity" stepSize="1" minimum="0" maximum="100" value="100" width="80" />
      <mx:Label text="(0-100)" textAlign="left"/>
   </mx:HBox>

   <mx:Script>
      <![CDATA[       
         
         import editor.world.DataUtil;
         import editor.world.Lists;

         import common.Define;
         
         private var mInputValues:Object;
         private var mOnCiTypeChanged:Function = null;
         
         private function OnInitPanel ():void
         {
            SelectList_AiType.dataProvider = DataUtil.GetListWithDataInLabel (Lists.mAiTypeList);
         }
         
         private function OnCiTypeSelectListClick ():void
         {
            if (CheckBox_IsCiShape.selected)
            {
               SelectList_AiType.enabled = true;
               Label_AiType.enabled = true;
               
               Label_Opacity.enabled = false;
               NumericStepper_Opacity.enabled = false;
               
               CheckBox_DrawBorder.enabled = true;
               
               //Label_BorderColor.enabled = false;
               //ColorPicker_BorderColor.enabled = false;
               
               CheckBox_DrawBackground.enabled = false;
               
               Label_BackgroundColor.enabled = false;
               ColorPicker_BackgroundColor.enabled = false;
               
               //Label_BorderThickness.enabled = false;
               //NumericStepper_BorderThickness.enabled = false;
               
               //Label_BorderOpacity.enabled = false;
               //NumericStepper_BorderOpacity.enabled = false;
            }
            else
            {
               SelectList_AiType.enabled = false;
               Label_AiType.enabled = false;
               
               Label_Opacity.enabled = true;
               NumericStepper_Opacity.enabled = true;
               
               CheckBox_DrawBorder.enabled = true;
               
               //Label_BorderColor.enabled = true;
               //ColorPicker_BorderColor.enabled = true;
               
               CheckBox_DrawBackground.enabled = true;
               
               Label_BackgroundColor.enabled = true;
               ColorPicker_BackgroundColor.enabled = true;
               
               //Label_BorderThickness.enabled = true;
               //NumericStepper_BorderThickness.enabled = true;
               
               //Label_BorderOpacity.enabled = true;
               //NumericStepper_BorderOpacity.enabled = true;
            }
            
            if (mOnCiTypeChanged != null)
            {
               mOnCiTypeChanged (CheckBox_IsCiShape.selected && SelectList_AiType.selectedItem.data != Define.ShapeAiType_Unknown);
            }
         }
         
         public function SetValues (inputValues:Object):void
         {
            mInputValues = inputValues;
            
            mOnCiTypeChanged = inputValues.mOnCiTypeChanged;
            
            CheckBox_IsCiShape.selected = inputValues.mAiType >= 0;
            SelectList_AiType.selectedIndex = DataUtil.SelectedValue2SelectedIndex (Lists.mAiTypeList, inputValues.mAiType);
            
            NumericStepper_Opacity.value = inputValues.mTransparency;
            CheckBox_DrawBorder.selected = inputValues.mDrawBorder;
            ColorPicker_BorderColor.selectedColor = inputValues.mBorderColor;
            NumericStepper_BorderThickness.value = inputValues.mBorderThickness;
            CheckBox_DrawBackground.selected = inputValues.mDrawBackground;
            ColorPicker_BackgroundColor.selectedColor = inputValues.mBackgroundColor;
            NumericStepper_BorderOpacity.value = inputValues.mBorderTransparency;
            
            Button_PickBodyTexture.SetPickedModule (inputValues.mBodyTextureModule);
            
            if (inputValues.mCiTypeSelectable != null && (! inputValues.mCiTypeSelectable))
            {
               Box_CiType.enabled = false;
               CheckBox_IsCiShape.enabled = false;
               SelectList_AiType.enabled = false;
            }
            
            if (inputValues.mDisableTextureEditing != null && inputValues.mDisableTextureEditing)
            {
               Label_BodyTexture.enabled = false;
               Button_PickBodyTexture.enabled = false;
            }
            
            OnCiTypeSelectListClick ();
         }
         
         public function GetValues (returnValues:Object):void
         {
            returnValues.mAiType = CheckBox_IsCiShape.selected && SelectList_AiType.selectedItem != null ? SelectList_AiType.selectedItem.data : Define.ShapeAiType_Unknown;
            
            returnValues.mTransparency = NumericStepper_Opacity.value;
            returnValues.mDrawBorder = CheckBox_DrawBorder.selected;
            returnValues.mBorderColor = ColorPicker_BorderColor.selectedColor;
            returnValues.mBorderThickness = NumericStepper_BorderThickness.value;
            returnValues.mDrawBackground = CheckBox_DrawBackground.selected;
            returnValues.mBackgroundColor = ColorPicker_BackgroundColor.selectedColor;
            returnValues.mBorderTransparency = NumericStepper_BorderOpacity.value;
            
            returnValues.mBodyTextureModule = Button_PickBodyTexture.GetPickedModule ();
         }
         
     ]]>
   </mx:Script>

</mx:VBox>
