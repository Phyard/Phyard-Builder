<?xml version="1.0" encoding="utf-8"?>
<!-- Simple custom MXML TitleWindow component.
     The TitleWindowApp application displays this component.
     You cannot run it independently. -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="editor.display.dialog.*"
    title="Batch Shape Physics Setting" width="700"
    creationComplete="OnInitPanel()"
    >

   <mx:VBox width="100%" paddingTop="0" paddingBottom="0" borderStyle="solid" borderThickness="1">
      <mx:HBox width="100%" paddingTop="10" paddingBottom="10">
         <mx:Spacer width="100%"/>
         <mx:VBox>
            <mx:HBox width="100%" verticalAlign="bottom">
               <mx:CheckBox id="CheckBox_EnablePhysics_Modify" label="" click="CheckBox_EnablePhysics.enabled=CheckBox_EnablePhysics_Modify.selected;"/>
               <mx:CheckBox id="CheckBox_EnablePhysics" enabled="false" label="Enable Physics"/>
            </mx:HBox>
            <mx:HBox width="100%" verticalAlign="middle">
               <mx:CheckBox id="CheckBox_IsSensor_Modify" label="" click="CheckBox_IsSensor.enabled=CheckBox_IsSensor_Modify.selected;"/>
               <mx:CheckBox id="CheckBox_IsSensor" enabled="false" label="Sensor"/>
            </mx:HBox>
         </mx:VBox>
         <mx:Spacer width="100%"/>
         <mx:VBox>
            <mx:HBox width="100%" verticalAlign="middle">
               <mx:CheckBox id="CheckBox_IsStatic_Modify" label="" click="CheckBox_IsStatic.enabled=CheckBox_IsStatic_Modify.selected;"/>
               <mx:CheckBox id="CheckBox_IsStatic" enabled="false" label="Static"/>
            </mx:HBox>
            <mx:HBox width="100%" verticalAlign="middle">
               <mx:CheckBox id="CheckBox_Hollow_Modify" label="" click="CheckBox_Hollow.enabled=CheckBox_Hollow_Modify.selected;"/>
               <mx:CheckBox id="CheckBox_Hollow" enabled="false" label="Hollow"/>
            </mx:HBox>
         </mx:VBox>
         <mx:Spacer width="100%"/>
         <mx:VBox>
            <mx:HBox width="100%" verticalAlign="middle">
               <mx:CheckBox id="CheckBox_IsBullet_Modify" label="" click="CheckBox_IsBullet.enabled=CheckBox_IsBullet_Modify.selected;"/>
               <mx:CheckBox id="CheckBox_IsBullet" enabled="false" label="Bullet"/>
            </mx:HBox>
            <mx:HBox width="100%" verticalAlign="middle">
               <mx:CheckBox id="CheckBox_BuildBorder_Modify" label="" click="CheckBox_BuildBorder.enabled=CheckBox_BuildBorder_Modify.selected;"/>
               <mx:CheckBox id="CheckBox_BuildBorder" enabled="false" label="Build Border"/>
            </mx:HBox>
         </mx:VBox>
         <mx:Spacer width="100%"/>
         <mx:VBox>
            <mx:HBox width="100%" verticalAlign="middle">
               <mx:CheckBox id="CheckBox_AllowSleeping_Modify" label="" click="CheckBox_AllowSleeping.enabled=CheckBox_AllowSleeping_Modify.selected;"/>
               <mx:CheckBox id="CheckBox_AllowSleeping" enabled="false" label="Allow Sleeping"/>
            </mx:HBox>
            <mx:HBox width="100%" verticalAlign="middle">
               <mx:CheckBox id="CheckBox_FixRotation_Modify" label="" click="CheckBox_FixRotation.enabled=CheckBox_FixRotation_Modify.selected;"/>
               <mx:CheckBox id="CheckBox_FixRotation" enabled="false" label="Fix Rotation"/>
            </mx:HBox>
         </mx:VBox>
         <mx:Spacer width="100%"/>
      </mx:HBox>

      <mx:HBox label="Basic" width="100%" paddingTop="10" paddingBottom="10">
         <mx:Spacer width="100%"/>
         <mx:CheckBox id="CheclkBox_CCat_Modify" selected="false" click="Label_CollisionCategory.enabled=CheclkBox_CCat_Modify.selected;SelectList_CollisionCategory.enabled=CheclkBox_CCat_Modify.selected;"/>
         <mx:Label id="Label_CollisionCategory" enabled="false" text="Collision Category:" textAlign="right" />
         <mx:ComboBox id="SelectList_CollisionCategory" enabled="false" />
         <mx:Spacer width="100%"/>
      </mx:HBox>

      <mx:HBox width="100%" paddingTop="10" paddingBottom="10">
         <mx:Spacer width="100%"/>
         <mx:VBox>
            <mx:HBox width="100%">
               <mx:CheckBox id="CheckBox_InitialVelocityMagnitude_Modify" label="" click="Label_InitialVelocityMagnitude.enabled=Text_InitialVelocityMagnitude.enabled=CheckBox_InitialVelocityMagnitude_Modify.selected;"/>
               <mx:Spacer width="100%"/>
               <mx:Label id="Label_InitialVelocityMagnitude" enabled="false" text="Linear Velocity Magnitude:" textAlign="right"/>
               <mx:TextInput id="Text_InitialVelocityMagnitude" enabled="false" text="" width="100"/>
            </mx:HBox>
            <mx:HBox width="100%">
               <mx:CheckBox id="CheckBox_InitialVelocityAngle_Modify" label="" click="Label_InitialVelocityAngle.enabled=Text_InitialVelocityAngle.enabled=CheckBox_InitialVelocityAngle_Modify.selected;"/>
               <mx:Spacer width="100%"/>
               <mx:Label id="Label_InitialVelocityAngle" enabled="false" text="Linear Velocity Angle (degrees):" textAlign="right"/>
               <mx:TextInput id="Text_InitialVelocityAngle" enabled="false" text="" width="100"/>
            </mx:HBox>
            <mx:HBox width="100%" id="Box_InitialAngularVelocity">
               <mx:CheckBox id="CheckBox_InitialAngularVelocity_Modify" label="" click="Label_InitialAngularVelocity.enabled=Text_InitialAngularVelocity.enabled=CheckBox_InitialAngularVelocity_Modify.selected;"/>
               <mx:Spacer width="100%"/>
               <mx:Label id="Label_InitialAngularVelocity" enabled="false" text="Angular Velocity (degrees/s):" textAlign="right"/>
               <mx:TextInput id="Text_InitialAngularVelocity" enabled="false" text="" width="100"/>
            </mx:HBox>
         </mx:VBox>
         <mx:Spacer width="100%"/>
         <mx:VBox>
            <mx:HBox width="100%">
               <mx:CheckBox id="CheckBox_Density_Modify" label="" click="Label_Denstiy.enabled=Text_Density.enabled=CheckBox_Density_Modify.selected;"/>
               <mx:Spacer width="100%" />
               <mx:Label id="Label_Denstiy" enabled="false" text="Density:" textAlign="right"/>
               <mx:TextInput id="Text_Density" enabled="false" text="" width="100"/>
            </mx:HBox>
            <mx:HBox width="100%">
               <mx:CheckBox id="CheckBox_Friction_Modify" label="" click="Label_Friction.enabled=Text_Friction.enabled=CheckBox_Friction_Modify.selected;"/>
               <mx:Spacer width="100%"/>
               <mx:Label id="Label_Friction" enabled="false" text="Friction:" textAlign="right"/>
               <mx:TextInput id="Text_Friction" enabled="false" text="" width="100"/>
            </mx:HBox>
            <mx:HBox width="100%">
               <mx:CheckBox id="CheckBox_Restitution_Modify" label="" click="Label_Restitution.enabled=Text_Restitution.enabled=CheckBox_Restitution_Modify.selected;"/>
               <mx:Spacer width="100%"/>
               <mx:Label id="Label_Restitution" enabled="false" text="Restitution:" textAlign="right"/>
               <mx:TextInput id="Text_Restitution" enabled="false" text="" width="100"/>
            </mx:HBox>
         </mx:VBox>
         <mx:Spacer width="100%"/>
      </mx:HBox>
   </mx:VBox>

   <mx:HBox width="100%" paddingTop="10">
      <mx:Spacer width="100%"/>
      <mx:Button label="OK" click="OnClickOkButton ();"/>
      <mx:Spacer width="30"/>
      <mx:Button label="Cancel" click="OnClickCancelButton ();"/>
      <!--
      <mx:Spacer width="30"/>
      <mx:Button label="Default" click="OnClickDefaultButton ();"/>
      -->
      <mx:Spacer width="100%"/>
   </mx:HBox>


   <mx:Script>
      <![CDATA[

         import mx.events.MenuEvent;
         import mx.managers.PopUpManager;
         import mx.controls.Menu;

         import editor.EditorContext;

         import common.Define;

         private var OnConfirm:Function = null;
         private var OnClose:Function = null;

         private var mParams:Object = new Object ();

         public function SetValues (initialValues:Object):void
         {
            mParams = initialValues;
         }

         private function OnInitPanel ():void
         {
            SelectList_CollisionCategory.dataProvider = mParams.mScene.GetCollisionCategoryManager ().GetCollisionCategoryListDataProvider (false, false);
            SelectList_CollisionCategory.selectedIndex = 0;
         }

         public function GetValues (returnValues:Object):void
         {
            // flags

            returnValues.mToModifyEnablePhysics = CheckBox_EnablePhysics_Modify.selected;;
            if (returnValues.mToModifyEnablePhysics)
               returnValues.mIsPhysicsEnabled = CheckBox_EnablePhysics.selected;

            returnValues.mToModifyStatic = CheckBox_IsStatic_Modify.selected;;
            if (returnValues.mToModifyStatic)
               returnValues.mIsStatic = CheckBox_IsStatic.selected;

            returnValues.mToModifyBullet = CheckBox_IsBullet_Modify.selected;;
            if (returnValues.mToModifyBullet)
               returnValues.mIsBullet = CheckBox_IsBullet.selected;

            returnValues.mToModifySensor = CheckBox_IsSensor_Modify.selected;;
            if (returnValues.mToModifySensor)
               returnValues.mIsSensor = CheckBox_IsSensor.selected;

            returnValues.mToModifyHollow = CheckBox_Hollow_Modify.selected;;
            if (returnValues.mToModifyHollow)
               returnValues.mIsHollow = CheckBox_Hollow.selected;

            returnValues.mToModifyBuildBorder = CheckBox_BuildBorder_Modify.selected;;
            if (returnValues.mToModifyBuildBorder)
               returnValues.mBuildBorder = CheckBox_BuildBorder.selected;

            returnValues.mToModifAllowSleeping = CheckBox_AllowSleeping_Modify.selected;;
            if (returnValues.mToModifAllowSleeping)
               returnValues.mAllowSleeping = CheckBox_AllowSleeping.selected;

            returnValues.mToModifyFixRotation = CheckBox_FixRotation_Modify.selected;;
            if (returnValues.mToModifyFixRotation)
               returnValues.mFixRotation = CheckBox_FixRotation.selected;

            // ccat

            returnValues.mToModifyCCat = CheclkBox_CCat_Modify.selected;
            if (returnValues.mToModifyCCat)
               returnValues.mCollisionCategoryIndex = SelectList_CollisionCategory.selectedItem.mCategoryIndex;

            // velocity

            var linearSpeed:Number = parseFloat (Text_InitialVelocityMagnitude.text);
            returnValues.mToModifyLinearVelocityMagnitude = (! isNaN (linearSpeed)) && CheckBox_InitialVelocityMagnitude_Modify.selected;
            if (returnValues.mToModifyLinearVelocityMagnitude)
               returnValues.mLinearVelocityMagnitude = linearSpeed;

            var linearVelocityAngle:Number = parseFloat (Text_InitialVelocityAngle.text);
            returnValues.mToModifyLinearVelocityAngle = (! isNaN (linearVelocityAngle)) && CheckBox_InitialVelocityAngle_Modify.selected;
            if (returnValues.mToModifyLinearVelocityAngle)
               returnValues.mLinearVelocityAngle = linearVelocityAngle;

            var angularVelocity:Number = parseFloat (Text_InitialAngularVelocity.text);
            returnValues.mToModifyAngularVelocity = (! isNaN (angularVelocity)) && CheckBox_InitialAngularVelocity_Modify.selected;
            if (returnValues.mToModifyAngularVelocity)
               returnValues.mAngularVelocity = angularVelocity;

            // fixture

            var density:Number = parseFloat (Text_Density.text);
            returnValues.mToModifyDensity = (! isNaN (density)) && CheckBox_Density_Modify.selected;
            if (returnValues.mToModifyDensity)
               returnValues.mDensity = density;

            var friction:Number = parseFloat (Text_Friction.text);
            returnValues.mToModifyFriction = (! isNaN (friction)) && CheckBox_Friction_Modify.selected;
            if (returnValues.mToModifyFriction)
               returnValues.mFriction = friction;

            var restitution:Number = parseFloat (Text_Restitution.text);
            returnValues.mToModifyRestitution = (! isNaN (restitution)) && CheckBox_Restitution_Modify.selected;
            if ( ! isNaN (restitution) )
               returnValues.mRestitution = restitution;
         }

         public function SetConfirmFunc (onConfirm:Function):void
         {
            OnConfirm = onConfirm;
         }

         public function SetCloseFunc (onClose:Function):void
         {
            OnClose = onClose;
         }

         private function OnClickOkButton():void
         {
            GetValues (mParams);

            //PopUpManager.removePopUp(this);

            if (OnClose != null)
               OnClose ();

            if (OnConfirm != null)
               OnConfirm (mParams);
         }

         private function OnClickCancelButton():void
         {
             //PopUpManager.removePopUp(this);

             if (OnClose != null)
               OnClose ();
         }

     ]]>
   </mx:Script>



</mx:TitleWindow>
