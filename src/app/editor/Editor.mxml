<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
         xmlns:mx="http://www.adobe.com/2006/mxml" 
         xmlns:entity="editor.entity.dialog.*"  
         styleName = "plain" 
         layout="absolute" 
         width ="100%"
         height="100%"
         backgroundColor="0x808080"
         borderStyle="solid"
         borderThickness="1"
         usePreloader="true"
         percentWidth="100"
         percentHeight="100"
         scriptTimeLimit="60"
         creationComplete="InitApp ();"
         addedToStage="OnAddedToStage ();"
         enterFrame="UpdateApp ();" 
         mouseDown="EditorContext.GetSingleton ().SetCurrentFocusedTitleWindow (null);"
         >
   
   <mx:Style source="editor.css"/>
   <!--
   <mx:ApplicationControlBar backgroundColor="0xA0A0A0" left="0" top="0" dock="false" paddingTop="8" paddingBottom="8" verticalAlign="bottom">
      <mx:VBox verticalAlign="middle" borderStyle="none" height="100%" horizontalGap="1" verticalGap="0" paddingTop="1" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0">
         <mx:Button id="Button_WorldFile" toolTip="Load / Save ..." click="OnClicWorldFileButton (Button_WorldFile);" focusEnabled="false" fontSize="8" width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/file/design-world-file.png')" />
         <mx:Button id="Button_DesignInfo" toolTip="Design Info" click="OnClickConfigWorldButton ();" focusEnabled="false" fontSize="8" width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/file/design-info.png')" />
         <mx:Spacer height="10" />
         <mx:Button id="Button_ShowModuleEditDialog" toolTip="Edit Image Modules" click="ShowAssetImageModuleListDialog ();" focusEnabled="false" fontSize="8" width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/file/design-edit-modules.png')" />
         <mx:Button id="Button_ShowSoundEditDialog" toolTip="Edit Sounds" click="ShowAssetSoundListDialog ();" focusEnabled="false" fontSize="8" width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/file/design-edit-sounds.png')" />
         <mx:Spacer height="10" />
         <mx:Button id="Button_Help" toolTip="Help" click="OnClickOpenLinksButton ();" focusEnabled="false" fontSize="8" width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('../res/editor/editor-about.png')" />
      </mx:VBox>
   </mx:ApplicationControlBar>
   -->
   
   <entity:SceneEditDialog id="mSceneEditDialog" width="100%" height="100%" />

   <mx:XML id="WorldFileMenuData">
      <root>
         <menuitem label="Save Online ..." data="save_online" for_online="true"/>
         <menuitem label="Save Offline (xml) ..." data="save_offline"/>
         <menuitem label="Export Current Scene To System Clipboard" data="export_current_scene"/>
         <!--menuitem label="Save Local ..." data="save_local"/-->
         <!--menuitem label="Quick Save (Ctrl + S)" data="save_cookie"/-->
         
         <menuitem type="separator" data=""/>
         
         <menuitem label="Load Online ..." data="load_online" for_online="true"/>
         <menuitem label="Load Offline (xml) ..." data="load_offline"/>
         <menuitem label="Import Scenes (xml) ..." data="import_scenes"/>
         <!--menuitem label="Load Local ..." data="load_local"/-->
         <!--menuitem label="Quick Load ..." data="load_quick"/-->
         
         <menuitem type="separator" data=""/>
         
         <menuitem label="Reset World ..." data="reset_world"/>
         
         <menuitem type="separator" data=""/>
         
         <menuitem label="About" data="about"/>
      </root>
   </mx:XML>

  <mx:Script><![CDATA[
      
   import flash.system.System;
   
   import flash.events.Event;
   import flash.events.MouseEvent;
   import flash.events.KeyboardEvent;
   import flash.ui.Keyboard;
   import flash.ui.ContextMenu;
   import flash.ui.ContextMenuItem;
   import flash.display.LoaderInfo;
   
   import flash.net.URLRequest;
   import flash.net.URLLoader;
   import flash.net.URLRequestMethod;
   import flash.net.URLLoaderDataFormat;
   
   import flash.utils.Dictionary;
   
   import mx.containers.VBox;
   import mx.controls.Button;
   import mx.controls.Menu;
   import mx.events.MenuEvent;
   
   import mx.managers.PopUpManager;
   
   import com.tapirgames.util.DisplayObjectUtil;
   import com.tapirgames.util.UrlUtil;
   
   import editor.world.World;
   
   import editor.undo.*;
   
   import editor.entity.dialog.SceneEditDialog;
   import editor.entity.dialog.SceneEditPanel;
   import editor.entity.dialog.ScenePlayPanel;
   import editor.entity.Entity;
   import editor.entity.EntityShape;
   
   import editor.ccat.CollisionCategory;
   import editor.ccat.CollisionCategoryManager;
   
   import editor.display.dialog.*;
   import editor.display.sprite.EffectMessagePopup;
   
   import common.DataFormat;
   import common.DataFormat2;
   import common.DataFormat3;
   import common.WorldDefine;
   import common.SceneDefine;
   import common.trigger.CoreEventIds;
   import common.ValueAdjuster;
   import common.Define;
   import common.Version;
   
//========================================================================================
// app
//========================================================================================
   
      private function InitApp ():void
      {
         EditorContext.sEditorApp = this;
         
         AddExternalCallbacks ();
      }
      
      private function UpdateApp ():void
      {
         
      }
      
   //================================================================================
   // 
   //================================================================================
      
      private function AddExternalCallbacks ():void
      {         
         if (flash.external.ExternalInterface.available)
         {
             try
             {
                 flash.external.ExternalInterface.addCallback("DesignNotSaved", DesignNotSaved);
             }
             catch (error:Error)
             {
                trace ("Adding external callbacks failed: " + error.message + "\n");
             }
         }
         else
         {
             trace ("External interface is not available for this container.");
         }
      }
            
      private function DesignNotSaved ():Boolean
      {
         return true; // todo
      }
      
   //================================================================================
   // 
   //================================================================================
      
      private var mAppParams:Object = new Object ();
      
      private function OnAddedToStage ():void
      {  
         stage.addEventListener (KeyboardEvent.KEY_DOWN, OnKeyDown);
         stage.addEventListener (MouseEvent.MOUSE_DOWN, OnMouseAction);
         stage.addEventListener (MouseEvent.MOUSE_MOVE, OnMouseAction);
         stage.addEventListener (MouseEvent.MOUSE_UP, OnMouseAction);
         
         mOriginalFPS = stage.frameRate;
         
         // ...
         
         // if to restore this later, use EditorContext.ShowModelessDialog instead
         //PopUpManager.addPopUp (mSceneEditDialog, this, false);
         //PopUpManager.centerPopUp (mSceneEditDialog);
         
         NewWorld ();
         
         // ...
         
         try
         {
            var loadInfo:LoaderInfo = LoaderInfo(stage.root.loaderInfo);
            mAppParams.mRootUrl = UrlUtil.GetRootUrl (loaderInfo.url);
            var flashVars:Object = loaderInfo.parameters;
            if (flashVars != null)
            {
               if (flashVars.action != null)
                  mAppParams.mAction = flashVars.action;
               if (flashVars.author != null)
                  mAppParams.mAuthorName = flashVars.author;
               if (flashVars.slot != null)
                  mAppParams.mSlotID = flashVars.slot;
               if (flashVars.revision != null)
                  mAppParams.mRevisionID = flashVars.revision;
            }
         }
         catch (error:Error)
         {
            trace (error.getStackTrace ());
         }
         
         mIsOnlineEditing = mAppParams.mRootUrl != null && mAppParams.mAction != null && mAppParams.mAuthorName != null && mAppParams.mSlotID != null && mAppParams.mRevisionID != null;
         
         if (IsOnlineEditing () && mAppParams.mAction != "create") // don't change this. If it is changed, old editor versions need rebuilt.
         {
            StartOnlineLoading (true);
         }
      }
      
      private function OnMouseAction (event:MouseEvent):void
      {
         EditorContext.mIsMouseButtonHold = event.buttonDown;
      }
      
      private var mOriginalFPS:Number = 30;
      
      public function RestoreDefaultFPS ():void
      {
         stage.frameRate = mOriginalFPS;
      }
      
      private var mIsOnlineEditing:Boolean = false;
      
      public function IsOnlineEditing ():Boolean
      {
         return mIsOnlineEditing;
      }
   
//========================================================================================
// world
//========================================================================================
         
      private var mWorld:World = null;

      public function GetWorld ():World
      {
         return mWorld;
      }
      
      public function SetWorld (world:World):void
      {
         CloseWorld ();
         EditorContext.sEditorContext = new EditorContext ();
         
         mWorld = world;
         mSceneEditDialog.OnWorldChanged (0);
      }
      
      public function CloseWorld ():void
      {
         mWorld = null;
         mSceneEditDialog.OnWorldChanged (0);
         
         if (EditorContext.sEditorContext != null)
            EditorContext.sEditorContext.Cleanup ();
         
         EditorContext.sEditorContext = null;
      }
   
      public function NewWorld ():void
      {
         SetWorld (new World (null));
         
         //CreateWorldSnapshot ("New world created");
         CreateSnapshotForCurrentScene ("New world created");
      }
      
      public function LoadWorld ():void
      {
      }
      
      public function SaveWorld ():void
      {
      }
      
   //========================================================================================
   // asset edit dialogs
   //========================================================================================
      
      private function OnKeyDown (event:KeyboardEvent):void
      {
         if (mSceneEditDialog.IsInEditingMode ())
         {
            if (EditorContext.GetSingleton () != null)
            {
               EditorContext.GetSingleton ().OnKeyDownDefault (event.keyCode, event.ctrlKey, event.shiftKey);
            }
         }
      }
      
      public function ShowCollisionCategoryListDialog ():void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (Keyboard.F5);
         }
      }
   
      public function ShowCodeLibListDialog ():void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (Keyboard.F6);
         }
      }
   
      public function ShowAssetImageModuleListDialog ():void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (Keyboard.F3);
         }
      }
   
      public function ShowAssetSoundListDialog ():void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (Keyboard.F4);
         }
      }
      
      public function ShowGlobalCodeLibEditDialog ():void
      {
         if (EditorContext.GetSingleton () != null)
         {
            EditorContext.GetSingleton ().OnKeyDownDefault (Keyboard.F7);
         }
      }
      
   //========================================================================================
   // load / save
   //========================================================================================
      
      private var mWorldFileMenu:Menu = null;
      
      public function OnClicWorldFileButton (button:Button):void
      {
         if (mWorldFileMenu == null)
         {
            var xml:XML = <root />;
            for each (var menuItem:Object in WorldFileMenuData.menuitem)
            {
               if (IsOnlineEditing () || menuItem.@["for_online"] != "true")
               {
                  xml.appendChild (menuItem);
               }
            }
            
            mWorldFileMenu = Menu.createMenu(button, xml, false);
            mWorldFileMenu.labelField="@label";
            mWorldFileMenu.addEventListener(MenuEvent.ITEM_CLICK, OnSelectWorldFileMenu);
         }
         
         //var point:Point = button.localToGlobal (new Point (button.width, 0.5 * button.height));
         var point:Point = button.localToGlobal (new Point (0, button.height));
         
         mWorldFileMenu.show (point.x, point.y);
      }
      
      private function OnSelectWorldFileMenu (event:MenuEvent):void
      {
         var itemData:String = event.item.@data;
         
         if (itemData == "load_online")
         {
            OnStartOnlineLoading ();
         }
         else if (itemData == "load_offline")
         {
            OnStartOfflineLoading ();
         }
         else if (itemData == "import_scenes")
         {
            OnImportScenes ();
         }
         //else if (itemData == "load_local")
         //{
         //}
         //else if (itemData == "load_quick")
         //{
         //   MainView.QuickLoad ();
         //}
         
         else if (itemData == "save_online")
         {
            OnStartOnlineSaving ();
         }
         else if (itemData == "save_offline")
         {
            OnStartOfflineSaving ();
         }
         else if (itemData == "export_current_scene")
         {
            OnExportCurrentScene ();
         }
         //else if (itemData == "save_local")
         //{
         //}
         //else if (itemData == "save_cookie")
         //{
         //   MainView.QuickSave ();
         //}
         
         else if (itemData == "reset_world")
         {
            EditorContext.OpenAlertDialog ("Reset World", "Do you want to reset world?", true, NewWorld);
         }
         
         else if (itemData == "about")
         {
            EditorContext.OnAbout ();
         }
      }
      
      private function OnStartOnlineLoading ():void
      {
         EditorContext.OpenAlertDialog ("Confirm Online Loading", "All your current works will be lost. Continue?", true, StartOnlineLoading);
      }
      
      private function OnStartOfflineLoading ():void
      {
         EditorContext.OpenAlertDialog ("Confirm Offline Loading", "All your current works will be lost. Continue?", true, ConfirmOfflineLoading);
      }
      
      private function ConfirmOfflineLoading ():void
      {
         EditorContext.OpenSettingsDialog (WorldLoadingDialog, OfflineLoad);
      }
      
      public function OnStartOfflineImporting ():void
      {
         EditorContext.OpenSettingsDialog (WorldImportDialog, OfflineImport);
      }
      
      public function OnImportScenes ():void
      {
         EditorContext.OpenSettingsDialog (WorldImportScenesDialog, OfflineImportScenes);
      }
      
      public function OnStartOnlineSaving ():void
      {
         EditorContext.OpenSettingsDialog (WorldOnlineSavingDialog, OnlineSave);
      }
      
      public function OnStartOfflineSaving ():void
      {
         var offlineSaveData:Object = GetOfflineSaveData ();
         if (offlineSaveData != null)
         {
            EditorContext.OpenSettingsDialog (WorldSavingDialog, null, offlineSaveData);
         }
      }
      
      public function OnStartOfflineExporting ():void
      {
         OfflineExportSelecteds ();
      }
      
      public function OnExportCurrentScene ():void
      {
         OfflineExportCurrentScene ();
      }
      
      public function OnClickConfigWorldButton ():void
      {
         //EditorContext.OpenSettingsDialog (DesignInfoSettingDialog, SetWorldSettings, GetWorldSettings ());
         EditorContext.OpenSettingsDialog (WorldInfoSettingDialog, SetWorldSettings, GetWorldSettings ());
         
         // holy shit! Flex 3.5 mxmlc compiler will throw many 
         // "Error: 调用可能未定义的方法 GetWorld (通过 static 类型 editor:Editor 引用)",
         // when WorldInfoSettingDialog is named DesignInfoSettingDialog.
      }
      
      public function OnClickOpenLinksButton ():void
      {
         UrlUtil.PopupPage ("http://wiki.colorinfection.com");
      }
      
   //========================================================================================
   // world settings
   //========================================================================================
      
      public function GetWorldSettings ():Object
      {
         var info:Object = new Object ();
         
         info.mShareSoureCode = mWorld.IsShareSourceCode ();
         info.mPermitPublishing = mWorld.IsPermitPublishing ();
         info.mAuthorName = mWorld.GetAuthorName ();
         info.mAuthorHomepage = mWorld.GetAuthorHomepage ();
         
         return info;
      }
      
      public function SetWorldSettings (info:Object):void
      {
         mWorld.SetShareSourceCode (info.mShareSoureCode);
         mWorld.SetPermitPublishing (info.mPermitPublishing);
         mWorld.SetAuthorName (info.mAuthorName);
         mWorld.SetAuthorHomepage (info.mAuthorHomepage);
         
         //CreateWorldSnapshot ("Author info is modified");
      }
      
   //========================================================================================
   // online io
   //========================================================================================
      
      // default value for isFirstTime must be false
      private function StartOnlineLoading (isFirstTime:Boolean = false):void
      {
         if (mOnlineLoadingPopup != null)
            return;
         
         var params:Object = mAppParams;
         
         if (params.mRootUrl == null || params.mAction == null || params.mAuthorName == null || params.mSlotID == null || params.mRevisionID == null)
            return;
         
         EditorContext.GetSingleton ().SetRecommandDesignFilename (params.mAuthorName + "-" + params.mSlotID + "-" + params.mRevisionID + ".phyardx", true);
         
         var designLoadUrl:String;
         if (isFirstTime)
         {
            designLoadUrl = params.mRootUrl + "design/" + params.mAuthorName + "/" + params.mSlotID + "/revision/" + params.mRevisionID + "/loadsc";
         }
         else
         {
            designLoadUrl = params.mRootUrl + "design/" + params.mAuthorName + "/" + params.mSlotID + "/revision/latest/loadsc";
            //var isNameRevision:Boolean = isNaN (parseInt (params.mRevisionID)); // "latest", "published"
            //if (isNameRevision)
            //{
               designLoadUrl = designLoadUrl + "?time=" + (new Date ().getTime ()); // avoid browser cache
            //}
         }
         var request:URLRequest = new URLRequest (designLoadUrl);
         request.method = URLRequestMethod.GET;
         
         //trace ("designLoadUrl = " + designLoadUrl);
         
         var loader:URLLoader = new URLLoader ();
         loader.dataFormat = URLLoaderDataFormat.BINARY;
         
         loader.addEventListener (ProgressEvent.PROGRESS, OnOnlineLoadProgress);
         
         loader.addEventListener (SecurityErrorEvent.SECURITY_ERROR, OnOnlineLoadError);
         loader.addEventListener (IOErrorEvent.IO_ERROR, OnOnlineLoadError);
         
         loader.addEventListener(Event.COMPLETE, OnOnlineLoadCompleted);
         
         loader.load ( request );
         
         mOnlineLoadingPopup = new EffectMessagePopup ("Loading ...", EffectMessagePopup.kBgColor_Special, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ());
         mOnlineLoadingPopup.SetAutoFade (false);
         mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (mOnlineLoadingPopup);
      }
      
      private var mOnlineLoadingPopup:EffectMessagePopup = null;
      
      private function OnOnlineLoadProgress (event:ProgressEvent):void
      {
         if (mOnlineLoadingPopup != null)
            mOnlineLoadingPopup.Rebuild ("Loading ... (" + Math.floor (100 * event.bytesLoaded / event.bytesTotal) + "%)", EffectMessagePopup.kBgColor_Special, 0x000000);
      } 
      
      private function OnOnlineLoadError (event:Event):void
      {
         if (mOnlineLoadingPopup != null)
            mOnlineLoadingPopup.SetAutoFade (true);
         
         mOnlineLoadingPopup = null;
         
         mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Online load error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
      } 
      
      private function OnOnlineLoadCompleted(event:Event):void 
      {
         if (mOnlineLoadingPopup != null)
            mOnlineLoadingPopup.SetAutoFade (true);
         
         mOnlineLoadingPopup = null;
         
         var loader:URLLoader = URLLoader(event.target);
         
         var returnCode:int = Define.k_ReturnCode_UnknowError;
         
         var data:ByteArray = ByteArray (loader.data);
         
         returnCode = data.readByte ();
         
         if (returnCode != Define.k_ReturnCode_Successed)
         {
            //Alert.show("Some errors in loading! returnCode = " + returnCode, "Error");
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Online load error,  returnCode = " + returnCode, EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            return;
         }
         
         var worldDefine:WorldDefine = null;
         
         try
         {
            var designDataForEditing:ByteArray = new ByteArray ();
            
            data.readBytes (designDataForEditing);
            designDataForEditing.uncompress ();
            
            worldDefine = DataFormat2.ByteArray2WorldDefine (designDataForEditing);
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            worldDefine = null;
         }
         
         if (worldDefine == null)
         {  
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Online loading failed (data error)", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            return;
         }

         CloseWorld ();
         
         try
         {     
            var newWorld:World = new World (worldDefine.mKey);
            SetWorld (newWorld);
            var newLoadedScenes:Array = DataFormat.WorldDefine2EditorWorld (true, newWorld, worldDefine);
            
            //CreateWorldSnapshot ("Online loading is done");
            //CreateSnapshotsForAllScenes ("Online loading is done");
            
            var numSucceeds:int = 0;
            var numFaileds :int = 0;
            for each (var scene:editor.entity.Scene in newLoadedScenes)
            {
               if (scene == null)
                  ++ numFaileds;
               else
               {
                  ++ numSucceeds;
                  
                  CreateSceneSnapshot (scene, "Loaded", null, false);
               }
            }
            
            if (numSucceeds == 0)
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (numFaileds + " scene(s) failed to load", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            else if (numFaileds == 0)
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (numSucceeds + " scene(s) are loaded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            else  
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (numSucceeds + " scene(s) succeeded and " + numFaileds + " scene(s) failed to load", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            //RestoreWorld (GetWorldSnapshotManager ().GetCurrentHistoryState ());
            
            //Alert.show("Sorry, online loading error!", "Error");
            
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Online load error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
         
         mSceneEditDialog.OnWorldChanged ();
      }
      
      public function OnlineSave (options:Object = null):void
      {
         //
         var isImportant:Boolean = false;
         var revisionComment:String = "";
         if (options != null)
         {
            isImportant = options.mIsImportant;
            revisionComment = options.mRevisionComment.substr (0, 100);
         }
         var designDataRevisionComment:ByteArray = new ByteArray ();
         //designDataRevisionComment.writeMultiByte (revisionComment, "utf-8"); // has bug on linux
         designDataRevisionComment.writeUTFBytes (revisionComment);
         designDataRevisionComment.position = 0;
         
         //
         var params:Object = mAppParams;
         
         if (params.mRootUrl == null || params.mAuthorName == null || params.mSlotID == null)
            return;
         
         var designDataForEditing:ByteArray = DataFormat.WorldDefine2ByteArray (DataFormat.EditorWorld2WorldDefine (mWorld));
         designDataForEditing.compress ();
         designDataForEditing.position = 0;
         
         var designDataForPlaying:ByteArray = DataFormat.WorldDefine2ByteArray (DataFormat.EditorWorld2WorldDefine (mWorld));
         designDataForPlaying.compress ();
         designDataForPlaying.position = 0;
         
         var designDataAll:ByteArray = new ByteArray ();
         
         designDataAll.writeInt (Version.VersionNumber);
         
         //>> from v1.07 (in fact, the code added in v0110 r003)
         var shareSourceCode:Boolean = mWorld.IsShareSourceCode ();
         designDataAll.writeShort (mWorld.GetEntryScene ().GetViewportWidth ()); // view width
         designDataAll.writeShort (mWorld.GetEntryScene ().GetViewportHeight ()); // view height
         //designDataAll.writeByte  ((mWorld.GetEntryScene ().GetViewerUiFlags () & Define.PlayerUiFlag_ShowPlayBar) != 0 ? 1 : 0); // show play bar?
         designDataAll.writeByte  ((mWorld.GetEntryScene ().GetViewerUiFlags () & (Define.PlayerUiFlag_UseDefaultSkin | Define.PlayerUiFlag_UseOverlaySkin)) == Define.PlayerUiFlag_UseDefaultSkin ? 1 : 0);
         designDataAll.writeByte  (shareSourceCode ? 1 : 0); // share source code?
         //<<
         
         //
         
         designDataAll.writeByte (isImportant ? 1 : 0);
         
         designDataAll.writeInt (designDataRevisionComment.length);
         designDataAll.writeInt (designDataForEditing.length);
         //designDataAll.writeInt (shareSourceCode ? 0 : designDataForPlaying.length);
         designDataAll.writeInt (0); // !! currently, playing data is totally same as editing data
         
         designDataAll.writeBytes (designDataRevisionComment);
         designDataAll.writeBytes (designDataForEditing);
         if (! shareSourceCode)
         {
            //designDataAll.writeBytes (designDataForPlaying); // !! currently, playing data is totally same as editing data
         }
         
         var designSaveUrl:String = params.mRootUrl + "design/" + params.mAuthorName + "/" + params.mSlotID + "/save";
         var request:URLRequest = new URLRequest (designSaveUrl);
         request.contentType = "application/octet-stream";
         request.method = URLRequestMethod.POST;
         request.data = designDataAll;
         
         //trace ("designSaveUrl = " + designSaveUrl)
         
         var loader:URLLoader = new URLLoader ();
         loader.dataFormat = URLLoaderDataFormat.BINARY;
            
         //loader.addEventListener (ProgressEvent.PROGRESS, OnOnlineSaveProgress); // will not be triggered
         
         loader.addEventListener (SecurityErrorEvent.SECURITY_ERROR, OnOnlineSaveError);
         loader.addEventListener (IOErrorEvent.IO_ERROR, OnOnlineSaveError);

         loader.addEventListener(Event.COMPLETE, OnOnlineSaveCompleted);
         
         loader.load ( request );
         //navigateToURL ( request )
         
         mOnlineSavingPopup = new EffectMessagePopup ("Saving ... (Please don't close the editor!)", EffectMessagePopup.kBgColor_Special, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ());
         mOnlineSavingPopup.SetAutoFade (false);
         mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (mOnlineSavingPopup);
      }
      
      private var mOnlineSavingPopup:EffectMessagePopup = null;
      
      private function OnOnlineSaveError (event:Event):void
      {
         if (mOnlineSavingPopup != null)
            mOnlineSavingPopup.SetAutoFade (true);
         
         mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Online save error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
      } 
      
      private function OnOnlineSaveCompleted(event:Event):void 
      {
         if (mOnlineSavingPopup != null)
            mOnlineSavingPopup.SetAutoFade (true);
         
         var loader:URLLoader = URLLoader(event.target);
         
         try
         {
            var data:ByteArray = ByteArray (loader.data);
            
            var returnCode:int = data.readByte ();
            var returnMessage:String = null;
            if (data.length > data.position)
            {
               var length:int = data.readInt ();
               returnMessage = data.readUTFBytes (length);
            }
            
            if (returnCode == Define.k_ReturnCode_Successed)
            {
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Online save succeeded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            }
            else
            {
               //Alert.show("Some errors in saving! returnCode = " + returnCode + ", returnMessage = " + returnMessage, "Error");
               var errorMessage:String = "Online save failed,  returnCode = " + returnCode + ",  returnMessage = " + returnMessage;
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (errorMessage, EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            }
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            //Alert.show("Sorry, online saving error! " + loader.data + " " + error, "Error");
            
            //RestoreWorld (GetWorldSnapshotManager ().GetCurrentHistoryState ());
            
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Error in online saving", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
      }
      
   //========================================================================================
   // offline io
   //========================================================================================
      
      // load 
      public function OfflineLoad (params:Object):void
      {
         var worldDefine:WorldDefine = null;
         
         try
         {
            var codeString:String = params.mXmlString;
            
            if (codeString != null)
            {
               const Text_PlayCode:String = "playcode";
               if (codeString.length > Text_PlayCode.length && codeString.substring (0, Text_PlayCode.length) == Text_PlayCode)
               {
                  var Text_OldCodeStarting:String = "434F494E";
                  var offset:int = codeString.indexOf (Text_OldCodeStarting, Text_PlayCode.length);
                  if (offset > 0) // old playcode 
                  { // this judge is not very safe!!!
                     worldDefine = DataFormat2.HexString2WorldDefine (codeString.substring (offset));
                  }
                  else // new base64 playcode
                  {
                     offset = Text_PlayCode.length;
                     var Text_CompressFormat:String = "compressformat=base64";
                     offset = codeString.indexOf (Text_CompressFormat, offset);
                     if (offset < 0)
                        throw new Error (Text_CompressFormat + " is not found.");
                     
                     offset += Text_CompressFormat.length;
                     var Text_PlayCode2:String = "playcode=";
                     offset = codeString.indexOf (Text_PlayCode2, offset);
                     if (offset < 0)
                        throw new Error (Text_PlayCode2 + " is not found.");
                     
                     offset += Text_PlayCode2.length;
                     var offset2:int = codeString.indexOf ("@}", offset);
                     if (offset2 < 0)
                        throw new Error ("@} is not found.");
                     
                     worldDefine = DataFormat2.PlayCode2WorldDefine_Base64 (codeString.substring (offset, offset2));
                     
                     if (worldDefine == null)
                     {
                        throw new Error ("base64 string has problems");
                     }
                  }
               }
               else
               {
                  var xml:XML = new XML (codeString);
                  
                  worldDefine = DataFormat.Xml2WorldDefine (xml);
               }
            }
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            worldDefine = null;
         }
         
         if (worldDefine == null)
         {  
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Offline loading failed (data error)", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            return;
         }
            
         CloseWorld ();
         
         try
         {
            var newWorld:World = new World (worldDefine.mKey);
            SetWorld (newWorld);
            var newLoadedScenes:Array = DataFormat.WorldDefine2EditorWorld (true, newWorld, worldDefine);
            
            //GetWorldSnapshotManager ().ClearHistories ();
            
            //CreateWorldSnapshot ("Offline loading is done");
            //CreateSnapshotsForAllScenes ("Offline loading is done");
            
            var numSucceeds:int = 0;
            var numFaileds :int = 0;
            for each (var scene:editor.entity.Scene in newLoadedScenes)
            {
               if (scene == null)
                  ++ numFaileds;
               else
               {
                  ++ numSucceeds;
                  
                  CreateSceneSnapshot (scene, "Loaded", null, false);
               }
            }
            
            if (numSucceeds == 0)
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (numFaileds + " scene(s) failed to load", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            else if (numFaileds == 0)
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (numSucceeds + " scene(s) are loaded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            else  
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (numSucceeds + " scene(s) succeeded and " + numFaileds + " scene(s) failed to load", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            //Alert.show ("Loading error: " + error + "\n " + error.getStackTrace ());
            
            //RestoreWorld (GetWorldSnapshotManager ().GetCurrentHistoryState ());
            
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Offline loading failed", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
         
         mSceneEditDialog.OnWorldChanged ();
      }
      
      public function OfflineImport (params:Object):void
      {
         var worldDefine:WorldDefine = null;
         
         try
         {
            var xmlString:String = params.mXmlString;    
            
            var xml:XML = new XML (xmlString);
            
            worldDefine = DataFormat.Xml2WorldDefine (xml);
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            worldDefine = null;
         }
         
         if (worldDefine == null)
         {  
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Import failed (data error)", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            return;
         }
         
         var oldEntitiesCount:int = mSceneEditDialog.GetCurrentSceneInEditing ().GetNumAssets ();
         //var oldCategoriesCount:int = mSceneEditDialog.GetCurrentSceneInEditing ().GetCollisionCategoryManager ().GetNumCollisionCategories ();
         //
         //var sceneDefine:SceneDefine = worldDefine.mSceneDefines [0] as SceneDefine;
         //
         //if (oldEntitiesCount + sceneDefine.mEntityDefines.length > Define.MaxEntitiesCount)
         //{
         //   return;
         //}
         //
         //if (oldCategoriesCount + sceneDefine.mCollisionCategoryDefines.length > Define.MaxCCatsCount)
         //{
         //   return;
         //}
           
         try
         {
            var mergeVariablesWithSameNames:Boolean = params.mMergeVariablesWithSameNames;
            var centerNewEntitiesInScreen:Boolean = params.mCenterNewEntitiesInScreen;
            
            DataFormat.WorldDefine2EditorWorld (false, mWorld, worldDefine, /*false*/mSceneEditDialog.GetCurrentSceneInEditing (), true, mergeVariablesWithSameNames);
            
            if (mSceneEditDialog.GetCurrentSceneInEditing ().GetCodeLibManager ().IsChanged ())
            {
               mSceneEditDialog.GetCurrentSceneInEditing ().GetCodeLibManager ().UpdateFunctionMenu ();
               mSceneEditDialog.GetCurrentSceneInEditing ().GetCodeLibManager ().SetChanged (false);
            }
            
            if (oldEntitiesCount != mSceneEditDialog.GetCurrentSceneInEditing ().GetNumAssets ())
            {
               mSceneEditDialog.GetCurrentSceneInEditing ().CancelAllAssetSelections ();
               
               var i:int;
               var j:int;
               var entity:Entity;
               var entities:Array;
               var centerX:Number = 0;
               var centerY:Number = 0;
               var numSelecteds:int = 0;
               
               var newEntitiesCount:int = mSceneEditDialog.GetCurrentSceneInEditing ().GetNumAssets ();
               
               var entitiesToSelect:Array = new Array ();
               for (i = oldEntitiesCount; i < newEntitiesCount; ++ i)
               {
                  entities = (mSceneEditDialog.GetCurrentSceneInEditing ().GetAssetByCreationId (i) as Entity).GetSelectableAssets ();
                  
                  for (j = 0; j < entities.length; ++ j)
                  {
                     entity = entities [j] as Entity;
                     
                     if (entitiesToSelect.indexOf (entity) < 0)
                     {
                        entitiesToSelect.push(entity);
                        
                        centerX += entity.GetPositionX ();
                        centerY += entity.GetPositionY ();
                        ++ numSelecteds;
                     }
                  }
               }
               
               mSceneEditDialog.GetCurrentSceneInEditing ().SetSelectedAssets (entitiesToSelect);
   
               if (centerNewEntitiesInScreen && numSelecteds > 0)
               {
                  centerX /= numSelecteds;
                  centerY /= numSelecteds;
                  
                  var point:Point = mSceneEditDialog.GetSceneEditPanel ().GetPanelCenterWorldPoint ();
                  mSceneEditDialog.GetSceneEditPanel ().MoveSelectedAssets (false, point.x - centerX, point.y - centerY, true);
               }
            }
            
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Import scenes succeeded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            
            CreateSnapshotForCurrentScene ("Import");
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            //Alert.show("Sorry, import error!", "Error");
            
            //RestoreWorld (GetWorldSnapshotManager ().GetCurrentHistoryState ());
            RollBackScene (mSceneEditDialog.GetSceneEditPanel ());
            
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Import failed", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
      }
      
      public function OfflineImportScenes (params:Object, returnImportedScenes:Boolean = false):Array
      {
         var worldDefine:WorldDefine = null;
         
         try
         {
            if (params.mWorldDefine != null)
               worldDefine = params.mWorldDefine;
            else
            {
               var xmlString:String = params.mXmlString;    
               
               var xml:XML = new XML (xmlString);
               
               worldDefine = DataFormat.Xml2WorldDefine (xml);
            }
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            worldDefine = null;
         }
         
         if (worldDefine == null)
         {
            if (! returnImportedScenes)
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Import failed (data error)", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            
            return null;
         }
         
         try
         {
            var newImportedScenes:Array = DataFormat.WorldDefine2EditorWorld (false, mWorld, worldDefine, /*false*/null, true, true);
            mSceneEditDialog.OnWorldChanged ();
            
            var numSucceeds:int = 0;
            var numFaileds :int = 0;
            for each (var scene:editor.entity.Scene in newImportedScenes)
            {
               if (scene == null)
                  ++ numFaileds;
               else
               {
                  ++ numSucceeds;
                  
                  CreateSceneSnapshot (scene, "Loaded", null, false);
               }
            }
            
            if (! returnImportedScenes)
            {
               if (numSucceeds == 0)
                  mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (numFaileds + " scenes failed to import", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
               else if (numFaileds == 0)
                  mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (numSucceeds + " scenes are imported", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
               else  
                  mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (numSucceeds + " scenes succeeded and " + numFaileds + " scenes failed to import", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            }
            
            //CreateWorldSnapshot ("Import Scenes");
            
            return newImportedScenes;
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            //RestoreWorld (GetWorldSnapshotManager ().GetCurrentHistoryState ());
            
            if (! returnImportedScenes)
            {
               mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Import failed", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            }
         }
         
         return null;
      }
      
      public function GetOfflineSaveData ():Object
      {
         try
         {
            // ...
            var width:int = mWorld.GetEntryScene ().GetViewportWidth ();
            var height:int = mWorld.GetEntryScene ().GetViewportHeight ();
            //var showPlayBar:Boolean = (mWorld.GetEntryScene ().GetViewerUiFlags () & Define.PlayerUiFlag_ShowPlayBar) != 0;
            var showPlayBar:Boolean = (mWorld.GetEntryScene ().GetViewerUiFlags () & (Define.PlayerUiFlag_UseDefaultSkin | Define.PlayerUiFlag_UseOverlaySkin)) == Define.PlayerUiFlag_UseDefaultSkin;
            var heightWithPlayBar:int = (showPlayBar ? height + Define.DefaultPlayerSkinPlayBarHeight : height);
            
            var fileFormatVersionString:String = DataFormat3.GetVersionHexString (Version.VersionNumber);
            
            var values:Object = new Object ();
            
            //========== source code ========== 
         
            values.mXmlString = DataFormat2.WorldDefine2Xml (DataFormat.EditorWorld2WorldDefine (mWorld)).toXMLString ();
            
            //=========== play code ========== 
         
            // before v1.55, depreciated now
            //var playcode:String = DataFormat.WorldDefine2HexString (DataFormat.EditorWorld2WorldDefine (mWorld)); 
            //values.mHexString = playcode;
            
            // new one, from v1.55
            var playcodeBase64:String = DataFormat.WorldDefine2PlayCode_Base64 (DataFormat.EditorWorld2WorldDefine (mWorld));
            
            values.mHexString = DataFormat3.CreateForumEmbedCode (fileFormatVersionString, width, height, showPlayBar, playcodeBase64);
            
            //======== html embed code ======== 
         
            // before v1.55, depreciated now
            //values.mEmbedCode = "<embed src=\"http://www.phyard.com/uniplayer.swf?app=ci&format=0x" + fileFormatVersionString
            //                  + "\"\n width=\"" + width + "\" height=\"" + heightWithPlayBar + "\"\n"
            //                  + "  FlashVars=\"playcode=" + playcode
            //                  + "\"\n quality=\"high\" allowScriptAccess=\"sameDomain\"\n type=\"application/x-shockwave-flash\"\n pluginspage=\"http://www.macromedia.com/go/getflashplayer\">\n</embed>"
            //                  ;
            
            // new one: add compressformat in FlashVars; change app=ci to app=coin and change format to fileversion in url.
            values.mEmbedCode = "<embed src=\"http://www.phyard.com/uniplayer.swf?app=coin&fileversion=0x" + fileFormatVersionString
                              + "\"\n width=\"" + width + "\" height=\"" + heightWithPlayBar + "\"\n"
                              + "  FlashVars=\"compressformat=" + DataFormat3.CompressFormat_Base64 + "&playcode=" + playcodeBase64
                              + "\"\n quality=\"high\" allowScriptAccess=\"sameDomain\"\n type=\"application/x-shockwave-flash\"\n pluginspage=\"http://www.macromedia.com/go/getflashplayer\">\n</embed>"
                              ;
            
            return values;
         }
         catch (error:Error)
         {
            //Alert.show("Sorry, saving error!", "Error");
            
            if (Capabilities.isDebugger)
               throw error;
         }
         
         return null;
      }
      
      public function OfflineExportSelecteds ():void
      {
         try
         {
            var currentScene:editor.entity.Scene = mSceneEditDialog.GetCurrentSceneInEditing ();
            //var sceneIndex:int = currentScene.GetSceneIndex ();
            
            var worldDefine:WorldDefine = DataFormat.EditorWorld2WorldDefine (mWorld, currentScene);
            var newWorld:World = new World (null); //worldDefine.mKey);
            //newWorld = 
            DataFormat.WorldDefine2EditorWorld (true, newWorld, worldDefine);
               // !!! here may be some bugs: somewhere will call EditorContext.GetCurrentWorld, which is not the newWorld
            
            var newScene:editor.entity.Scene = newWorld.GetSceneByIndex (0);
            
            //if (onlyExportSelecteds)
            //{
               var selectedEntities:Array = currentScene.GetSelectedAssets ();
               if (selectedEntities.length == 0)
                  return;
               
               var numEntities:int = selectedEntities.length;
               var entity:Entity;
               var i:int;
               var index:int;
   
               for (i = 0; i < numEntities; ++ i)
               {
                  //trace ("selectedEntities[i] = " + selectedEntities[i]);
                  //trace ("selectedEntities[i].parent = " + selectedEntities[i].parent);
                  
                  index = currentScene.GetAssetCreationId (selectedEntities[i]);
                  entity = newScene.GetAssetByCreationId (index) as Entity;
                  
                  entity = entity.GetMainAsset () as Entity;
                  newScene.AddAssetSelection (entity);
                  newScene.AddAssetSelections (entity.GetSelectableAssets ());
               }
               
               i = 0;
               //numEntities = newScene.GetNumAssets (); // this is bug
               while (i < newScene.GetNumAssets ()) // numEntities)
               {
                  entity = newScene.GetAssetByCreationId (i) as Entity;
                  if ( entity.IsSelected () ) // generally should use world.IsEntitySelected instead, this one is fast but only for internal uses
                  {
                     ++ i;
                  }
                  else
                  {
                     newScene.DestroyAsset (entity);
                  }
               }
               
               //var cm:CollisionCManager = newWorld.GetCollisionManager ();
               //var ccId:int;
               //numEntities = newScene.GetNumAssets ();
               //
               //for (i = 0; i < numEntities; ++ i)
               //{
               //   entity = newScene.GetAssetByCreationId (i) as Entity;
               //   if (entity is EntityVectorShape)
               //   {
               //      ccId = (entity as EntityVectorShape).GetCollisionCategoryIndex ();
               //      if (ccId >= 0)
               //         cm.SelectEntity (cm.GetCollisionCategoryByIndex (ccId));
               //   }
               //}
               //
               //ccId = 0;
               // //var numCats:int = cm.GetNumCollisionCategories ();// this is bug
               //while (ccId < cm.GetNumCollisionCategories ()) //numCats)
               //{
               //   entity = cm.GetCollisionCategoryByIndex (ccId);
               //   if ( entity.IsSelected () ) // generally should use world.IsEntitySelected instead, this one is fast but only for internal uses
               //   {
               //      ++ ccId;
               //   }
               //   else
               //   {
               //      cm.DestroyEntity (entity);
               //   }
               //}
               
               var cm:CollisionCategoryManager = newScene.GetCollisionCategoryManager ();
               cm.CancelAllAssetSelections ();
               var ccId:int;
               numEntities = newScene.GetNumAssets ();
               
               for (i = 0; i < numEntities; ++ i)
               {
                  entity = newScene.GetAssetByCreationId (i) as Entity;
                  if (entity is EntityShape)
                  {
                     ccId = (entity as EntityShape).GetCollisionCategoryIndex ();
                     if (ccId >= 0)
                        cm.AddAssetSelection (cm.GetCollisionCategoryByIndex (ccId));
                  }
               }
               
               var ccat:CollisionCategory;
               ccId = 0;
               //var numCats:int = cm.GetNumCollisionCategories ();// this is bug
               while (ccId < cm.GetNumCollisionCategories ()) //numCats)
               {
                  ccat = cm.GetCollisionCategoryByIndex (ccId);
                  if ( ccat.IsSelected () ) // generally should use world.IsEntitySelected instead, this one is fast but only for internal uses
                  {
                     ++ ccId;
                  }
                  else
                  {
                     cm.DestroyAsset (ccat);
                  }
               }
            //} // onlyExportSelecteds
            
            System.setClipboard(DataFormat2.WorldDefine2Xml (DataFormat.EditorWorld2WorldDefine (newWorld)));
            
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Export succeeded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
         catch (error:Error)
         {
            //Alert.show("Sorry, export  error!", "Error");
            
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Export failed", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            
            if (Capabilities.isDebugger)
               throw error;
         }
         //finally // comment off for bug of secureSWF 
         //{
            if (newWorld != null)
               newWorld.Destroy ();
         //}
      }
      
      public function OfflineExportCurrentScene ():WorldDefine
      {
         try
         {
            var currentScene:editor.entity.Scene = mSceneEditDialog.GetCurrentSceneInEditing ();
            //var sceneIndex:int = currentScene.GetSceneIndex ();
            
            var worldDefine:WorldDefine = DataFormat.EditorWorld2WorldDefine (mWorld, currentScene);
            
            System.setClipboard(DataFormat2.WorldDefine2Xml (worldDefine));
            
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Export succeeded", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
         catch (error:Error)
         {
            //Alert.show("Sorry, export  error!", "Error");
            
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Export failed", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            
            if (Capabilities.isDebugger)
               throw error;
         }
         
         return null;
      }
      
      public function GetWorldDefineForSceneCloning (sceneToClone:editor.entity.Scene):WorldDefine
      {
         try
         {
            return DataFormat.EditorWorld2WorldDefine (mWorld, sceneToClone, true);
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
         }
         
         return null;
      }
      
   //========================================================================================
   // undo / redo
   //========================================================================================
      
      private var mWorldHistoryManager:HistoryManager = new HistoryManager ();
      
      private var mHistoryManagersForScenes:Dictionary = new Dictionary ();
      
      public function GetWorldSnapshotManager ():HistoryManager
      {
         return mWorldHistoryManager;
      }
      
      //public function CreateWorldSnapshot (description:String, editActions:Array = null):void
      //{
      //   CreateSnapshot (null, description, editActions);
      //}
      
      // assume scene != null
      public function GetSceneSnapshotManager (scene:editor.entity.Scene, createIfNotExist:Boolean = false):HistoryManager
      {
         var historyManager:HistoryManager = mHistoryManagersForScenes [scene.GetKey ()];
         
         if (historyManager == null && createIfNotExist)
         {
            historyManager = new HistoryManager ();
            mHistoryManagersForScenes [scene.GetKey ()] = historyManager;
         }
         
         return historyManager;
      }
      
      public function CreateSnapshotForCurrentScene (description:String):void
      {
         CreateSceneSnapshot (mSceneEditDialog.GetCurrentSceneInEditing (), description, null, true);
      }
      
      //public function CreateSnapshotsForAllScenes (description:String):void
      //{
      //   if (mWorld == null)
      //      return;
      //   
      //   for (var sceneId:int = 0; sceneId < mWorld.GetNumScenes (); ++ sceneId)
      //   {
      //      CreateSceneSnapshot (mWorld.GetSceneByIndex (sceneId), description, null, false);
      //   }
      //}
      
      public function CreateSceneSnapshot (scene:editor.entity.Scene, description:String, editActions:Array = null, createPopupMessage:Boolean = true, dontAddIntoHistory:Boolean = false):HistoryState
      {
          if (scene == null)
            return null;
          
          return CreateSnapshot (scene, description, editActions, createPopupMessage, dontAddIntoHistory);
      }
      
      // scene == null means for the whole world
      private function CreateSnapshot (scene:editor.entity.Scene, description:String, editActions:Array = null, createPopupMessage:Boolean = true, dontAddIntoHistory:Boolean = false):HistoryState
      {
         if (mWorld == null)
            return null;
         
         var historyState:HistoryState = new HistoryState (description, editActions);
         
         var userObject:Object = new Object ();
         historyState.mUserData = userObject;
         
         if (scene == null)
         {
            if (! dontAddIntoHistory)
            {
               GetWorldSnapshotManager ().AddHistory (historyState);
            }
            
            userObject.mWorldDefine = DataFormat.EditorWorld2WorldDefine (mWorld);
            userObject.mCurrentSceneID = mSceneEditDialog.GetCurrentSceneInEditing ().GetSceneIndex (); // to use uuid instead
            
            var sceneEditingInfos:Array = new Array (mWorld.GetNumScenes ());
            userObject.mSceneEditingInfos = sceneEditingInfos;
            
            for (var sceneId:int = 0; sceneId < mWorld.GetNumScenes (); ++ sceneId)
            {
               var aScene:editor.entity.Scene = mWorld.GetSceneByIndex (sceneId);
               
               sceneEditingInfos [sceneId] = GetSceneEditingInfo (aScene);
            }
         }
         else
         {
            if (! dontAddIntoHistory)
            {
               GetSceneSnapshotManager (scene, true).AddHistory (historyState);
            }
            
            userObject.mWorldDefine = DataFormat.EditorWorld2WorldDefine (mWorld, scene, true);
            
            userObject.mSceneEditingInfo = GetSceneEditingInfo (scene);
         }
         
         if (createPopupMessage)
         {
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Undo point created (" + description + ")", EffectMessagePopup.kBgColor_General, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
         
         return historyState;
      }
      
      private function GetSceneEditingInfo (scene:editor.entity.Scene):Object
      {  
         var sceneEditingInfo:Object = new Object ();
         
         var entityArray:Array = scene.GetSelectedAssets ();
         
         sceneEditingInfo.mZoomScale = scene.GetZoomScale ();
         sceneEditingInfo.mSelectedEntityCreationIds = new Array (entityArray.length);
         sceneEditingInfo.mMainSelectedEntityId = -1;
         sceneEditingInfo.mSelectedVertexControllerId = -1;
         
         for (var i:int = 0; i < entityArray.length; ++ i)
         {
            var entity:Entity = entityArray [i] as Entity;
            var entityId:int = scene.GetAssetCreationId (entity);
            sceneEditingInfo.mSelectedEntityCreationIds [i] = entityId;
            if (entity.AreControlPointsVisible ())
            {
               sceneEditingInfo.mMainSelectedEntityId = entityId;
               
               //var vertexControllerArray:Array = scene.GetSelectedVertexControllers ();
               //if (vertexControllerArray.length > 0)
               //   sceneEditingInfo.mSelectedVertexControllerId = entity.GetVertexControllerIndex (vertexControllerArray [0]);
            }
         }
         
         return sceneEditingInfo;
      }
      
      /*
      private function RestoreWorld (historyState:HistoryState):Boolean
      {
         if (historyState == null)
         {
            //OnCloseClearAllAndResetSceneAlert (null);
            return false;
         }
         
         CloseWorld ();
         
         try
         {  
            var currentSceneX:Number = mSceneEditDialog.GetSceneEditPanel ().GetCurrentManagerX ();
            var currentSceneY:Number = mSceneEditDialog.GetSceneEditPanel ().GetCurrentManagerY ();
            var currentSceneScale:Number = mSceneEditDialog.GetSceneEditPanel ().GetCurrentManagerScale ();
            
            mSceneEditDialog.GetSceneEditPanel ().CancelAllAssetSelections ();
            
            var userObject:Object = historyState.mUserData;
            
            var newWorld:World = new World ();
            SetWorld (newWorld);
            DataFormat.WorldDefine2EditorWorld (true, newWorld, userObject.mWorldDefine, null, false);
            
            mSceneEditDialog.OnWorldChanged (userObject.mCurrentSceneID);
            //var currentScene:editor.entity.Scene = mWorld.GetSceneByIndex (userObject.mCurrentSceneID);
            var currentScene:editor.entity.Scene = mSceneEditDialog.GetCurrentSceneInEditing ();
            
            var sceneEditingInfos:Array = userObject.mSceneEditingInfos;
            
            for (var sceneId:int = 0; sceneId < mWorld.GetNumScenes (); ++ sceneId)
            {
               var scene:editor.entity.Scene = mWorld.GetSceneByIndex (sceneId);
               
               var sceneEditingInfo:Object = sceneEditingInfos [sceneId];
               
               if (scene != currentScene)
                  scene.SetZoomScale (sceneEditingInfo.mZoomScale);
               
               var numEntities:int = scene.GetNumAssets ();
               var entityId:int;
               var entity:Entity;
               
               for (var i:int = 0; i < sceneEditingInfo.mSelectedEntityCreationIds.length; ++ i)
               {
                  entityId = sceneEditingInfo.mSelectedEntityCreationIds [i];
                  if (entityId >= 0 && entityId < numEntities)
                  {
                     entity = scene.GetAssetByCreationId (entityId) as Entity;
                     scene.AddAssetSelection (entity);
                     
                     if (entityId == sceneEditingInfo.mMainSelectedEntityId)
                     {
                        entity.SetControlPointsVisible (true);
                        
                        //if (sceneEditingInfo.mSelectedVertexControllerId >= 0)
                        //{
                        //   var vertexController:VertexController = entity.GetVertexControllerByIndex (sceneEditingInfo.mSelectedVertexControllerId);
                        //   if (vertexController != null)
                        //      scene.SetSelectedVertexController (vertexController);
                        //}
                     }
                  }
               }
            }
            
            if (currentScene != null)
            {
               mSceneEditDialog.OnCurrentSceneSwitched ();
               
               mSceneEditDialog.GetSceneEditPanel ().MoveManagerTo (currentSceneX, currentSceneY);
               mSceneEditDialog.GetSceneEditPanel ().ScaleManagerTo (currentSceneScale);
                  
               mSceneEditDialog.GetSceneEditPanel ().OnAssetSelectionsChanged ();
            }
            
            return true;
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            RestoreWorld (GetWorldSnapshotManager ().GetCurrentHistoryState ()); // not very good
            
            //Alert.show("Sorry, online loading error!", "Error");
            
            //mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Online load error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }

         return false;
      }
      
      public function Undo ():void
      {
         var currentHistoryState:HistoryState = sceneSnapshotManager.GetCurrentHistoryState ();
         
         var historyState:HistoryState = GetWorldSnapshotManager ().UndoHistory ();
         
         if (historyState == null)
         {
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("No undo points available", EffectMessagePopup.kBgColor_General, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            return;
         }
         
         if (RestoreWorld (historyState))
         {
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (currentHistoryState == null ? "Undo" : "Undo (" + historyState.GetDescription () + ")", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
      }
      
      public function Redo ():void
      {
         var historyState:HistoryState = GetWorldSnapshotManager ().RedoHistory ();
         
         if (historyState == null)
         {
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("No redo points available", EffectMessagePopup.kBgColor_General, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            return;
         }
         
         if (RestoreWorld (historyState))
         {
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Redo (" + historyState.GetDescription () + ")", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
      }
      */
      
      public function RestoreScene (sceneEditPanel:SceneEditPanel, historyState:HistoryState, sceneSnapshotManager:HistoryManager):Boolean
      {
         if (historyState == null)
         {
            //OnCloseClearAllAndResetSceneAlert (null);
            return false;
         }
         
         var scene:editor.entity.Scene = sceneEditPanel.GetScene ();
         if (scene == null)
            return false;
         
         try
         {  
            //var currentSceneX:Number = sceneEditPanel.GetCurrentManagerX ();
            //var currentSceneY:Number = sceneEditPanel.GetCurrentManagerY ();
            //var currentSceneScale:Number = sceneEditPanel.GetCurrentManagerScale ();
            
            sceneEditPanel.CancelAllAssetSelections ();
            
            var userObject:Object = historyState.mUserData;
            
            scene.DestroyAllAssets ();

            DataFormat.WorldDefine2EditorWorld (false, mWorld, userObject.mWorldDefine, 
                                                scene, false, false);
            
            var sceneEditingInfo:Object = userObject.mSceneEditingInfo;
               
            //scene.SetZoomScale (sceneEditingInfo.mZoomScale);
            
            var numEntities:int = scene.GetNumAssets ();
            var entityId:int;
            var entity:Entity;
            
            for (var i:int = 0; i < sceneEditingInfo.mSelectedEntityCreationIds.length; ++ i)
            {
               entityId = sceneEditingInfo.mSelectedEntityCreationIds [i];
               if (entityId >= 0 && entityId < numEntities)
               {
                  entity = scene.GetAssetByCreationId (entityId) as Entity;
                  scene.AddAssetSelection (entity);
                  
                  if (entityId == sceneEditingInfo.mMainSelectedEntityId)
                  {
                     entity.SetControlPointsVisible (true);
                     
                     //if (sceneEditingInfo.mSelectedVertexControllerId >= 0)
                     //{
                     //   var vertexController:VertexController = entity.GetVertexControllerByIndex (sceneEditingInfo.mSelectedVertexControllerId);
                     //   if (vertexController != null)
                     //      scene.SetSelectedVertexController (vertexController);
                     //}
                  }
               }
            }
            
            //if (currentScene != null)
            //{
            //   mSceneEditDialog.OnCurrentSceneSwitched ();
            //   
            //   mSceneEditDialog.GetSceneEditPanel ().MoveManagerTo (currentSceneX, currentSceneY);
            //   mSceneEditDialog.GetSceneEditPanel ().ScaleManagerTo (currentSceneScale);
            //      
            //   mSceneEditDialog.GetSceneEditPanel ().OnAssetSelectionsChanged ();
            //}
            
            return true;
         }
         catch (error:Error)
         {
            if (Capabilities.isDebugger)
               throw error;
            
            if (sceneSnapshotManager != null)
               RestoreScene (sceneEditPanel, sceneSnapshotManager.GetCurrentHistoryState (), null); // not very good
            
            //Alert.show("Sorry, online loading error!", "Error");
            
            //mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Online load error", EffectMessagePopup.kBgColor_Error, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }

         return false;
      }
      
      public function RollBackScene (sceneEditPanel:SceneEditPanel):void
      {
         var sceneSnapshotManager:HistoryManager = GetSceneSnapshotManager (sceneEditPanel.GetScene (), false);
         
         if (sceneSnapshotManager == null)
            return;
         
         var historyState:HistoryState = sceneSnapshotManager.GetCurrentHistoryState ();
         if (historyState != null)
         {
            RestoreScene (sceneEditPanel, historyState, null)
         }
      }
      
      public function UndoScene (sceneEditPanel:SceneEditPanel):void
      {
         var sceneSnapshotManager:HistoryManager = GetSceneSnapshotManager (sceneEditPanel.GetScene (), false);
         
         if (sceneSnapshotManager == null)
            return;
         
         var currentHistoryState:HistoryState = sceneSnapshotManager.GetCurrentHistoryState ();
         
         var historyState:HistoryState = sceneSnapshotManager.UndoHistory ();
         
         if (historyState == null)
         {
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("No undo points available", EffectMessagePopup.kBgColor_General, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            return;
         }
         
         if (RestoreScene (sceneEditPanel, historyState, sceneSnapshotManager))
         {
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup (currentHistoryState == null ? "Undo" : "Undo (" + currentHistoryState.GetDescription () + ")", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
      }
      
      public function RedoScene (sceneEditPanel:SceneEditPanel):void
      {
         var sceneSnapshotManager:HistoryManager = GetSceneSnapshotManager (sceneEditPanel.GetScene (), false);
         
         if (sceneSnapshotManager == null)
            return;
         
         var historyState:HistoryState = sceneSnapshotManager.RedoHistory ();
         
         if (historyState == null)
         {
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("No redo points available", EffectMessagePopup.kBgColor_General, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
            return;
         }
         
         if (RestoreScene (sceneEditPanel, historyState, sceneSnapshotManager))
         {
            mSceneEditDialog.GetSceneEditPanel ().PushFloatingMessage (new EffectMessagePopup ("Redo (" + historyState.GetDescription () + ")", EffectMessagePopup.kBgColor_OK, 0x000000, 0.5 * mSceneEditDialog.GetSceneEditPanel ().GetPanelWidth ()));
         }
      }
      
   //========================================================================================
   // 
   //========================================================================================
      
      public function GetWorldBinaryData ():ByteArray
      {
         if (mWorld == null)
            return null;
         
         var byteArray:ByteArray = DataFormat.WorldDefine2ByteArray (DataFormat.EditorWorld2WorldDefine (mWorld));
         byteArray.position = 0;
         
         return byteArray;
      }
      
   //========================================================================================
   // scene edit dialog
   //========================================================================================
      
      //private var mSceneEditDialog:SceneEditDialog = new SceneEditDialog ();
            // when open the comment, remember also open the 2 lines in OnAddedToStage
      
      public function GetSceneEditDialog ():SceneEditDialog
      {
         return mSceneEditDialog;
      }

   ]]></mx:Script>
</mx:Application>

