<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
         xmlns:mx="http://www.adobe.com/2006/mxml" 
         xmlns:editor="editor.*" 
         xmlns:dialog="editor.dialog.*" 
         xmlns="*" 
         styleName = "plain" 
         layout="absolute" 
         width ="100%"
         height="100%"
         borderStyle="solid"
         borderThickness="1"
         creationComplete="InitApp()">

   <mx:ApplicationControlBar backgroundColor="0xA0A0A0" dock="true" paddingTop="1" paddingBottom="1" verticalAlign="bottom">

      <mx:HBox id="Box_DesignCommands" backgroundColor="0xA0A0A0" verticalAlign="middle" borderStyle="none" height="100%" horizontalGap="1" verticalGap="0" paddingTop="1" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0">
         <mx:Spacer width="2"/>
         <mx:Button id="Button_OpenDesign" toolTip="Open Design" click="OnClicLoadDesignButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/file/design-open.png')" />
         <mx:Button id="Button_SaveDesign" toolTip="Save Design" click="OnClicSaveDesignButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/file/design-save.png')" />
         <mx:Button id="Button_DesignInfo" toolTip="Design Info" click="ShowDesignInfoSettingDialog ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/file/design-info.png')" />
      </mx:HBox>
      <mx:ViewStack id="ViewStack_ViewEditCommands" borderStyle="none" creationPolicy="all" width="100%">
         <mx:HBox id="Box_EntityEditViewCommands" backgroundColor="0xD0D0D0" height="100%" verticalAlign="middle" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="solid" borderThickness="0">
            <mx:Spacer width="100%"/>
            <mx:HBox id="Box_EntityEditViewCommands_1" backgroundColor="0xD0D0D0" verticalAlign="middle" borderStyle="none" height="100%" horizontalGap="1" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0">
               <mx:Spacer width="5"/>
               <mx:Button id="Button_NewDesign" toolTip="New Design" click="OnClickNewDesignButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/file/design-new.png')" />
               <mx:Button id="Button_ConfigDesign" toolTip="Config Design" click="OnClickConfigDesignButton ();" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/file/design-config.png')" />
               <mx:Spacer width="10"/>
               <mx:Button id="Button_Clone" toolTip="(C) Clone Selected(s)" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-clone.png')" disabledIcon="@Embed('res/command/command-clone-disabled.png')" />
               <mx:Button id="Button_Delete" toolTip="(D) Delete Selected(s)" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-delete.png')" disabledIcon="@Embed('res/command/command-delete-disabled.png')" />
               <mx:Button id="Button_FlipH" toolTip="(X) Flip Selected(s) Horizontally" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-flip-x.png')" disabledIcon="@Embed('res/command/command-flip-x-disabled.png')" />
               <mx:Button id="Button_FlipV" toolTip="(Y) Flip Selected(s) Vertically" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-flip-y.png')" disabledIcon="@Embed('res/command/command-flip-y-disabled.png')" />
               <mx:Button id="Button_MoveToTop" toolTip="Move Selected(s) to Top Layer" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-to-top.png')" disabledIcon="@Embed('res/command/command-to-top-disabled.png')" />
               <mx:Button id="Button_MoveToBottom" toolTip="Move Selected(s) to Bottom Layer" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-to-bottom.png')" disabledIcon="@Embed('res/command/command-to-bottom-disabled.png')" />
               <mx:Spacer width="10"/>
               <mx:Button id="Button_Glue" toolTip="Become Brothers" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-brothers-make.png')" disabledIcon="@Embed('res/command/command-brothers-make-disabled.png')" />
               <mx:Button id="Button_BreakApart" toolTip="Break Brothers" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-brothers-break.png')" disabledIcon="@Embed('res/command/command-brothers-break-disabled.png')" />
               <mx:Spacer width="10"/>
               <mx:Button id="Button_Setting" label="Setting..." toolTip="Set Properties of The Selected" focusEnabled="false" fontSize="8"  width="27" height="27" cornerRadius="0" icon="@Embed('res/command/command-setting.png')" disabledIcon="@Embed('res/command/command-setting-disabled.png')" />
               <mx:Spacer width="11"/>
            </mx:HBox>
            <mx:HBox backgroundColor="0xA0A0A0" verticalAlign="middle" borderStyle="none" height="100%" horizontalGap="0" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0">
               <mx:Spacer width="8"/>
               <mx:Button id="Button_Play" toolTip="Play" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/play/play-run.png')" disabledIcon="@Embed('res/play/play-run-disabled.png')" />
               <mx:Button id="Button_Stop" toolTip="Stop" enabled="false" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/play/play-stop.png')" disabledIcon="@Embed('res/play/play-stop-disabled.png')" />
               <mx:Spacer width="8"/>
            </mx:HBox>
            <mx:HBox id="Box_EntityEditViewCommands_2" backgroundColor="0xD0D0D0" verticalAlign="middle" borderStyle="none" height="100%" horizontalGap="1" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0">
               <mx:Spacer width="10"/>
               <mx:Button id="Button_MouseMoveScene" selected="false" toolTip="Move Scene Mode" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="true" cornerRadius="0" icon="@Embed('res/command/command-move-scene.png')" selectedDownIcon="@Embed('res/command/command-move-scene-sel.png')" selectedOverIcon="@Embed('res/command/command-move-scene-sel.png')" selectedUpIcon="@Embed('res/command/command-move-scene-sel.png')" />
               <mx:Button id="Button_MouseMove" selected="true" toolTip="Move Selected(s)" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="true" cornerRadius="0" icon="@Embed('res/command/command-move.png')" selectedDownIcon="@Embed('res/command/command-move-sel.png')" selectedOverIcon="@Embed('res/command/command-move-sel.png')" selectedUpIcon="@Embed('res/command/command-move-sel.png')" />
               <mx:Button id="Button_MouseRotate" toolTip="Rotate Selected(s)" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="true" cornerRadius="0" icon="@Embed('res/command/command-rotate.png')" selectedDownIcon="@Embed('res/command/command-rotate-sel.png')" selectedOverIcon="@Embed('res/command/command-rotate-sel.png')" selectedUpIcon="@Embed('res/command/command-rotate-sel.png')" />
               <mx:Button id="Button_MouseScale" toolTip="Scale Selected(s)" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="true" cornerRadius="0" icon="@Embed('res/command/command-scale.png')" selectedDownIcon="@Embed('res/command/command-scale-sel.png')" selectedOverIcon="@Embed('res/command/command-scale-sel.png')" selectedUpIcon="@Embed('res/command/command-scale-sel.png')" />
               <mx:Spacer width="10"/>
               <mx:Button id="Button_MouseCookieMode" selected="false" toolTip="Cookie Mode" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="true" cornerRadius="0" icon="@Embed('res/command/command-cookie-mode.png')" selectedDownIcon="@Embed('res/command/command-cookie-mode-sel.png')" selectedOverIcon="@Embed('res/command/command-cookie-mode-sel.png')" selectedUpIcon="@Embed('res/command/command-cookie-mode-sel.png')" />
               <mx:Spacer width="56"/>
               <mx:Button id="Button_Undo" toolTip="Undo" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-undo.png')" disabledIcon="@Embed('res/command/command-undo-disabled.png')" />
               <mx:Button id="Button_Redo" toolTip="Redo" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-redo.png')" disabledIcon="@Embed('res/command/command-redo-disabled.png')" />
            </mx:HBox>
            <mx:Spacer width="100%"/>
         </mx:HBox>
         <mx:HBox id="Box_CCatEditViewCommands" backgroundColor="0xD0D0D0" verticalAlign="middle" height="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="solid" borderThickness="0">
            <mx:Spacer width="100%"/>
            <mx:Button id="Button_CreateCollisionCategory" toolTip="New Collision Category" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="true" cornerRadius="0" disabledIcon="@Embed('res/collision/create-category-disabled.png')" selectedDisabledIcon="@Embed('res/collision/create-category-disabled.png')" upIcon="@Embed('res/collision/create-category.png')" downIcon="@Embed('res/collision/create-category-sel.png')" overIcon="@Embed('res/collision/create-category.png')" selectedUpIcon="@Embed('res/collision/create-category-sel.png')" selectedOverIcon="@Embed('res/collision/create-category-sel.png')" selectedDownIcon="@Embed('res/collision/create-category.png')"   />
            <mx:Spacer width="20"/>
            <mx:Button id="Button_DeleteCollisionCategory" toolTip="Delete Collision Category" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/command/command-delete.png')" disabledIcon="@Embed('res/command/command-delete-disabled.png')" />
            <mx:Spacer width="36"/>
            <mx:HBox backgroundColor="0xFFFFFF" verticalAlign="middle"
                     paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
                     horizontalScrollPolicy="off" verticalScrollPolicy="off"
                     horizontalGap="0" verticalGap="0" borderThickness="0">
               <mx:Spacer width="3"/>
               <mx:CheckBox id="CheckBox_CollisionCategory_HarmoniousCategory" label="Harmonious Category"/>
               <mx:Spacer width="6"/>
               <mx:CheckBox id="CheckBox_CollisionCategory_DefaultCategory" label="Default Category"/>
            </mx:HBox>
            <mx:Spacer width="6"/>
            <mx:Label id="Label_CollisionCategoryName" text="Name:" textAlign="right"/>
            <mx:TextInput id="Text_CollisionCategoryName" text="" width="200"/>
            <!--
            <mx:Spacer width="10"/>
            <mx:Button id="Button_CollisionCategoryHelp" toolTip="Editing Help" focusEnabled="false" fontSize="8"  width="27" height="27" toggle="false" cornerRadius="0" icon="@Embed('res/editor/editor-help.png')" click="OnClickTutorialLink(event)" />
            -->
            <mx:Spacer width="100%"/>
         </mx:HBox>
      </mx:ViewStack>
      <mx:HBox id="Box_SwitchViewCommands" backgroundColor="0xA0A0A0" borderStyle="none" height="100%" horizontalGap="0" verticalGap="0" paddingTop="1" paddingLeft="0" paddingRight="0" paddingBottom="1" borderThickness="0">
         <mx:Button id="Button_ToggleCCatEditView" toggle="true" toolTip="Edit Collision Categories" click="OnToggleCCatEditView ();" focusEnabled="false" fontSize="8"  width="27" height="27" cornerRadius="0" icon="@Embed('res/file/design-edit-ccats.png')" downIcon="@Embed('res/file/design-edit-ccats-sel.png')" selectedUpIcon="@Embed('res/file/design-edit-entities.png')" selectedDisabledIcon="@Embed('res/file/design-edit-entities-disabled.png')" selectedOverIcon="@Embed('res/file/design-edit-entities.png')" selectedDownIcon="@Embed('res/file/design-edit-entities-sel.png')" />
         <mx:Spacer width="2"/>
      </mx:HBox>

   </mx:ApplicationControlBar>


   <mx:VBox width="100%" height="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderStyle="none" borderThickness="0" horizontalGap="0" verticalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">

      <mx:Spacer height="3"/>

      <mx:ViewStack id="ViewStack_EditView" borderStyle="none" creationPolicy="all"  width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
         <mx:HBox id="EntityDesignView" direction="horizontal" borderStyle="solid" height="100%" width="100%" 
               paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" 
               horizontalScrollPolicy="off" verticalScrollPolicy="off"
               horizontalGap="0" verticalGap="0" borderThickness="0"
               >
            <mx:HBox borderStyle="solid"  backgroundColor="0xE0E0E0" height="100%" width="100%"
                        paddingTop="0" paddingLeft="1" paddingRight="0" paddingBottom="0"
                        horizontalScrollPolicy="off" verticalScrollPolicy="off"
                        horizontalGap="0" verticalGap="0" borderThickness="0">
               <mx:TabNavigator id="Box_CreateCommands" backgroundColor="0xE0E0E0" width="79" height="100%" creationPolicy="all" textAlign="center">
                  <mx:Box icon="@Embed('res/create/create-panel-normal.png')" toolTip="General Components" direction="vertical" borderStyle="solid" width="100%" height="100%"
                           paddingTop="5" paddingLeft="1" paddingRight="1" paddingBottom="1" textAlign="center"
                           horizontalGap="0" verticalGap="0" verticalScrollPolicy="off">
                     <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="73" 
                            tileWidth="36" tileHeight="36" 
                            horizontalGap="1" verticalGap="1" 
                            paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                        <mx:Button id="Button_CreateBox" click="ViewStack_CiShapes.selectedChild=CiShapeRectagelePanel;" toolTip="Create Box" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/box.png')" downIcon="@Embed('res/create/box-sel.png')" overIcon="@Embed('res/create/box.png')" selectedUpIcon="@Embed('res/create/box-sel.png')" selectedOverIcon="@Embed('res/create/box-sel.png')" selectedDownIcon="@Embed('res/create/box.png')"   />
                        <mx:Button id="Button_CreateBall" click="ViewStack_CiShapes.selectedChild=CiShapeCirclePanel;" toolTip="Create Ball" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/ball.png')" downIcon="@Embed('res/create/ball-sel.png')" overIcon="@Embed('res/create/ball.png')" selectedUpIcon="@Embed('res/create/ball-sel.png')" selectedOverIcon="@Embed('res/create/ball-sel.png')" selectedDownIcon="@Embed('res/create/ball.png')"   />
                        <mx:Button id="Button_CreatePolygon" click="ViewStack_CiShapes.selectedChild=CiShapePolygonPanel;" toolTip="Create Polygon" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polygon.png')" downIcon="@Embed('res/create/polygon-sel.png')" overIcon="@Embed('res/create/polygon.png')" selectedUpIcon="@Embed('res/create/polygon-sel.png')" selectedOverIcon="@Embed('res/create/polygon-sel.png')" selectedDownIcon="@Embed('res/create/polygon.png')"   />
                        <mx:Button id="Button_CreatePolyline" click="ViewStack_CiShapes.selectedChild=CiShapePolylinePanel;" toolTip="Create Polyline" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polyline.png')" downIcon="@Embed('res/create/polyline-sel.png')" overIcon="@Embed('res/create/polyline.png')" selectedUpIcon="@Embed('res/create/polyline-sel.png')" selectedOverIcon="@Embed('res/create/polyline-sel.png')" selectedDownIcon="@Embed('res/create/polyline.png')"   />
                     </mx:Tile>
                     <mx:Spacer height="5"/>
                     <!--
                     <mx:HBox id="Box_ShapeInitialProperties" horizontalAlign="center" width="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="solid" borderThickness="1">
                        <mx:Spacer width="100%"/>
                        <mx:VBox horizontalAlign="left" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="2" horizontalGap="0" verticalGap="0" borderStyle="none" borderThickness="0">
                           <mx:CheckBox id="CheckBox_EnablePhysics" click="Runtime.mShape_EnablePhysics=CheckBox_EnablePhysics.selected;" label="Physics" selected="true"/>
                           <mx:Canvas borderStyle="none" width="100%">
                              <mx:ColorPicker id="ColorPicker_BackgroundColor" x="29" y="13" change="Runtime.mShape_BackgroundColor=ColorPicker_BackgroundColor.selectedColor" showTextField="true" selectedColor="0x5555FF"/>
                              <mx:ColorPicker id="ColorPicker_BorderColor" x="16" y="2" change="Runtime.mShape_BorderColor=ColorPicker_BorderColor.selectedColor" showTextField="true" selectedColor="0xFF000000"/>
                           </mx:Canvas>
                        </mx:VBox>
                        <mx:Spacer width="100%"/>
                     </mx:HBox>
                     -->
                     <mx:Spacer height="5"/>
                     <!--
                     <mx:HBox verticalAlign="middle" height="18" width="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="solid" borderThickness="1">
                        <mx:Spacer width="100%"/>
                        <mx:Button id="Button_CI_Box" click="Button_CI_Box.selected=true; Button_CI_Ball.selected=false; Button_CI_Polygon.selected=false; Button_CI_Polyline.selected=false; ViewStack_CiShapes.selectedChild=CiShapeRectagelePanel;" toolTip="Create C.I. Boxes" selected="true" focusEnabled="false" fontSize="8" width="16" height="16" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/small-box.png')" downIcon="@Embed('res/create/small-box-sel.png')" overIcon="@Embed('res/create/small-box.png')" selectedUpIcon="@Embed('res/create/small-box-sel.png')" selectedOverIcon="@Embed('res/create/small-box-sel.png')" selectedDownIcon="@Embed('res/create/small-box.png')"   />
                        <mx:Button id="Button_CI_Ball" click="Button_CI_Box.selected=false; Button_CI_Ball.selected=true; Button_CI_Polygon.selected=false; Button_CI_Polyline.selected=false; ViewStack_CiShapes.selectedChild=CiShapeCirclePanel;" toolTip="Create C.I. Balls" focusEnabled="false" fontSize="8" width="16" height="16" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/small-ball.png')" downIcon="@Embed('res/create/small-ball-sel.png')" overIcon="@Embed('res/create/small-ball.png')" selectedUpIcon="@Embed('res/create/small-ball-sel.png')" selectedOverIcon="@Embed('res/create/small-ball-sel.png')" selectedDownIcon="@Embed('res/create/small-ball.png')"   />
                        <mx:Button id="Button_CI_Polygon" click="Button_CI_Box.selected=false; Button_CI_Ball.selected=false; Button_CI_Polygon.selected=true; Button_CI_Polyline.selected=false; ViewStack_CiShapes.selectedChild=CiShapePolygonPanel;" toolTip="Create C.I. Polygons" focusEnabled="false" fontSize="8" width="16" height="16" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/small-polygon.png')" downIcon="@Embed('res/create/small-polygon-sel.png')" overIcon="@Embed('res/create/small-polygon.png')" selectedUpIcon="@Embed('res/create/small-polygon-sel.png')" selectedOverIcon="@Embed('res/create/small-polygon-sel.png')" selectedDownIcon="@Embed('res/create/small-polygon.png')"   />
                        <mx:Button id="Button_CI_Polyline" click="Button_CI_Box.selected=false; Button_CI_Ball.selected=false; Button_CI_Polygon.selected=false; Button_CI_Polyline.selected=true; ViewStack_CiShapes.selectedChild=CiShapePolylinePanel;" toolTip="Create C.I. Polylines" focusEnabled="false" fontSize="8" width="16" height="16" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/small-polyline.png')" downIcon="@Embed('res/create/small-polyline-sel.png')" overIcon="@Embed('res/create/small-polyline.png')" selectedUpIcon="@Embed('res/create/small-polyline-sel.png')" selectedOverIcon="@Embed('res/create/small-polyline-sel.png')" selectedDownIcon="@Embed('res/create/small-polyline.png')"   />
                        <mx:Spacer width="100%"/>
                     </mx:HBox>
                     <mx:Spacer height="2"/>
                     -->
                     <mx:HBox horizontalAlign="center" height="51" width="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="solid" borderThickness="0">
                        <mx:ViewStack id="ViewStack_CiShapes" borderStyle="none" creationPolicy="all" width="100%" height="49">
                           <mx:Tile id="CiShapeRectagelePanel" direction="horizontal" borderStyle="none" width="100%" height="100%"
                                  tileWidth="23" tileHeight="23"
                                  horizontalGap="1" verticalGap="1"
                                  paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                              <mx:Button id="Button_CreateBox_Static" toolTip="Create C.I. Static Box" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/box_static.png')" downIcon="@Embed('res/create/box-sel_static.png')" overIcon="@Embed('res/create/box_static.png')" selectedUpIcon="@Embed('res/create/box-sel_static.png')" selectedOverIcon="@Embed('res/create/box-sel_static.png')" selectedDownIcon="@Embed('res/create/box_static.png')"   />
                              <mx:Button id="Button_CreateBox_Movable" toolTip="Create C.I. Moveable Box" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/box_movable.png')" downIcon="@Embed('res/create/box-sel_movable.png')" overIcon="@Embed('res/create/box_movable.png')" selectedUpIcon="@Embed('res/create/box-sel_movable.png')" selectedOverIcon="@Embed('res/create/box-sel_movable.png')" selectedDownIcon="@Embed('res/create/box_movable.png')"   />
                              <mx:Button id="Button_CreateBox_Breakable" toolTip="Create C.I. Breakable Box" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/box_breakable.png')" downIcon="@Embed('res/create/box-sel_breakable.png')" overIcon="@Embed('res/create/box_breakable.png')" selectedUpIcon="@Embed('res/create/box-sel_breakable.png')" selectedOverIcon="@Embed('res/create/box-sel_breakable.png')" selectedDownIcon="@Embed('res/create/box_breakable.png')"   />
                              <mx:Button id="Button_CreateBox_Infected" toolTip="Create C.I. Infected Box" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/box_infected.png')" downIcon="@Embed('res/create/box-sel_infected.png')" overIcon="@Embed('res/create/box_infected.png')" selectedUpIcon="@Embed('res/create/box-sel_infected.png')" selectedOverIcon="@Embed('res/create/box-sel_infected.png')" selectedDownIcon="@Embed('res/create/box_infected.png')"   />
                              <mx:Button id="Button_CreateBox_Uninfected" toolTip="Create C.I. Uninfected Box" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/box_uninfected.png')" downIcon="@Embed('res/create/box-sel_uninfected.png')" overIcon="@Embed('res/create/box_uninfected.png')" selectedUpIcon="@Embed('res/create/box-sel_uninfected.png')" selectedOverIcon="@Embed('res/create/box-sel_uninfected.png')" selectedDownIcon="@Embed('res/create/box_uninfected.png')"   />
                              <mx:Button id="Button_CreateBox_Dontinfect" toolTip="Create C.I. &quot;Don't Infect Me&quot; Box" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/box_dontinfect.png')" downIcon="@Embed('res/create/box-sel_dontinfect.png')" overIcon="@Embed('res/create/box_dontinfect.png')" selectedUpIcon="@Embed('res/create/box-sel_dontinfect.png')" selectedOverIcon="@Embed('res/create/box-sel_dontinfect.png')" selectedDownIcon="@Embed('res/create/box_dontinfect.png')"   />
                           </mx:Tile>
                           <mx:Tile id="CiShapeCirclePanel" direction="horizontal" borderStyle="none" width="100%" height="100%"
                                  tileWidth="23" tileHeight="23"
                                  horizontalGap="1" verticalGap="1"
                                  paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                              <mx:Button id="Button_CreateBall_Static" toolTip="Create C.I. Static Ball" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/ball_static.png')" downIcon="@Embed('res/create/ball-sel_static.png')" overIcon="@Embed('res/create/ball_static.png')" selectedUpIcon="@Embed('res/create/ball-sel_static.png')" selectedOverIcon="@Embed('res/create/ball-sel_static.png')" selectedDownIcon="@Embed('res/create/ball_static.png')"   />
                              <mx:Button id="Button_CreateBall_Movable" toolTip="Create C.I. Moveable Ball" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/ball_movable.png')" downIcon="@Embed('res/create/ball-sel_movable.png')" overIcon="@Embed('res/create/ball_movable.png')" selectedUpIcon="@Embed('res/create/ball-sel_movable.png')" selectedOverIcon="@Embed('res/create/ball-sel_movable.png')" selectedDownIcon="@Embed('res/create/ball_movable.png')"   />
                              <mx:Button id="Button_CreateBall_Breakable" toolTip="Create C.I. Breakable Ball" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/ball_breakable.png')" downIcon="@Embed('res/create/ball-sel_breakable.png')" overIcon="@Embed('res/create/ball_breakable.png')" selectedUpIcon="@Embed('res/create/ball-sel_breakable.png')" selectedOverIcon="@Embed('res/create/ball-sel_breakable.png')" selectedDownIcon="@Embed('res/create/ball_breakable.png')"   />
                              <mx:Button id="Button_CreateBall_Infected" toolTip="Create C.I. Infected Ball" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/ball_infected.png')" downIcon="@Embed('res/create/ball-sel_infected.png')" overIcon="@Embed('res/create/ball_infected.png')" selectedUpIcon="@Embed('res/create/ball-sel_infected.png')" selectedOverIcon="@Embed('res/create/ball-sel_infected.png')" selectedDownIcon="@Embed('res/create/ball_infected.png')"   />
                              <mx:Button id="Button_CreateBall_Uninfected" toolTip="Create C.I. Uninfected Ball" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/ball_uninfected.png')" downIcon="@Embed('res/create/ball-sel_uninfected.png')" overIcon="@Embed('res/create/ball_uninfected.png')" selectedUpIcon="@Embed('res/create/ball-sel_uninfected.png')" selectedOverIcon="@Embed('res/create/ball-sel_uninfected.png')" selectedDownIcon="@Embed('res/create/ball_uninfected.png')"   />
                              <mx:Button id="Button_CreateBall_DontInfect" toolTip="Create C.I. &quot;Don't Infect Me&quot; Ball" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/ball_dontinfect.png')" downIcon="@Embed('res/create/ball-sel_dontinfect.png')" overIcon="@Embed('res/create/ball_dontinfect.png')" selectedUpIcon="@Embed('res/create/ball-sel_dontinfect.png')" selectedOverIcon="@Embed('res/create/ball-sel_dontinfect.png')" selectedDownIcon="@Embed('res/create/ball_dontinfect.png')"   />
                           </mx:Tile>
                           <mx:Tile id="CiShapePolygonPanel" direction="horizontal" borderStyle="none" width="100%" height="100%"
                                  tileWidth="23" tileHeight="23"
                                  horizontalGap="1" verticalGap="1"
                                  paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                              <mx:Button id="Button_CreatePolygon_Static" toolTip="Create C.I. Static Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polygon_static.png')" downIcon="@Embed('res/create/polygon-sel_static.png')" overIcon="@Embed('res/create/polygon_static.png')" selectedUpIcon="@Embed('res/create/polygon-sel_static.png')" selectedOverIcon="@Embed('res/create/polygon-sel_static.png')" selectedDownIcon="@Embed('res/create/polygon_static.png')"   />
                              <mx:Button id="Button_CreatePolygon_Movable" toolTip="Create C.I. Moveable Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polygon_movable.png')" downIcon="@Embed('res/create/polygon-sel_movable.png')" overIcon="@Embed('res/create/polygon_movable.png')" selectedUpIcon="@Embed('res/create/polygon-sel_movable.png')" selectedOverIcon="@Embed('res/create/polygon-sel_movable.png')" selectedDownIcon="@Embed('res/create/polygon_movable.png')"   />
                              <mx:Button id="Button_CreatePolygon_Breakable" toolTip="Create C.I. Breakable Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polygon_breakable.png')" downIcon="@Embed('res/create/polygon-sel_breakable.png')" overIcon="@Embed('res/create/polygon_breakable.png')" selectedUpIcon="@Embed('res/create/polygon-sel_breakable.png')" selectedOverIcon="@Embed('res/create/polygon-sel_breakable.png')" selectedDownIcon="@Embed('res/create/polygon_breakable.png')"   />
                              <mx:Button id="Button_CreatePolygon_Infected" toolTip="Create C.I. Infected Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polygon_infected.png')" downIcon="@Embed('res/create/polygon-sel_infected.png')" overIcon="@Embed('res/create/polygon_infected.png')" selectedUpIcon="@Embed('res/create/polygon-sel_infected.png')" selectedOverIcon="@Embed('res/create/polygon-sel_infected.png')" selectedDownIcon="@Embed('res/create/polygon_infected.png')"   />
                              <mx:Button id="Button_CreatePolygon_Uninfected" toolTip="Create C.I. Uninfected Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polygon_uninfected.png')" downIcon="@Embed('res/create/polygon-sel_uninfected.png')" overIcon="@Embed('res/create/polygon_uninfected.png')" selectedUpIcon="@Embed('res/create/polygon-sel_uninfected.png')" selectedOverIcon="@Embed('res/create/polygon-sel_uninfected.png')" selectedDownIcon="@Embed('res/create/polygon_uninfected.png')"   />
                              <mx:Button id="Button_CreatePolygon_Dontinfect" toolTip="Create C.I. &quot;Don't Infect Me&quot; Polygon" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polygon_dontinfect.png')" downIcon="@Embed('res/create/polygon-sel_dontinfect.png')" overIcon="@Embed('res/create/polygon_dontinfect.png')" selectedUpIcon="@Embed('res/create/polygon-sel_dontinfect.png')" selectedOverIcon="@Embed('res/create/polygon-sel_dontinfect.png')" selectedDownIcon="@Embed('res/create/polygon_dontinfect.png')"   />
                           </mx:Tile>
                           <mx:Tile id="CiShapePolylinePanel" direction="horizontal" borderStyle="none" width="100%" height="100%"
                                  tileWidth="23" tileHeight="23"
                                  horizontalGap="1" verticalGap="1"
                                  paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                              <mx:Button id="Button_CreatePolyline_Static" toolTip="Create C.I. Static Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polyline_static.png')" downIcon="@Embed('res/create/polyline-sel_static.png')" overIcon="@Embed('res/create/polyline_static.png')" selectedUpIcon="@Embed('res/create/polyline-sel_static.png')" selectedOverIcon="@Embed('res/create/polyline-sel_static.png')" selectedDownIcon="@Embed('res/create/polyline_static.png')"   />
                              <mx:Button id="Button_CreatePolyline_Movable" toolTip="Create C.I. Moveable Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polyline_movable.png')" downIcon="@Embed('res/create/polyline-sel_movable.png')" overIcon="@Embed('res/create/polyline_movable.png')" selectedUpIcon="@Embed('res/create/polyline-sel_movable.png')" selectedOverIcon="@Embed('res/create/polyline-sel_movable.png')" selectedDownIcon="@Embed('res/create/polyline_movable.png')"   />
                              <mx:Button id="Button_CreatePolyline_Breakable" toolTip="Create C.I. Breakable Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polyline_breakable.png')" downIcon="@Embed('res/create/polyline-sel_breakable.png')" overIcon="@Embed('res/create/polyline_breakable.png')" selectedUpIcon="@Embed('res/create/polyline-sel_breakable.png')" selectedOverIcon="@Embed('res/create/polyline-sel_breakable.png')" selectedDownIcon="@Embed('res/create/polyline_breakable.png')"   />
                              <mx:Button id="Button_CreatePolyline_Infected" toolTip="Create C.I. Infected Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polyline_infected.png')" downIcon="@Embed('res/create/polyline-sel_infected.png')" overIcon="@Embed('res/create/polyline_infected.png')" selectedUpIcon="@Embed('res/create/polyline-sel_infected.png')" selectedOverIcon="@Embed('res/create/polyline-sel_infected.png')" selectedDownIcon="@Embed('res/create/polyline_infected.png')"   />
                              <mx:Button id="Button_CreatePolyline_Uninfected" toolTip="Create C.I. Uninfected Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polyline_uninfected.png')" downIcon="@Embed('res/create/polyline-sel_uninfected.png')" overIcon="@Embed('res/create/polyline_uninfected.png')" selectedUpIcon="@Embed('res/create/polyline-sel_uninfected.png')" selectedOverIcon="@Embed('res/create/polyline-sel_uninfected.png')" selectedDownIcon="@Embed('res/create/polyline_uninfected.png')"   />
                              <mx:Button id="Button_CreatePolyline_Dontinfect" toolTip="Create C.I. &quot;Don't Infect Me&quot; Polyline" focusEnabled="false" fontSize="8" width="23" height="23" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/polyline_dontinfect.png')" downIcon="@Embed('res/create/polyline-sel_dontinfect.png')" overIcon="@Embed('res/create/polyline_dontinfect.png')" selectedUpIcon="@Embed('res/create/polyline-sel_dontinfect.png')" selectedOverIcon="@Embed('res/create/polyline-sel_dontinfect.png')" selectedDownIcon="@Embed('res/create/polyline_dontinfect.png')"   />
                           </mx:Tile>
                        </mx:ViewStack>
                     </mx:HBox>
                     <mx:Spacer height="10"/>
                     <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="110"
                            tileWidth="36" tileHeight="36"
                            horizontalGap="1" verticalGap="1"
                            paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                        <mx:Button id="Button_CreateJoint_Hinge" toolTip="Create Hinge Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/joint_hinge.png')" downIcon="@Embed('res/create/joint-sel_hinge.png')" overIcon="@Embed('res/create/joint_hinge.png')" selectedUpIcon="@Embed('res/create/joint-sel_hinge.png')" selectedOverIcon="@Embed('res/create/joint-sel_hinge.png')" selectedDownIcon="@Embed('res/create/joint_hinge.png')"   />
                        <mx:Button id="Button_CreateJoint_Slider" toolTip="Create Slider Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/joint_slider.png')" downIcon="@Embed('res/create/joint-sel_slider.png')" overIcon="@Embed('res/create/joint_slider.png')" selectedUpIcon="@Embed('res/create/joint-sel_slider.png')" selectedOverIcon="@Embed('res/create/joint-sel_slider.png')" selectedDownIcon="@Embed('res/create/joint_slider.png')"   />
                        <mx:Button id="Button_CreateJoint_Distance" toolTip="Create Distance Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/joint_distance.png')" downIcon="@Embed('res/create/joint-sel_distance.png')" overIcon="@Embed('res/create/joint_distance.png')" selectedUpIcon="@Embed('res/create/joint-sel_distance.png')" selectedOverIcon="@Embed('res/create/joint-sel_distance.png')" selectedDownIcon="@Embed('res/create/joint_distance.png')"   />
                        <mx:Button id="Button_CreateJoint_Spring" toolTip="Create Spring Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/joint_spring.png')" downIcon="@Embed('res/create/joint-sel_spring.png')" overIcon="@Embed('res/create/joint_spring.png')" selectedUpIcon="@Embed('res/create/joint-sel_spring.png')" selectedOverIcon="@Embed('res/create/joint-sel_spring.png')" selectedDownIcon="@Embed('res/create/joint_spring.png')"   />
                        <mx:Button id="Button_CreateJoint_Weld" toolTip="Create Weld Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/joint_weld.png')" downIcon="@Embed('res/create/joint-sel_weld.png')" overIcon="@Embed('res/create/joint_weld.png')" selectedUpIcon="@Embed('res/create/joint-sel_weld.png')" selectedOverIcon="@Embed('res/create/joint-sel_weld.png')" selectedDownIcon="@Embed('res/create/joint_weld.png')"   />
                        <!--
                        <mx:Button id="Button_CreateJoint_HingeSlider" toolTip="Create Slider Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/joint_hinge_slider.png')" downIcon="@Embed('res/create/joint-sel_hinge_slider.png')" overIcon="@Embed('res/create/joint_hinge_slider.png')" selectedUpIcon="@Embed('res/create/joint-sel_hinge_slider.png')" selectedOverIcon="@Embed('res/create/joint-sel_hinge_slider.png')" selectedDownIcon="@Embed('res/create/joint_hinge_slider.png')"   />
                        -->
                        <mx:Button id="Button_CreateJoint_Dummy" toolTip="Create Dummy Joint" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/joint_dummy.png')" downIcon="@Embed('res/create/joint-sel_dummy.png')" overIcon="@Embed('res/create/joint_dummy.png')" selectedUpIcon="@Embed('res/create/joint-sel_dummy.png')" selectedOverIcon="@Embed('res/create/joint-sel_dummy.png')" selectedDownIcon="@Embed('res/create/joint_dummy.png')"   />
                     </mx:Tile>
                     <mx:Spacer height="10"/>
                     <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="73"
                            tileWidth="36" tileHeight="36"
                            horizontalGap="1" verticalGap="1"
                            paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                        <mx:Button id="Button_CreateLinearForce" toolTip="Create Force Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/force-linear.png')" downIcon="@Embed('res/create/force-linear-sel.png')" overIcon="@Embed('res/create/force-linear.png')" selectedUpIcon="@Embed('res/create/force-linear-sel.png')" selectedOverIcon="@Embed('res/create/force-linear-sel.png')" selectedDownIcon="@Embed('res/create/force-linear.png')"   />
                        <mx:Button id="Button_CreateAngularForce" toolTip="Create Torque Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/force-angular.png')" downIcon="@Embed('res/create/force-angular-sel.png')" overIcon="@Embed('res/create/force-angular.png')" selectedUpIcon="@Embed('res/create/force-angular-sel.png')" selectedOverIcon="@Embed('res/create/force-angular-sel.png')" selectedDownIcon="@Embed('res/create/force-angular.png')"   />
                        <mx:Button id="Button_CreateLinearImpulse" toolTip="Create Linear Impulse Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/impulse-linear.png')" downIcon="@Embed('res/create/impulse-linear-sel.png')" overIcon="@Embed('res/create/impulse-linear.png')" selectedUpIcon="@Embed('res/create/impulse-linear-sel.png')" selectedOverIcon="@Embed('res/create/impulse-linear-sel.png')" selectedDownIcon="@Embed('res/create/impulse-linear.png')"   />
                        <mx:Button id="Button_CreateAngularImpulse" toolTip="Create Angular Impulse Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/impulse-angular.png')" downIcon="@Embed('res/create/impulse-angular-sel.png')" overIcon="@Embed('res/create/impulse-angular.png')" selectedUpIcon="@Embed('res/create/impulse-angular-sel.png')" selectedOverIcon="@Embed('res/create/impulse-angular-sel.png')" selectedDownIcon="@Embed('res/create/impulse-angular.png')"   />
                     </mx:Tile>
                     <mx:Spacer height="10"/>
                     <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="110"
                            tileWidth="36" tileHeight="36"
                            horizontalGap="1" verticalGap="1"
                            paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                        <mx:Button id="Button_CreateCamera" toolTip="Create Camera" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" disabledIcon="@Embed('res/create/camera-disabled.png')"  upIcon="@Embed('res/create/camera.png')" downIcon="@Embed('res/create/camera-sel.png')" overIcon="@Embed('res/create/camera.png')" selectedUpIcon="@Embed('res/create/camera-sel.png')" selectedOverIcon="@Embed('res/create/camera-sel.png')" selectedDownIcon="@Embed('res/create/camera.png')"   />
                        <mx:Button id="Button_CreateText" toolTip="Create Text" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/text.png')" downIcon="@Embed('res/create/text-sel.png')" overIcon="@Embed('res/create/text.png')" selectedUpIcon="@Embed('res/create/text-sel.png')" selectedOverIcon="@Embed('res/create/text-sel.png')" selectedDownIcon="@Embed('res/create/text.png')"   />
                        <mx:Button id="Button_CreateGravityController" toolTip="Create Cravity Controller" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" disabledIcon="@Embed('res/create/gravity-controller-disabled.png')" selectedDisabledIcon="@Embed('res/create/gravity-controller-disabled.png')" upIcon="@Embed('res/create/gravity-controller.png')" downIcon="@Embed('res/create/gravity-controller-sel.png')" overIcon="@Embed('res/create/gravity-controller.png')" selectedUpIcon="@Embed('res/create/gravity-controller-sel.png')" selectedOverIcon="@Embed('res/create/gravity-controller-sel.png')" selectedDownIcon="@Embed('res/create/gravity-controller.png')"   />
                        <mx:Button id="Button_CreateTextButton" toolTip="Create Text Button" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/text-button.png')" downIcon="@Embed('res/create/text-button-sel.png')" overIcon="@Embed('res/create/text-button.png')" selectedUpIcon="@Embed('res/create/text-button-sel.png')" selectedOverIcon="@Embed('res/create/text-button-sel.png')" selectedDownIcon="@Embed('res/create/text-button.png')"   />
                        <mx:Button id="Button_CreateBox_Bomb" toolTip="Create Bomb Box" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/box_bomb.png')" downIcon="@Embed('res/create/box-sel_bomb.png')" overIcon="@Embed('res/create/box_bomb.png')" selectedUpIcon="@Embed('res/create/box-sel_bomb.png')" selectedOverIcon="@Embed('res/create/box-sel_bomb.png')" selectedDownIcon="@Embed('res/create/box_bomb.png')"   />
                        <mx:Button id="Button_CreateBall_Bomb" toolTip="Create Bomb Ball" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/ball_bomb.png')" downIcon="@Embed('res/create/ball-sel_bomb.png')" overIcon="@Embed('res/create/ball_bomb.png')" selectedUpIcon="@Embed('res/create/ball-sel_bomb.png')" selectedOverIcon="@Embed('res/create/ball-sel_bomb.png')" selectedDownIcon="@Embed('res/create/ball_bomb.png')"   />
                     </mx:Tile>
                    <!--
                     <mx:Spacer height="5"/>
                     <mx:HBox horizontalAlign="center" width="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="solid" borderThickness="1">
                        <mx:Spacer width="100%"/>
                        <mx:VBox horizontalAlign="left" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="2" horizontalGap="0" verticalGap="0" borderStyle="none" borderThickness="0">
                           <mx:CheckBox id="CheckBox_CollideConnected" label="Collide"/>
                           <mx:Label id="Label_CollideConnected" text="Two Shapes" click="CheckBox_CollideConnected.selected = ! CheckBox_CollideConnected.selected" textAlign="right" width="100%"/>
                        </mx:VBox>
                        <mx:Spacer width="100%"/>
                     </mx:HBox>
                     -->
                     <mx:Spacer height="100%"/>
                  </mx:Box>
                  <mx:Box icon="@Embed('res/create/create-panel-trigger.png')" toolTip="Trigger Components" direction="vertical" borderStyle="solid" width="83" height="100%"
                           paddingTop="5" paddingLeft="1" paddingRight="1" paddingBottom="1" textAlign="center"
                           horizontalGap="0" verticalGap="0" verticalScrollPolicy="off">
                     <mx:VBox verticalAlign="middle" width="100%" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" horizontalGap="0" verticalGap="0" borderStyle="none">
                        <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="110" 
                               horizontalGap="1" verticalGap="1" 
                               paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                           <mx:Button id="Button_CreateAction" toolTip="Create Function" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/action.png')" downIcon="@Embed('res/create/action-sel.png')" overIcon="@Embed('res/create/action.png')" selectedUpIcon="@Embed('res/create/action-sel.png')" selectedOverIcon="@Embed('res/create/action-sel.png')" selectedDownIcon="@Embed('res/create/action.png')"   />
                           <mx:Button id="Button_CreateTask" toolTip="Create Task Aggregator" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/task.png')" downIcon="@Embed('res/create/task-sel.png')" overIcon="@Embed('res/create/task.png')" selectedUpIcon="@Embed('res/create/task-sel.png')" selectedOverIcon="@Embed('res/create/task-sel.png')" selectedDownIcon="@Embed('res/create/task.png')"   />
                           <mx:Button id="Button_CreateCondition" toolTip="Create Basic Condition" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/condition.png')" downIcon="@Embed('res/create/condition-sel.png')" overIcon="@Embed('res/create/condition.png')" selectedUpIcon="@Embed('res/create/condition-sel.png')" selectedOverIcon="@Embed('res/create/condition-sel.png')" selectedDownIcon="@Embed('res/create/condition.png')"   />
                           <mx:Button id="Button_CreateConditionDoor" toolTip="Create Condition Gate" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/condition_door.png')" downIcon="@Embed('res/create/condition_door-sel.png')" overIcon="@Embed('res/create/condition_door.png')" selectedUpIcon="@Embed('res/create/condition_door-sel.png')" selectedOverIcon="@Embed('res/create/condition_door-sel.png')" selectedDownIcon="@Embed('res/create/condition_door.png')"   />
                           <mx:Button id="Button_CreateInputEntityAssigner" toolTip="Create Input Entitiy Manual Assigner" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/input_entity_limiter.png')" downIcon="@Embed('res/create/input_entity_limiter-sel.png')" overIcon="@Embed('res/create/input_entity_limiter.png')" selectedUpIcon="@Embed('res/create/input_entity_limiter-sel.png')" selectedOverIcon="@Embed('res/create/input_entity_limiter-sel.png')" selectedDownIcon="@Embed('res/create/input_entity_limiter.png')"   />
                           <mx:Button id="Button_CreateInputEntityPairAssigner" toolTip="Create Input Entitiy Pair Manual Assigner" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/input_entity_pair_limiter.png')" downIcon="@Embed('res/create/input_entity_pair_limiter-sel.png')" overIcon="@Embed('res/create/input_entity_pair_limiter.png')" selectedUpIcon="@Embed('res/create/input_entity_pair_limiter-sel.png')" selectedOverIcon="@Embed('res/create/input_entity_pair_limiter-sel.png')" selectedDownIcon="@Embed('res/create/input_entity_pair_limiter.png')"   />
                           <!--
                           <mx:Button id="Button_CreateInputEntityScriptFilter" toolTip="Create Input Entitiy Script Filter" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/input_entity_filter.png')" downIcon="@Embed('res/create/input_entity_filter-sel.png')" overIcon="@Embed('res/create/input_entity_filter.png')" selectedUpIcon="@Embed('res/create/input_entity_filter-sel.png')" selectedOverIcon="@Embed('res/create/input_entity_filter-sel.png')" selectedDownIcon="@Embed('res/create/input_entity_filter.png')"   />
                           <mx:Button id="Button_CreateInputEntityPairScriptFilter" toolTip="Create Input Entitiy Pair Script Filter" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/input_entity_pair_filter.png')" downIcon="@Embed('res/create/input_entity_pair_filter-sel.png')" overIcon="@Embed('res/create/input_entity_pair_filter.png')" selectedUpIcon="@Embed('res/create/input_entity_pair_filter-sel.png')" selectedOverIcon="@Embed('res/create/input_entity_pair_filter-sel.png')" selectedDownIcon="@Embed('res/create/input_entity_pair_filter.png')"   />
                           -->
                       </mx:Tile>
                        <mx:Spacer height="10"/>
                        <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="332" 
                               horizontalGap="1" verticalGap="1" 
                               paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                           <mx:Button id="Button_CreateEventHandler0" toolTip="Event - Before Level Initializing" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_level_before_initilizing.png')" downIcon="@Embed('res/create/event_on_level_before_initilizing-sel.png')" overIcon="@Embed('res/create/event_on_level_before_initilizing.png')" selectedUpIcon="@Embed('res/create/event_on_level_before_initilizing-sel.png')" selectedOverIcon="@Embed('res/create/event_on_level_before_initilizing-sel.png')" selectedDownIcon="@Embed('res/create/event_on_level_before_initilizing.png')"   />
                           <mx:Button id="Button_CreateEventHandler1" toolTip="Event - After Level Initialized" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_level_after_initilized.png')" downIcon="@Embed('res/create/event_on_level_after_initilized-sel.png')" overIcon="@Embed('res/create/event_on_level_after_initilized.png')" selectedUpIcon="@Embed('res/create/event_on_level_after_initilized-sel.png')" selectedOverIcon="@Embed('res/create/event_on_level_after_initilized-sel.png')" selectedDownIcon="@Embed('res/create/event_on_level_after_initilized.png')"   />
                           <mx:Button id="Button_CreateEventHandler2" toolTip="Event - Before Level Updating" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_level_before_updating.png')" downIcon="@Embed('res/create/event_on_level_before_updating-sel.png')" overIcon="@Embed('res/create/event_on_level_before_updating.png')" selectedUpIcon="@Embed('res/create/event_on_level_before_updating-sel.png')" selectedOverIcon="@Embed('res/create/event_on_level_before_updating-sel.png')" selectedDownIcon="@Embed('res/create/event_on_level_before_updating.png')"   />
                           <mx:Button id="Button_CreateEventHandler3" toolTip="Event - After Level Updated" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_level_after_updated.png')" downIcon="@Embed('res/create/event_on_level_after_updated-sel.png')" overIcon="@Embed('res/create/event_on_level_after_updated.png')" selectedUpIcon="@Embed('res/create/event_on_level_after_updated-sel.png')" selectedOverIcon="@Embed('res/create/event_on_level_after_updated-sel.png')" selectedDownIcon="@Embed('res/create/event_on_level_after_updated.png')"   />
                           <mx:Button id="Button_CreateEventHandler4" toolTip="Event - Joint Reaches Lower Limit" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_joint_reach_lower_limit.png')" downIcon="@Embed('res/create/event_on_joint_reach_lower_limit-sel.png')" overIcon="@Embed('res/create/event_on_joint_reach_lower_limit.png')" selectedUpIcon="@Embed('res/create/event_on_joint_reach_lower_limit-sel.png')" selectedOverIcon="@Embed('res/create/event_on_joint_reach_lower_limit-sel.png')" selectedDownIcon="@Embed('res/create/event_on_joint_reach_lower_limit.png')"   />
                           <mx:Button id="Button_CreateEventHandler5" toolTip="Event - Joint Reaches Upper Limit" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_joint_reach_upper_limit.png')" downIcon="@Embed('res/create/event_on_joint_reach_upper_limit-sel.png')" overIcon="@Embed('res/create/event_on_joint_reach_upper_limit.png')" selectedUpIcon="@Embed('res/create/event_on_joint_reach_upper_limit-sel.png')" selectedOverIcon="@Embed('res/create/event_on_joint_reach_upper_limit-sel.png')" selectedDownIcon="@Embed('res/create/event_on_joint_reach_upper_limit.png')"   />
                           <mx:Button id="Button_CreateEventHandler8" toolTip="Event - Mouse Event (World)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_world_mouse_clicked.png')" downIcon="@Embed('res/create/event_on_world_mouse_clicked-sel.png')" overIcon="@Embed('res/create/event_on_world_mouse_clicked.png')" selectedUpIcon="@Embed('res/create/event_on_world_mouse_clicked-sel.png')" selectedOverIcon="@Embed('res/create/event_on_world_mouse_clicked-sel.png')" selectedDownIcon="@Embed('res/create/event_on_world_mouse_clicked.png')"   />
                           <mx:Button id="Button_CreateEventHandler58" toolTip="Event - Mouse Event (Shape)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_shape_mouse_clicked.png')" downIcon="@Embed('res/create/event_on_shape_mouse_clicked-sel.png')" overIcon="@Embed('res/create/event_on_shape_mouse_clicked.png')" selectedUpIcon="@Embed('res/create/event_on_shape_mouse_clicked-sel.png')" selectedOverIcon="@Embed('res/create/event_on_shape_mouse_clicked-sel.png')" selectedDownIcon="@Embed('res/create/event_on_shape_mouse_clicked.png')"   />
                           <mx:Button id="Button_CreateEventHandler7" toolTip="Event - Keyboard" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_key_down.png')" downIcon="@Embed('res/create/event_on_key_down-sel.png')" overIcon="@Embed('res/create/event_on_key_down.png')" selectedUpIcon="@Embed('res/create/event_on_key_down-sel.png')" selectedOverIcon="@Embed('res/create/event_on_key_down-sel.png')" selectedDownIcon="@Embed('res/create/event_on_key_down.png')"   />

                           <mx:Button id="Button_CreateEventHandler50" toolTip="Event - Entity Initialized" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_entity_initilized.png')" downIcon="@Embed('res/create/event_on_entity_initilized-sel.png')" overIcon="@Embed('res/create/event_on_entity_initilized.png')" selectedUpIcon="@Embed('res/create/event_on_entity_initilized-sel.png')" selectedOverIcon="@Embed('res/create/event_on_entity_initilized-sel.png')" selectedDownIcon="@Embed('res/create/event_on_entity_initilized.png')"   />
                           <mx:Button id="Button_CreateEventHandler51" toolTip="Event - Entity Updated" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_entity_updated.png')" downIcon="@Embed('res/create/event_on_entity_updated-sel.png')" overIcon="@Embed('res/create/event_on_entity_updated.png')" selectedUpIcon="@Embed('res/create/event_on_entity_updated-sel.png')" selectedOverIcon="@Embed('res/create/event_on_entity_updated-sel.png')" selectedDownIcon="@Embed('res/create/event_on_entity_updated.png')"   />
                           <mx:Button id="Button_CreateEventHandler52" toolTip="Event - Entity Destroyed" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_entity_destroyed.png')" downIcon="@Embed('res/create/event_on_entity_destroyed-sel.png')" overIcon="@Embed('res/create/event_on_entity_destroyed.png')" selectedUpIcon="@Embed('res/create/event_on_entity_destroyed-sel.png')" selectedOverIcon="@Embed('res/create/event_on_entity_destroyed-sel.png')" selectedDownIcon="@Embed('res/create/event_on_entity_destroyed.png')"   />
                           <mx:Button id="Button_CreateEventHandler53" toolTip="Event - 2 Physics Shapes Start Contacting" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_shape_start_contacting.png')" downIcon="@Embed('res/create/event_on_shape_start_contacting-sel.png')" overIcon="@Embed('res/create/event_on_shape_start_contacting.png')" selectedUpIcon="@Embed('res/create/event_on_shape_start_contacting-sel.png')" selectedOverIcon="@Embed('res/create/event_on_shape_start_contacting-sel.png')" selectedDownIcon="@Embed('res/create/event_on_shape_start_contacting.png')"   />
                           <mx:Button id="Button_CreateEventHandler6" toolTip="Event - Timer (World)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_world_timer.png')" downIcon="@Embed('res/create/event_on_world_timer-sel.png')" overIcon="@Embed('res/create/event_on_world_timer.png')" selectedUpIcon="@Embed('res/create/event_on_world_timer-sel.png')" selectedOverIcon="@Embed('res/create/event_on_world_timer-sel.png')" selectedDownIcon="@Embed('res/create/event_on_world_timer.png')"   />
                           <mx:Button id="Button_CreateEventHandler57" toolTip="Event - Timer (Entity)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_entity_timer.png')" downIcon="@Embed('res/create/event_on_entity_timer-sel.png')" overIcon="@Embed('res/create/event_on_entity_timer.png')" selectedUpIcon="@Embed('res/create/event_on_entity_timer-sel.png')" selectedOverIcon="@Embed('res/create/event_on_entity_timer-sel.png')" selectedDownIcon="@Embed('res/create/event_on_entity_timer.png')"   />
                           <mx:Button id="Button_CreateEventHandler56" toolTip="Event - Timer (Entity Pair)" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/event_on_entity_pair_timer.png')" downIcon="@Embed('res/create/event_on_entity_pair_timer-sel.png')" overIcon="@Embed('res/create/event_on_entity_pair_timer.png')" selectedUpIcon="@Embed('res/create/event_on_entity_pair_timer-sel.png')" selectedOverIcon="@Embed('res/create/event_on_entity_pair_timer-sel.png')" selectedDownIcon="@Embed('res/create/event_on_entity_pair_timer.png')"   />

                        </mx:Tile>
                        <mx:Spacer height="10"/>
                     </mx:VBox>
                     
                  </mx:Box>
                  <mx:Box icon="@Embed('res/create/create-panel-preset.png')" toolTip="More Predefined Components (Empty now, what do you want?)" direction="vertical" borderStyle="solid" width="83" height="100%"
                           paddingTop="5" paddingLeft="1" paddingRight="1" paddingBottom="1" textAlign="center"
                           horizontalGap="0" verticalGap="0" verticalScrollPolicy="off">
                     <mx:Text selectable="false" width="100%">
                        <mx:text>
                           This panel is for predefined components. It is empty now. What do you want here?
                        </mx:text>
                     </mx:Text>

                     <!--
                     <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="73"
                            tileWidth="36" tileHeight="36"
                            horizontalGap="1" verticalGap="1"
                            paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                        <mx:Button id="Button_CreateRegularPolygon" toolTip="Create Regular Polygon" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/regular-polygon.png')" downIcon="@Embed('res/create/regular-polygon-sel.png')" overIcon="@Embed('res/create/regular-polygon.png')" selectedUpIcon="@Embed('res/create/regular-polygon-sel.png')" selectedOverIcon="@Embed('res/create/regular-polygon-sel.png')" selectedDownIcon="@Embed('res/create/regular-polygon.png')"   />
                        <mx:Button id="Button_CreateRegularStar" toolTip="Create Regular Star" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/regular-star.png')" downIcon="@Embed('res/create/regular-star-sel.png')" overIcon="@Embed('res/create/regular-star.png')" selectedUpIcon="@Embed('res/create/regular-star-sel.png')" selectedOverIcon="@Embed('res/create/regular-star-sel.png')" selectedDownIcon="@Embed('res/create/regular-star.png')"   />
                        <mx:Button id="Button_CreateChain" toolTip="Create Chain" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/chain.png')" downIcon="@Embed('res/create/chain-sel.png')" overIcon="@Embed('res/create/chain.png')" selectedUpIcon="@Embed('res/create/chain-sel.png')" selectedOverIcon="@Embed('res/create/chain-sel.png')" selectedDownIcon="@Embed('res/create/chain.png')"   />
                     </mx:Tile>
                     <mx:Spacer height="10"/>
                     -->
                     <!--
                     <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="73"
                            tileWidth="36" tileHeight="36"
                            horizontalGap="1" verticalGap="1"
                            paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                        <mx:Button id="Button_CreateAngularAcceleration" toolTip="Create Angular Acceleration Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/acceleration-angular.png')" downIcon="@Embed('res/create/acceleration-angular-sel.png')" overIcon="@Embed('res/create/acceleration-angular.png')" selectedUpIcon="@Embed('res/create/acceleration-angular-sel.png')" selectedOverIcon="@Embed('res/create/acceleration-angular-sel.png')" selectedDownIcon="@Embed('res/create/acceleration-angular.png')"   />
                        <mx:Button id="Button_CreateAngularVelocity" toolTip="Create Angular Velocity Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/velocity-angular.png')" downIcon="@Embed('res/create/velocity-angular-sel.png')" overIcon="@Embed('res/create/velocity-angular.png')" selectedUpIcon="@Embed('res/create/velocity-angular-sel.png')" selectedOverIcon="@Embed('res/create/velocity-angular-sel.png')" selectedDownIcon="@Embed('res/create/velocity-angular.png')"   />
                        <mx:Button id="Button_CreateLinearAcceleration" toolTip="Create Linear Acceleration Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/acceleration-linear.png')" downIcon="@Embed('res/create/acceleration-linear-sel.png')" overIcon="@Embed('res/create/acceleration-linear.png')" selectedUpIcon="@Embed('res/create/acceleration-linear-sel.png')" selectedOverIcon="@Embed('res/create/acceleration-linear-sel.png')" selectedDownIcon="@Embed('res/create/acceleration-linear.png')"   />
                        <mx:Button id="Button_CreateLinearVelocity" toolTip="Create Linear Velocity Power Source" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/velocity-linear.png')" downIcon="@Embed('res/create/velocity-linear-sel.png')" overIcon="@Embed('res/create/velocity-linear.png')" selectedUpIcon="@Embed('res/create/velocity-linear-sel.png')" selectedOverIcon="@Embed('res/create/velocity-linear-sel.png')" selectedDownIcon="@Embed('res/create/velocity-linear.png')"   />
                     </mx:Tile>
                     -->
                     <mx:Spacer height="10"/>
                     <!--
                     <mx:Tile direction="horizontal" borderStyle="none" width="100%" height="73"
                            tileWidth="36" tileHeight="36"
                            horizontalGap="1" verticalGap="1"
                            paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
                        <mx:Button id="Button_CreateInputEntityRegionSelector" toolTip="Create Input Entitiy Region Selector" focusEnabled="false" fontSize="8"  width="36" height="36" toggle="true" cornerRadius="0" upIcon="@Embed('res/create/input_entity_region_selector.png')" downIcon="@Embed('res/create/input_entity_region_selector-sel.png')" overIcon="@Embed('res/create/input_entity_region_selector.png')" selectedUpIcon="@Embed('res/create/input_entity_region_selector-sel.png')" selectedOverIcon="@Embed('res/create/input_entity_region_selector-sel.png')" selectedDownIcon="@Embed('res/create/input_entity_region_selector.png')"   />
                     </mx:Tile>
                     <mx:Spacer height="10"/>
                     -->
                     <mx:Spacer height="100%"/>
                  </mx:Box>
               </mx:TabNavigator>
               <mx:Box direction="vertical" borderStyle="solid" height="100%"  width="100%"
                  paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
                  horizontalGap="0" verticalGap="0" borderThickness="0" clipContent="true">
                  <mx:Box id="Box_WordView" direction="vertical" borderStyle="none" height="100%" width="100%"
                           paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
                           horizontalScrollPolicy="off" verticalScrollPolicy="off"
                           horizontalGap="0" verticalGap="0" borderThickness="0">
                     <mx:Box id="Box_CustomCommands" backgroundColor="0xE0E0E0" direction="horizontal" verticalAlign="middle" borderStyle="solid" height="22" width="100%"
                              paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
                              horizontalScrollPolicy="off" verticalScrollPolicy="off"
                              horizontalGap="0" verticalGap="0" borderThickness="0">
                        <mx:HBox backgroundColor="0xE0E0E0" height="100%" verticalAlign="middle">
                           <mx:Spacer width="3"/>
                           <mx:Label id="Label_GoToEntity" text="Go To Entity#" textAlign="right" click="SelectNewEntitiesWithoutBrothers (null);"/>
                        </mx:HBox>
                        <mx:TextInput id="Text_FindEntityId" text="" width="76" enter="OnGoToEntity();" focusIn="Runtime.SetHasInputFocused (true);" focusOut="Runtime.SetHasInputFocused (false);"/>
                        <mx:Spacer width="100%" />
                        <mx:Spacer width="16"/>
                        <mx:Label text="Show:"/>
                        <mx:HBox backgroundColor="0xFFFFFF" height="100%" verticalAlign="middle">
                           <mx:Spacer width="3"/>
                           <mx:CheckBox selected="false" id="CheckBox_ShowEntityIDs" label="Entity IDs" click=";"/>
                           <mx:CheckBox selected="false" id="CheckBox_ShowLinks" label="Links" click=";"/>
                        </mx:HBox>
                        <mx:Spacer width="26"/>
                        <mx:Label text="Hide: "/>
                        <mx:HBox backgroundColor="0xFFFFFF" height="100%" verticalAlign="middle">
                           <mx:Spacer width="3"/>
                           <mx:CheckBox selected="false" id="CheckBox_HideInvisibleEntities" label="Invisibles" click=";"/>
                           <mx:CheckBox selected="false" id="CheckBox_HideShapesAndJoints" label="Shapes &amp; Joints" click=";"/>
                           <mx:CheckBox selected="false" id="CheckBox_HideTriggers" label="Triggers" click=";"/>
                        </mx:HBox>
                        <mx:Spacer width="16"/>
                        <mx:Spacer width="100%" />
                        <mx:Spacer width="36" />
                        <mx:HBox backgroundColor="0xE0E0E0" height="100%"/>
                           <mx:Button id="Button_ZoomOut" click="ZoomOut ()" focusEnabled="false" fontSize="8" width="22" height="22" toggle="false" cornerRadius="0" icon="@Embed('res/edit/zoom-out.png')" disabledIcon="@Embed('res/edit/zoom-out-disabled.png')" />
                           <mx:Label id="Label_ZoomScale" textAlign="center" text="1.00"/>
                           <mx:Button id="Button_ZoomIn" click="ZoomIn ()" focusEnabled="false" fontSize="8" width="22" height="22" toggle="false" cornerRadius="0" icon="@Embed('res/edit/zoom-in.png')" disabledIcon="@Embed('res/edit/zoom-in-disabled.png')" />
                        <mx:HBox width="3" backgroundColor="0xE0E0E0" height="100%"/>
                     </mx:Box>
                     <mx:Box direction="horizontal" borderStyle="solid" height="100%" width="100%"
                              paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
                              horizontalScrollPolicy="off" verticalScrollPolicy="off"
                              horizontalGap="0" verticalGap="0" borderThickness="1">
                        <editor:WorldView id="MainView" height="100%" width="100%" />
                     </mx:Box>
                  </mx:Box>
                  <mx:Box id="Box_StatusInfoBar" backgroundColor="0xE0E0E0" direction="horizontal" borderStyle="solid" height="19" width="100%"
                              paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
                              horizontalScrollPolicy="off" verticalScrollPolicy="off"
                              horizontalGap="0" verticalGap="0" borderThickness="1">
                     <mx:ViewStack id="ViewStack_WorldInfo" borderStyle="none" creationPolicy="all" horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" height="100%">
                        <mx:HBox id="Box_EditingWorldInfo" borderStyle="none" height="100%" width="100%" horizontalGap="0" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0" horizontalScrollPolicy="off">
                           <mx:Label id="Label_MainSelectedEntityInfo" text="" width="100%"/>
                           <mx:Spacer width="100%"/>
                        </mx:HBox>
                        <mx:HBox id="Box_PlayingWorldInfo" verticalAlign="middle" borderStyle="none" height="100%" width="100%" horizontalGap="0" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" borderThickness="0" horizontalScrollPolicy="off">
                           <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                           <mx:Label id="Label_RunningFps" text="fps: 30.01" minWidth="76"/>
                           <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                           <mx:Label id="Label_RunningSteps" text="step: 100" minWidth="86"/>
                           <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                           <mx:Spacer width="100%"/>
                           <mx:Button id="Button_PlaySlower" click="PlaySlower ();" width="15" height="15" focusEnabled="false" fontSize="8" toggle="false" cornerRadius="0" icon="@Embed('res/edit/play-slower.png')" disabledIcon="@Embed('res/edit/play-slower-disabled.png')"/>
                           <mx:Label id="Label_PlaySpeed" textAlign="center" text="Speed X2"/>
                           <mx:Button id="Button_PlayFaster" click="PlayFaster ();" width="15" height="15" focusEnabled="false" fontSize="8" toggle="false" cornerRadius="0" icon="@Embed('res/edit/play-faster.png')" disabledIcon="@Embed('res/edit/play-faster-disabled.png')"/>
                           <mx:Spacer width="100%"/>
                        </mx:HBox>
                     </mx:ViewStack>
                     <mx:Spacer width="1"/>
                     <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                     <mx:Label id="Label_EntityDisplayPosition" text="" minWidth="100"/>
                     <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                     <mx:Label id="Label_EntityPhysicsPosition" text="" minWidth="116"/>
                     <mx:VRule strokeWidth="1" strokeColor="0xA0A0A0" height="100%"/>
                     <!--
                     <mx:VRule strokeWidth="1" strokeColor="0xC0C0C0" height="100%"/>
                     <mx:Label text="Map" click="ShowMiniMap ();"/>
                     -->
                  </mx:Box>
               </mx:Box>
               <!--
               <mx:TabNavigator id="Box_EditPanel" width="256" height="100%" creationPolicy="all" textAlign="center">
                  <mx:Box label="Entity Properties" toolTip="Entity Properties" direction="vertical" borderStyle="solid" width="100%" height="100%"
                           paddingTop="5" paddingLeft="1" paddingRight="1" paddingBottom="1" textAlign="center"
                           horizontalGap="0" verticalGap="0" verticalScrollPolicy="off">
                  </mx:Box>
                  <mx:Box label="Histories" toolTip="Histories" direction="vertical" borderStyle="solid" width="100%" height="100%"
                           paddingTop="5" paddingLeft="1" paddingRight="1" paddingBottom="1" textAlign="center"
                           horizontalGap="0" verticalGap="0" verticalScrollPolicy="off">
                  </mx:Box>
               </mx:TabNavigator>
               -->
            </mx:HBox>
         </mx:HBox>
         <mx:HBox id="CCatDesignView" backgroundColor="0xE0E0E0" borderStyle="solid" height="100%" width="100%"
                  paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
                  horizontalScrollPolicy="off" verticalScrollPolicy="off"
                  horizontalGap="0" verticalGap="0" borderThickness="0"
                  >
            <mx:VBox width="100%" height="100%">
               <mx:Spacer height="100%"/>
               <mx:HBox width="100%">
                  <mx:Spacer width="100%"/>
                  <mx:HBox height="600" width="600">
                     <editor:CollisionManagerView id="CollisionManagerView" height="600" width="600"/>
                  </mx:HBox>
                  <mx:Spacer width="100%"/>
               </mx:HBox>
               <mx:Spacer height="100%"/>
            </mx:VBox>
         </mx:HBox>
      </mx:ViewStack>

   </mx:VBox>

   <mx:XML id="ConfigDesignMenuData">
      <root>
         <menuitem label="Config Level Rules ..." data="rules"/>
         <menuitem label="Config Coordinate System ..." data="coordinate"/>
         <menuitem label="Config World Gravity ..." data="gravity"/>
         <menuitem label="Config World Appearance ..." data="appearance"/>
         <menuitem label="Config Viewport ..." data="viewport"/>
      </root>
   </mx:XML>

   <mx:XML id="NewDesignMenuData">
      <root>
         <menuitem label="Clear All Entities" data="clear_all"/>
         <menuitem label="Clear All Entities and Reset Scene" data="clear_all_and_reset"/>
      </root>
   </mx:XML>

  <mx:Script>
        <![CDATA[
            
            import flash.display.InteractiveObject;
            import flash.events.TextEvent;
            import flash.events.ContextMenuEvent;
            import flash.ui.ContextMenu;
            import flash.ui.ContextMenuItem;
            import mx.managers.PopUpManager;
            import mx.events.FlexEvent;
            import mx.events.MenuEvent;
            import mx.events.IndexChangedEvent;
            import mx.controls.Menu;
            import mx.controls.ToolTip;
            import mx.controls.Button;
            
            import com.tapirgames.util.DisplayObjectUtil;
            import com.tapirgames.util.UrlUtil;
            import editor.WorldView;
            import editor.dialog.*;
            import editor.runtime.Runtime;
            import editor.trigger.Lists;
            import common.Define;
            import common.ValueAdjuster;
            
            private function DesignNotSaved ():Boolean
            {
               return true;
            }
            
            private function InitApp ():void
            {
            //===================================================================================================
               
               
               if (flash.external.ExternalInterface.available)
               {
                   try
                   {
                       flash.external.ExternalInterface.addCallback("DesignNotSaved", DesignNotSaved);
                   }
                   catch (error:SecurityError)
                   {
                      trace ("A SecurityError occurred: " + error.message + "\n");
                   }
                   catch (error:Error)
                   {
                      trace ("An Error occurred: " + error.message + "\n");
                   }
               }
               else
               {
                   trace ("External interface is not available for this container.");
               }
               
            //===================================================================================================
               
               Runtime.SetActiveView (MainView);
               Runtime.mEditorWorldView = MainView;
               Runtime.mCollisionCategoryView = CollisionManagerView;
               
            //===================================================================================================
               
               ToolTip.maxWidth = 800;
               
            //===================================================================================================
               
               //SelectList_WorldScale.dataProvider = Lists.mWorldPresetScaleList;
               //SelectList_WorldScale.selectedIndex = Lists.SelectedValue2SelectedIndex (Lists.mWorldPresetScaleList, 1.0);
               //SelectList_WorldScale.rowCount = Lists.mWorldPresetScaleList.length;
               
            //===================================================================================================
               
               //MainView.mStatusMessageBar = StatusMessageBar;
               MainView.SetCustomTriggerButtons (mCustomTriggerdButtons);
               
               //--------------------
               
               MainView.mButtonCreateBoxStatic      = Button_CreateBox_Static;
               MainView.mButtonCreateBoxMovable      = Button_CreateBox_Movable;
               MainView.mButtonCreateBoxBreakable      = Button_CreateBox_Breakable;
               MainView.mButtonCreateBoxInfected      = Button_CreateBox_Infected;
               MainView.mButtonCreateBoxUninfected      = Button_CreateBox_Uninfected;
               MainView.mButtonCreateBoxDontinfect      = Button_CreateBox_Dontinfect;
               MainView.mButtonCreateBoxBomb     = Button_CreateBox_Bomb;
               
               MainView.mButtonCreateBallStatic     = Button_CreateBall_Static;
               MainView.mButtonCreateBallMovable     = Button_CreateBall_Movable;
               MainView.mButtonCreateBallBreakable     = Button_CreateBall_Breakable;
               MainView.mButtonCreateBallInfected     = Button_CreateBall_Infected;
               MainView.mButtonCreateBallUninfected     = Button_CreateBall_Uninfected;
               MainView.mButtonCreateBallDontInfect     = Button_CreateBall_DontInfect;
               MainView.mButtonCreateBallBomb     = Button_CreateBall_Bomb;
               
               MainView.mButtonCreatePolygonStatic     = Button_CreatePolygon_Static;
               MainView.mButtonCreatePolygonMovable    = Button_CreatePolygon_Movable;
               MainView.mButtonCreatePolygonBreakable     = Button_CreatePolygon_Breakable;
               MainView.mButtonCreatePolygonInfected     = Button_CreatePolygon_Infected;
               MainView.mButtonCreatePolygonUninfected     = Button_CreatePolygon_Uninfected;
               MainView.mButtonCreatePolygonDontinfect     = Button_CreatePolygon_Dontinfect;
               
               MainView.mButtonCreatePolylineStatic     = Button_CreatePolyline_Static;
               MainView.mButtonCreatePolylineMovable    = Button_CreatePolyline_Movable;
               MainView.mButtonCreatePolylineBreakable     = Button_CreatePolyline_Breakable;
               MainView.mButtonCreatePolylineInfected     = Button_CreatePolyline_Infected;
               MainView.mButtonCreatePolylineUninfected     = Button_CreatePolyline_Uninfected;
               MainView.mButtonCreatePolylineDontinfect     = Button_CreatePolyline_Dontinfect;
               
               MainView.mButtonCreateJointHinge  = Button_CreateJoint_Hinge
               MainView.mButtonCreateJointSlider = Button_CreateJoint_Slider;
               MainView.mButtonCreateJointDistance = Button_CreateJoint_Distance;
               MainView.mButtonCreateJointSpring = Button_CreateJoint_Spring;
               MainView.mButtonCreateJointWeld = Button_CreateJoint_Weld;
               //MainView.mButtonCreateJointHingeSlider = Button_CreateJoint_HingeSlider;
               MainView.mButtonCreateJointDummy = Button_CreateJoint_Dummy;
               
               MainView.mButtonCreateText = Button_CreateText;
               MainView.mButtonCreateGravityController = Button_CreateGravityController;
               MainView.mButtonCreateBall = Button_CreateBall;
               MainView.mButtonCreateBox = Button_CreateBox;
               MainView.mButtonCreatePolygon = Button_CreatePolygon;
               MainView.mButtonCreatePolyline = Button_CreatePolyline;
               MainView.mButtonCreateCamera = Button_CreateCamera;
               MainView.mButtonCreateTextButton = Button_CreateTextButton;
               
               MainView.mButtonCreateLinearForce = Button_CreateLinearForce;
               MainView.mButtonCreateAngularForce = Button_CreateAngularForce;
               MainView.mButtonCreateLinearImpulse = Button_CreateLinearImpulse;
               MainView.mButtonCreateAngularImpulse = Button_CreateAngularImpulse;
               //MainView.mButtonCreateAngularAcceleration = Button_CreateAngularAcceleration;
               //MainView.mButtonCreateAngularVelocity = Button_CreateAngularVelocity;
               //MainView.mButtonCreateLinearAcceleration = Button_CreateLinearAcceleration;
               //MainView.mButtonCreateLinearVelocity = Button_CreateLinearVelocity;
               
               MainView.mButtonCreateCondition = Button_CreateCondition;
               MainView.mButtonCreateConditionDoor = Button_CreateConditionDoor;
               MainView.mButtonCreateTask = Button_CreateTask;
               MainView.mButtonCreateEntityAssigner = Button_CreateInputEntityAssigner;
               MainView.mButtonCreateEntityPairAssigner = Button_CreateInputEntityPairAssigner;
               //MainView.mButtonCreateEntityRegionSelector = Button_CreateInputEntityRegionSelector;
               //MainView.mButtonCreateEntityFilter = Button_CreateInputEntityScriptFilter;
               //MainView.mButtonCreateEntityPairFilter = Button_CreateInputEntityPairScriptFilter;

               MainView.mButtonCreateAction = Button_CreateAction;
               MainView.mButtonCreateEventHandler0 = Button_CreateEventHandler0;
               MainView.mButtonCreateEventHandler1 = Button_CreateEventHandler1;
               MainView.mButtonCreateEventHandler2 = Button_CreateEventHandler2;
               MainView.mButtonCreateEventHandler3 = Button_CreateEventHandler3
               MainView.mButtonCreateEventHandler4 = Button_CreateEventHandler4;
               MainView.mButtonCreateEventHandler5 = Button_CreateEventHandler5;
               MainView.mButtonCreateEventHandler6 = Button_CreateEventHandler6;
               MainView.mButtonCreateEventHandler7 = Button_CreateEventHandler7;
               MainView.mButtonCreateEventHandler8 = Button_CreateEventHandler8;
               MainView.mButtonCreateEventHandler50 = Button_CreateEventHandler50;
               MainView.mButtonCreateEventHandler51 = Button_CreateEventHandler51;
               MainView.mButtonCreateEventHandler52 = Button_CreateEventHandler52;
               MainView.mButtonCreateEventHandler53 = Button_CreateEventHandler53
               MainView.mButtonCreateEventHandler56 = Button_CreateEventHandler56;
               MainView.mButtonCreateEventHandler57 = Button_CreateEventHandler57;
               MainView.mButtonCreateEventHandler58 = Button_CreateEventHandler58;
               
               Button_CreateBox_Static.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBox_Movable.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBox_Breakable.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBox_Infected.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBox_Uninfected.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBox_Dontinfect.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBox_Bomb.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               
               Button_CreateBall_Static.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBall_Movable.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBall_Breakable.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBall_Infected.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBall_Uninfected.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBall_DontInfect.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBall_Bomb.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               
               Button_CreatePolygon_Static.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolygon_Movable.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolygon_Breakable.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolygon_Infected.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolygon_Uninfected.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolygon_Dontinfect.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               
               Button_CreatePolyline_Static.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolyline_Movable.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolyline_Breakable.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolyline_Infected.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolyline_Uninfected.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolyline_Dontinfect.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               
               Button_CreateJoint_Hinge.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateJoint_Slider.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateJoint_Distance.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateJoint_Spring.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateJoint_Weld.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               //Button_CreateJoint_HingeSlider.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateJoint_Dummy.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               
               Button_CreateText.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateGravityController.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBall.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateBox.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolygon.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreatePolyline.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateCamera.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateTextButton.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               
               Button_CreateLinearForce.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateAngularForce.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateLinearImpulse.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateAngularImpulse.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               //Button_CreateAngularAcceleration.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               //Button_CreateAngularVelocity.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               //Button_CreateLinearAcceleration.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               //Button_CreateLinearVelocity.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               
               Button_CreateCondition.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateConditionDoor.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateTask.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateInputEntityAssigner.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateInputEntityPairAssigner.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               //Button_CreateInputEntityRegionSelector.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               //Button_CreateInputEntityScriptFilter.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               //Button_CreateInputEntityPairScriptFilter.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateAction.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler0.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler1.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler2.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler3.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler4.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler5.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler6.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler7.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler8.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler50.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler51.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler52.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler53.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler56.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler57.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               Button_CreateEventHandler58.addEventListener (MouseEvent.CLICK, MainView.OnCreateButtonClick);
               
               MainView.mButtonClone = Button_Clone;
               MainView.mButtonDelete = Button_Delete;
               MainView.mButtonFlipH = Button_FlipH;
               MainView.mButtonFlipV = Button_FlipV;
               MainView.mButtonGlue = Button_Glue;
               MainView.mButtonBreakApart = Button_BreakApart;
               MainView.mButtonSetting = Button_Setting;
               MainView.mButtonMoveToTop = Button_MoveToTop;
               MainView.mButtonMoveToBottom = Button_MoveToBottom;
               MainView.mButtonUndo = Button_Undo;
               MainView.mButtonRedo = Button_Redo;
               MainView.mButtonMouseCookieMode = Button_MouseCookieMode;
               MainView.mButtonMouseMoveScene = Button_MouseMoveScene;
               MainView.mButtonMouseMove = Button_MouseMove;
               MainView.mButtonMouseRotate = Button_MouseRotate;
               MainView.mButtonMouseScale = Button_MouseScale;
               
               MainView.mButtonNewDesign = Button_NewDesign;
               //MainView.mButtonSaveWorld = Button_SaveDesign;
               //MainView.mButtonLoadWorld = Button_OpenDesign;
               
               MainView.mButtonShowEntityIds = CheckBox_ShowEntityIDs;
               MainView.mButtonShowLinks = CheckBox_ShowLinks;
               
               MainView.mButtonHideInvisibleEntities = CheckBox_HideInvisibleEntities;
               MainView.mButtonHideShapesAndJoints = CheckBox_HideShapesAndJoints;
               MainView.mButtonHideTriggers = CheckBox_HideTriggers;
               
               MainView.mButton_Play = Button_Play;
               MainView.mButton_Stop = Button_Stop;
               
            //===================================================================================================
               
               Button_Clone.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_Delete.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_FlipH.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_FlipV.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_Glue.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_BreakApart.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_Setting.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_MoveToTop.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_MoveToBottom.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_Undo.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_Redo.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_MouseCookieMode.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_MouseMoveScene.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_MouseMove.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_MouseRotate.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_MouseScale.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               
               //Button_SaveDesign.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               //Button_OpenDesign.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               
               CheckBox_ShowEntityIDs.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               CheckBox_ShowLinks.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               
               CheckBox_HideInvisibleEntities.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               CheckBox_HideShapesAndJoints.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               CheckBox_HideTriggers.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               
               Button_Play.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               Button_Stop.addEventListener (MouseEvent.CLICK, MainView.OnEditButtonClick);
               
               MainView.ShowShapeRectangleSettingDialog = ShowShapeRectangleSettingDialog;
               MainView.ShowShapeCircleSettingDialog = ShowShapeCircleSettingDialog;
               MainView.ShowShapePolygonSettingDialog = ShowShapePolygonSettingDialog;
               MainView.ShowShapePolylineSettingDialog = ShowShapePolylineSettingDialog;
               
               MainView.ShowShapeTextSettingDialog = ShowShapeTextSettingDialog;
               MainView.ShowShapeTextButtonSettingDialog = ShowShapeTextButtonSettingDialog;
               MainView.ShowShapeGravityControllerSettingDialog = ShowShapeGravityControllerSettingDialog;
               
               MainView.ShowHingeSettingDialog = ShowHingeSettingDialog;
               MainView.ShowSliderSettingDialog = ShowSliderSettingDialog;
               MainView.ShowSpringSettingDialog = ShowSpringSettingDialog;
               MainView.ShowDistanceSettingDialog = ShowDistanceSettingDialog;
               MainView.ShowWeldSettingDialog = ShowWeldSettingDialog;
               MainView.ShowDummySettingDialog = ShowDummySettingDialog;
               
               MainView.ShowCameraSettingDialog = ShowCameraSettingDialog;
               MainView.ShowPowerSourceSettingDialog = ShowPowerSourceSettingDialog;
               
               //MainView.ShowWorldSettingDialog = ShowWorldSettingDialog;
               MainView.ShowWorldSavingDialog = ShowWorldSavingDialog;
               MainView.ShowWorldLoadingDialog = ShowWorldLoadingDialog;
               MainView.ShowWorldQuickLoadingDialog = ShowWorldQuickLoadingDialog;
               
               MainView.ShowPlayCodeLoadingDialog = ShowPlayCodeLoadingDialog;
               MainView.ShowImportSourceCodeDialog = ShowImportSourceCodeDialog;
               
               MainView.ShowEditorCustomCommandSettingDialog = ShowEditorCustomCommandSettingDialog;
               
               MainView.ShowConditionSettingDialog = ShowConditionSettingDialog;
               MainView.ShowActionSettingDialog = ShowActionSettingDialog;
               MainView.ShowEntityPairFilterSettingDialog = ShowEntityPairFilterSettingDialog;
               MainView.ShowEntityFilterSettingDialog = ShowEntityFilterSettingDialog;
               MainView.ShowEntityAssignerSettingDialog = ShowEntityAssignerSettingDialog;
               MainView.ShowEntityPairAssignerSettingDialog = ShowEntityPairAssignerSettingDialog;
               MainView.ShowEventHandlerSettingDialog = ShowEventHandlerSettingDialog;
               MainView.ShowTimerEventHandlerSettingDialog = ShowTimerEventHandlerSettingDialog;
               MainView.ShowKeyboardEventHandlerSettingDialog = ShowKeyboardEventHandlerSettingDialog;
               MainView.ShowMouseEventHandlerSettingDialog = ShowMouseEventHandlerSettingDialog;
               MainView.ShowContactEventHandlerSettingDialog = ShowContactEventHandlerSettingDialog;
               
               MainView.ShowConditionDoorSettingDialog = ShowConditionDoorSettingDialog;
               MainView.ShowTaskSettingDialog = ShowTaskSettingDialog;
               MainView.ShowConditionSettingDialog = ShowConditionSettingDialog;
               MainView.ShowActionSettingDialog = ShowActionSettingDialog;
               MainView.ShowEventHandlerSettingDialog = ShowEventHandlerSettingDialog;
               MainView.ShowTimerEventHandlerSettingDialog = ShowTimerEventHandlerSettingDialog;
               MainView.ShowKeyboardEventHandlerSettingDialog = ShowKeyboardEventHandlerSettingDialog;
               MainView.ShowMouseEventHandlerSettingDialog = ShowMouseEventHandlerSettingDialog;
               
               MainView.StatusBar_SetMainSelectedEntityInfo = StatusBar_SetMainSelectedEntityInfo;
               MainView.StatusBar_SetMainDisplayPosition = StatusBar_SetMainDisplayPosition
               MainView.StatusBar_SetMainPhysicsPosition = StatusBar_SetMainPhysicsPosition;
               MainView.StatusBar_SetRunningSteps = StatusBar_SetRunningSteps;
               MainView.StatusBar_SetRunningFPS = StatusBar_SetRunningFPS;
            
               MainView.OnPlayingStarted = OnPlayingStarted;
               MainView.OnPlayingStopped = OnPlayingStopped;
               
               MainView.NotifyEditingScaleChanged = UpdateZoomScaleLabelText;
               
            //===================================================================================================
               
               DisplayObjectUtil.AppendContextMenuItem (Button_MouseMove, "Move Accurately ...", ShowDialog_MoveSelectedEntitiesAccurately);
               
               DisplayObjectUtil.AppendContextMenuItem (Button_MouseRotate, "Rotate Accurately ...", ShowDialog_RotateSelectedEntitiesAccurately);
               
               DisplayObjectUtil.AppendContextMenuItem (Button_MouseScale, "Scale Accurately ...", ShowDialog_ScaleSelectedEntitiesAccurately);
               
               DisplayObjectUtil.AppendContextMenuItem (Button_MouseMoveScene, "Move Scene Accurately ...", ShowDialog_MoveSceneAccurately);
               
               DisplayObjectUtil.AppendContextMenuItem (Label_GoToEntity, "Select New (without Brothers)", SelectNewEntitiesWithoutBrothers);
               DisplayObjectUtil.AppendContextMenuItem (Label_GoToEntity, "Select New (with Brothers)", SelectNewEntitiesWithBrothers);
               DisplayObjectUtil.AppendContextMenuItem (Label_GoToEntity, "Select More (without Brothers)", SelectMoreEntitiesWithoutBrothers);
               DisplayObjectUtil.AppendContextMenuItem (Label_GoToEntity, "Select More (with Brothers)", SelectMoreEntitiesWithBrothers);
               
            //===================================================================================================
               
               //DisplayObjectUtil.AppendContextMenuItem (Button_NewDesign, "Clear All Entities", ClearAllEntities);
               //DisplayObjectUtil.AppendContextMenuItem (Button_NewDesign, "Clear All Entities and Reset Scene", ClearAllEntitiesAndResetScene);
               
               //DisplayObjectUtil.AppendContextMenuItem (Button_OpenDesign, "Load Lastest Version Online ...", OnLoadSourceCodeOnline);
               
               //DisplayObjectUtil.AppendContextMenuItem (Button_SaveDesign, "Save Online ...", ShowWorldOnlineSavingDialog);
               
            //===================================================================================================
               
               mEntityCommonContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_Setting, "Batch Modify Entity Common Basic Properties ...", ShowModifyEntityCommonDialog);
               
               mShapePhysicsFlagsContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_Setting, "Batch Modify Shape Flags ...", ShowModifyShapeFlagsDialog, true);
               mShapePhysicsCCatContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_Setting, "Batch Modify Shape Collision Categories ...", ShowModifyShapeCollisionCategoryDialog);
               mShapePhysicsVelocityContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_Setting, "Batch Modify Shape Velocities ...", ShowModifyShapeVelocityDialog);
               mShapePhysicsFixtureContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_Setting, "Batch Modify Shape Other Physics Properties ...", ShowModifyShapeFixtureDialog);
               
               mJointCollideConnectedsContextMenuItem = DisplayObjectUtil.AppendContextMenuItem (Button_Setting, "Batch Modify Joint \"Collide Connecteds\" Property ...", ShowModifyJointCollideConnectedsDialog, true);
               
               MainView.SetBatchSettingMenuItemsEnabled = SetBatchSettingMenuItemsEnabled;
               
            //===================================================================================================
               
               Button_Undo.contextMenu = MainView.mUndoButtonContextMenu;
               Button_Undo.contextMenu.hideBuiltInItems ();
               
               Button_Redo.contextMenu = MainView.mRedoButtonContextMenu;
               Button_Redo.contextMenu.hideBuiltInItems ();
               
         //===============================================================================================================
         //  Collision Manager
         //===============================================================================================================
               
               //
               CollisionManagerView.mButtonCreateCollisionCategory = Button_CreateCollisionCategory;
               
               Button_CreateCollisionCategory.addEventListener (MouseEvent.CLICK, CollisionManagerView.OnCreateButtonClick);
               
               CollisionManagerView.mButtonDelete = Button_DeleteCollisionCategory;
               
               CollisionManagerView.mCheckBoxHarmoniousCategory = CheckBox_CollisionCategory_HarmoniousCategory;
               CollisionManagerView.mCheckBoxDefaultCategory = CheckBox_CollisionCategory_DefaultCategory;
               
               Button_DeleteCollisionCategory.addEventListener (MouseEvent.CLICK, CollisionManagerView.OnEditButtonClick);
               CheckBox_CollisionCategory_HarmoniousCategory.addEventListener (MouseEvent.CLICK, CollisionManagerView.OnEditButtonClick);
               CheckBox_CollisionCategory_DefaultCategory.addEventListener (MouseEvent.CLICK, CollisionManagerView.OnEditButtonClick);
               
               CollisionManagerView.mTextInputName = Text_CollisionCategoryName;
               
               Text_CollisionCategoryName.addEventListener (FlexEvent.ENTER, CollisionManagerView.OnTextInputEnter);
            }
            
            private var mCustomTriggerdButtons:Array = new Array ();
            private function OnCustomTriggerButtonCreated (event:FlexEvent):void
            {
               if (event.target is mx.controls.Button)
               {
                  mCustomTriggerdButtons.push (event.target);
                  
                  DisplayObjectUtil.AppendContextMenuItem (event.target as InteractiveObject, "Load / Replace ...", MainView.OnClickEditorCustomCommand);
               }
            }
            
            private function ShowMiniMap ():void
            {
            }
            
//========================================================================================
// drop menus
//========================================================================================
            
            private var mConfigDesignMenu:Menu = null;
            private function OnClickConfigDesignButton ():void
            {
               if (mConfigDesignMenu == null)
               {
                  mConfigDesignMenu = Menu.createMenu(Button_ConfigDesign, ConfigDesignMenuData, false);
                  mConfigDesignMenu.labelField="@label";
                  mConfigDesignMenu.addEventListener(MenuEvent.ITEM_CLICK, OnSelectedConfigDesignMemu);
               }
               
               var point:Point = Button_ConfigDesign.localToGlobal (new Point (0, Button_ConfigDesign.height));
               
               mConfigDesignMenu.show(point.x, point.y);
            }
            
            private function OnSelectedConfigDesignMemu (event:MenuEvent):void
            {
               if (event.item.@data == "rules")
               {
                  ShowLevelRulesEditDialog ();
               }
               else if (event.item.@data == "coordinate")
               {
                  ShowCoordinateSystemEditDialog ();
               }
               else if (event.item.@data == "gravity")
               {
                  ShowWorldGravityEditDialog ();
               }
               else if (event.item.@data == "appearance")
               {
                  ShowWorldAppearanceEditDialog ();
               }
               else if (event.item.@data == "viewport")
               {
                  ShowViewportEditDialog ();
               }
            }
            
            private var mNewDesignMenu:Menu = null;
            private function OnClickNewDesignButton ():void
            {
               if (mNewDesignMenu == null)
               {
                  mNewDesignMenu = Menu.createMenu(Button_NewDesign, NewDesignMenuData, false);
                  mNewDesignMenu.labelField="@label";
                  mNewDesignMenu.addEventListener(MenuEvent.ITEM_CLICK, OnSelectedNewDesignMemu);
               }
               
               var point:Point = Button_NewDesign.localToGlobal (new Point (0, Button_NewDesign.height));
               
               mNewDesignMenu.show(point.x, point.y);
            }
            
            private function OnSelectedNewDesignMemu (event:MenuEvent):void
            {
               if (event.item.@data == "clear_all")
               {
                  MainView.ClearAllEntities (true, false);
               }
               else if (event.item.@data == "clear_all_and_reset")
               {
                  MainView.ClearAllEntities (true, true);
               }
            }
            
            private var mSaveDesignMenu:Menu = null;
            private function OnClicSaveDesignButton ():void
            {
               if (mSaveDesignMenu == null)
               {
                  var xml:XML = <SaveDesignMenuData />;
                  if (MainView.IsOnlineEditing ())
                  {
                     xml.appendChild (<menuitem label="Save Online ..." data="save_online"/>);
                  }
                  xml.appendChild (<menuitem label="Save Offline (xml) ..." data="save_offline"/>);
                  //xml.appendChild (<menuitem label="Save Local ..." data="save_local"/>);
                  xml.appendChild (<menuitem label="Quick Save (Ctrl + S)" data="save_cookie"/>);
                  xml.appendChild (<menuitem label="Export Selected(s) to System Clipborad" data="export_selecteds"/>);
                  
                  mSaveDesignMenu = Menu.createMenu(Button_SaveDesign, xml, false);
                  mSaveDesignMenu.labelField="@label";
                  mSaveDesignMenu.addEventListener(MenuEvent.ITEM_CLICK, OnSelectedSaveDesignMemu);
               }
               
               var point:Point = Button_SaveDesign.localToGlobal (new Point (0, Button_SaveDesign.height));
               
               mSaveDesignMenu.show(point.x, point.y);
            }
            
            private function OnSelectedSaveDesignMemu (event:MenuEvent):void
            {
               if (event.item.@data == "save_online")
               {
                  ShowWorldOnlineSavingDialog ();
               }
               else if (event.item.@data == "save_offline")
               {
                  MainView.OpenWorldSavingDialog ();
               }
               else if (event.item.@data == "save_local")
               {
               }
               else if (event.item.@data == "save_cookie")
               {
                  MainView.QuickSave ();
               }
               else if (event.item.@data  == "export_selecteds")
               {
                  MainView.ExportSelectedsToSystemMemory ();
               }
            }
            
            private var mLoadDesignMenu:Menu = null;
            private function OnClicLoadDesignButton ():void
            {
               if (mLoadDesignMenu == null)
               {
                  var xml:XML = <SaveDesignMenuData />;
                  if (MainView.IsOnlineEditing ())
                  {
                     xml.appendChild (<menuitem label="Load Online ..." data="load_online"/>);
                  }
                  xml.appendChild (<menuitem label="Load Offline (xml) ..." data="load_offline"/>);
                  //xml.appendChild (<menuitem label="Load Local ..." data="load_local"/>);
                  xml.appendChild (<menuitem label="Quick Load" data="load_cookie"/>);
                  xml.appendChild (<menuitem label="Import ..." data="import"/>);
                  
                  mLoadDesignMenu = Menu.createMenu(Button_OpenDesign, xml, false);
                  mLoadDesignMenu.labelField="@label";
                  mLoadDesignMenu.addEventListener(MenuEvent.ITEM_CLICK, OnSelectedLoadDesignMemu);
               }
               
               var point:Point = Button_OpenDesign.localToGlobal (new Point (0, Button_OpenDesign.height));
               
               mLoadDesignMenu.show(point.x, point.y);
            }
            
            private function OnSelectedLoadDesignMemu (event:MenuEvent):void
            {
               if (event.item.@data == "load_online")
               {
                  MainView.OnlineLoad ();
               }
               else if (event.item.@data == "load_offline")
               {
                  MainView.OpenWorldLoadingDialog ();
               }
               else if (event.item.@data == "load_local")
               {
               }
               else if (event.item.@data == "load_cookie")
               {
                  MainView.QuickLoad ();
               }
               else if (event.item.@data  == "import")
               {
                  MainView.OpenImportSourceCodeDialog ();
               }
            }
            
             
            
//========================================================================================
// play / stop
//========================================================================================
            
            public function OnPlayingStarted ():void
            {
               Button_Play.enabled = false;
               Button_Stop.enabled = true;
               
               Box_WordView.removeChild (Box_CustomCommands);
               Box_WordView.validateNow ();
               
               Box_SwitchViewCommands.enabled = false;
               Box_DesignCommands.enabled = false;
               Box_EntityEditViewCommands_1.enabled = false;
               Box_EntityEditViewCommands_2.enabled = false;
               Box_CreateCommands.enabled = false;
               
               ViewStack_WorldInfo.selectedChild = Box_PlayingWorldInfo;
               
               Button_PlayFaster.enabled = MainView.PlayFaster (0)
               Button_PlaySlower.enabled = MainView.PlaySlower (0);
               UpdatePlaySpeedxLableText ();
               
               MainView.SetOnSpeedChangedFunction (UpdatePlaySpeedxLableText);
            }
            
            public function OnPlayingStopped ():void
            {
               Button_Play.enabled = true;
               Button_Stop.enabled = false;
               
               Box_WordView.addChildAt (Box_CustomCommands, 0);
               Box_WordView.validateNow ();
               
               Box_SwitchViewCommands.enabled = true;
               Box_DesignCommands.enabled = true
               Box_EntityEditViewCommands_1.enabled = true;
               Box_EntityEditViewCommands_2.enabled = true;
               Box_CreateCommands.enabled = true;
               
               ViewStack_WorldInfo.selectedChild = Box_EditingWorldInfo;
            }
            
//========================================================================================
// 
//========================================================================================
            
            private function OnToggleCCatEditView ():void
            {
               if (Button_ToggleCCatEditView.selected)
               {
                  ViewStack_EditView.selectedChild = CCatDesignView;
                  ViewStack_ViewEditCommands.selectedChild = Box_CCatEditViewCommands;
                  
                  Runtime.SetActiveView (CollisionManagerView);
                  CollisionManagerView.SetCollisionManager (Runtime.mEditorWorldView.GetEditorWorld ().GetCollisionManager ());
               }
               else
               {
                  ViewStack_EditView.selectedChild = EntityDesignView;
                  
                  Runtime.SetActiveView (MainView);
                  ViewStack_ViewEditCommands.selectedChild = Box_EntityEditViewCommands;
                  
                  MainView.OnFinishedCCatEditing ();
               }
            }
            
//========================================================================================
// 
//========================================================================================
            
            private function OnClickTutorialLink (event:Event):void
            {
               UrlUtil.PopupPage (Define.EditingTutorialUrl);
            }
            
            private function OnClickShowcasesLink (event:Event):void
            {
               UrlUtil.PopupPage (Define.ShowcasesUrl);
            }
            
            private function OnClickLogo (event:Event):void
            {
               UrlUtil.PopupPage (Define.AboutUrl);
            }
            
            private function OnClickAbout (event:Event):void
            {
               UrlUtil.PopupPage (Define.AboutUrl);
            }

//========================================================================================
// 
//========================================================================================
            
            private function GetEntityIdsFromInputText (text:String):Array
            {
               if (text == null)
                  return null;
               
               var idStrs:Array = text.split (/\s+/);
               if (idStrs == null || idStrs.length == 0)
                  return null;
               
               var entityIds:Array = new Array ();
               for each (var idStr:String in idStrs)
               {
                  var entityId:Number = parseInt (idStr);
                  if (! isNaN (entityId))
                  {
                     entityIds.push (int(entityId));
                  }
               }
               
               if (entityIds.length == 0)
                  return null;
               
               return entityIds;
            }
            
            private function OnGoToEntity ():void
            {
               var ids:Array = GetEntityIdsFromInputText (Text_FindEntityId.text);
               if (ids != null)
                  MainView.GoToEntity (ids);
            }
            
            private function SelectNewEntitiesWithoutBrothers (event:ContextMenuEvent):void
            {
               var ids:Array = GetEntityIdsFromInputText (Text_FindEntityId.text);
               if (ids != null)
                  MainView.SelectEntityByIds (ids, true, false);
            }
            
            private function SelectNewEntitiesWithBrothers (event:ContextMenuEvent):void
            {
               var ids:Array = GetEntityIdsFromInputText (Text_FindEntityId.text);
               if (ids != null)
                  MainView.SelectEntityByIds (ids, true, true);
            }
            
            private function SelectMoreEntitiesWithoutBrothers (event:ContextMenuEvent):void
            {
               var ids:Array = GetEntityIdsFromInputText (Text_FindEntityId.text);
               if (ids != null)
                  MainView.SelectEntityByIds (ids, false, false);
            }
            
            private function SelectMoreEntitiesWithBrothers (event:ContextMenuEvent):void
            {
               var ids:Array = GetEntityIdsFromInputText (Text_FindEntityId.text);
               if (ids != null)
                  MainView.SelectEntityByIds (ids, false, true);
            }
            
            private function StatusBar_SetMainSelectedEntityInfo (info:String):void
            {
               Label_MainSelectedEntityInfo.htmlText = info;
            }
            
            private function StatusBar_SetMainDisplayPosition (info:String):void
            {
               Label_EntityDisplayPosition.htmlText = info;
            }
            
            private function StatusBar_SetMainPhysicsPosition (info:String):void
            {
               Label_EntityPhysicsPosition.htmlText = info;
            }
            
            private function StatusBar_SetRunningSteps (info:String):void
            {
               Label_RunningSteps.htmlText = info;
            }
            
            private function StatusBar_SetRunningFPS (info:String):void
            {
               Label_RunningFps.htmlText = info;
            }
            
            public function ZoomIn ():void
            {
               if (MainView.ScaleEditorWorld (true))
               {
                  Button_ZoomIn.enabled = false;
               }
               
               Button_ZoomOut.enabled = true;
            }
            
            public function ZoomOut ():void
            {
               if (MainView.ScaleEditorWorld (false))
               {
                  Button_ZoomOut.enabled = false;
               }
               
               Button_ZoomIn.enabled = true;
            }
            
            private function UpdateZoomScaleLabelText ():void
            {
               var label:String = ValueAdjuster.Number2PrecisionString (MainView.GetEditorWorldZoomScale (), 3);;
               if (label.charAt (0) == "0")
                  label = label.substr (1);
               Label_ZoomScale.text = label;
            }
            
            public function PlayFaster ():void
            {
               Button_PlayFaster.enabled = MainView.PlayFaster (1);
               
               Button_PlaySlower.enabled = true;
               UpdatePlaySpeedxLableText ();
            }
            
            public function PlaySlower ():void
            {
               Button_PlaySlower.enabled = MainView.PlaySlower (1);
               
               Button_PlayFaster.enabled = true;
               UpdatePlaySpeedxLableText ();
            }
            
            public function UpdatePlaySpeedxLableText ():void
            {
               Label_PlaySpeed.text = "Speed X" + MainView.GetPlayingSpeedX ();
            }
            
//========================================================================================
// 
//========================================================================================
            
            private function ShowDesignInfoSettingDialog():void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:DesignInfoSettingDialog = new DesignInfoSettingDialog ();
               settingDialog.SetValues (Runtime.mEditorWorldView.GetCurrentWorldDesignInfo ());
               settingDialog.SetConfirmFunc (Runtime.mEditorWorldView.SetCurrentWorldDesignInfo);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowLevelRulesEditDialog ():void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:WorldLevelRulesSettingDialog = new WorldLevelRulesSettingDialog ();
               settingDialog.SetValues (Runtime.mEditorWorldView.GetCurrentWorldLevelRulesInfo ());
               settingDialog.SetConfirmFunc (Runtime.mEditorWorldView.SetCurrentWorldLevelRulesInfo);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowCoordinateSystemEditDialog ():void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:WorldCoordinateSystemSettingDialog = new WorldCoordinateSystemSettingDialog ();
               settingDialog.SetValues (Runtime.mEditorWorldView.GetCurrentWorldCoordinateSystemInfo ());
               settingDialog.SetConfirmFunc (Runtime.mEditorWorldView.SetCurrentWorldCoordinateSystemInfo);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowWorldGravityEditDialog ():void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:WorldGravitySettingDialog = new WorldGravitySettingDialog ();
               settingDialog.SetValues (Runtime.mEditorWorldView.GetCurrentWorldGravityInfo ());
               settingDialog.SetConfirmFunc (Runtime.mEditorWorldView.SetCurrentWorldGravityInfo);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowWorldAppearanceEditDialog ():void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:WorldAppearanceSettingDialog = new WorldAppearanceSettingDialog ();
               settingDialog.SetValues (Runtime.mEditorWorldView.GetCurrentWorldAppearanceInfo ());
               settingDialog.SetConfirmFunc (Runtime.mEditorWorldView.SetCurrentWorldAppearanceInfo);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowViewportEditDialog ():void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:ViewportSettingDialog = new ViewportSettingDialog ();
               settingDialog.SetValues (Runtime.mEditorWorldView.GetViewportInfo ());
               settingDialog.SetConfirmFunc (Runtime.mEditorWorldView.SetViewportInfo);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
//========================================================================================
// 
//========================================================================================
            
            private function OnCloseDialog ():void
            {
               Runtime.SetHasSettingDialogOpened (false);
               stage.focus = stage;
            }
            
            private function ShowShapeRectangleSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               if ( Define.IsBombShape (initialValues.mAiType) )
               {
                  var settingBombDialog:ShapeRectangleBombSettingDialog = new ShapeRectangleBombSettingDialog ();
                  settingBombDialog.SetValues (initialValues);
                  settingBombDialog.SetConfirmFunc (onConfirmFunc);
                  settingBombDialog.SetCloseFunc (OnCloseDialog);
                  PopUpManager.addPopUp (settingBombDialog, MainView, true);
                  PopUpManager.centerPopUp (settingBombDialog);
               }
               else
               {
                  var settingDialog:ShapeRectangleSettingDialog = new ShapeRectangleSettingDialog ();
                  settingDialog.SetValues (initialValues);
                  settingDialog.SetConfirmFunc (onConfirmFunc);
                  settingDialog.SetCloseFunc (OnCloseDialog);
                  PopUpManager.addPopUp (settingDialog, MainView, true);
                  PopUpManager.centerPopUp (settingDialog);
               }
            }
            
            private function ShowShapeCircleSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               if ( Define.IsBombShape (initialValues.mAiType) )
               {
                  var settingBombDialog:ShapeCircleBombSettingDialog = new ShapeCircleBombSettingDialog ();
                  settingBombDialog.SetValues (initialValues);
                  settingBombDialog.SetConfirmFunc (onConfirmFunc);
                  settingBombDialog.SetCloseFunc (OnCloseDialog);
                  PopUpManager.addPopUp (settingBombDialog, MainView, true);
                  PopUpManager.centerPopUp (settingBombDialog);
               }
               else
               {
                  var settingDialog:ShapeCircleSettingDialog = new ShapeCircleSettingDialog ();
                  settingDialog.SetValues (initialValues);
                  settingDialog.SetConfirmFunc (onConfirmFunc);
                  settingDialog.SetCloseFunc (OnCloseDialog);
                  PopUpManager.addPopUp (settingDialog, MainView, true);
                  PopUpManager.centerPopUp (settingDialog);
               }
            }
            
            private function ShowShapePolygonSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:ShapePolygonSettingDialog = new ShapePolygonSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowShapePolylineSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:ShapePolylineSettingDialog = new ShapePolylineSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowShapeTextSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:ShapeTextSettingDialog = new ShapeTextSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowShapeTextButtonSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:ShapeTextButtonSettingDialog = new ShapeTextButtonSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowShapeGravityControllerSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:ShapeGravityControllerSettingDialog = new ShapeGravityControllerSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowHingeSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:JointHingeSettingDialog = new JointHingeSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowSliderSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:JointSliderSettingDialog = new JointSliderSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowSpringSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:JointSpringSettingDialog = new JointSpringSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowDistanceSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:JointDistanceSettingDialog = new JointDistanceSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowWeldSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:JointWeldSettingDialog = new JointWeldSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowDummySettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:JointDummySettingDialog = new JointDummySettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowCameraSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:UtilityCameraSettingDialog = new UtilityCameraSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowPowerSourceSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:UtilityPowerSourceSettingDialog = new UtilityPowerSourceSettingDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            
            private function ShowEventHandlerSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicEventHandlerEditDialog = new LogicEventHandlerEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowTimerEventHandlerSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicTimerEventHandlerEditDialog = new LogicTimerEventHandlerEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowKeyboardEventHandlerSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicKeyboardEventHandlerEditDialog = new LogicKeyboardEventHandlerEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowMouseEventHandlerSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicMouseEventHandlerEditDialog = new LogicMouseEventHandlerEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowContactEventHandlerSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicShapeContactEventHandlerEditDialog = new LogicShapeContactEventHandlerEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowActionSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicActionEditDialog = new LogicActionEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowConditionSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicConditionEditDialog = new LogicConditionEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowEntityFilterSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicEntityFilterEditDialog = new LogicEntityFilterEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowEntityPairFilterSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicEntityPairFilterEditDialog = new LogicEntityPairFilterEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowConditionDoorSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicConditionDoorEditDialog = new LogicConditionDoorEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowTaskSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicTaskEditDialog = new LogicTaskEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowEntityAssignerSettingDialog(initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicEntityAssignerEditDialog = new LogicEntityAssignerEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            private function ShowEntityPairAssignerSettingDialog(initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var settingDialog:LogicEntityPairAssignerEditDialog = new LogicEntityPairAssignerEditDialog ();
               settingDialog.SetValues (initialValues);
               settingDialog.SetConfirmFunc (onConfirmFunc);
               settingDialog.SetCloseFunc (OnCloseDialog);
               PopUpManager.addPopUp (settingDialog, MainView, true);
               PopUpManager.centerPopUp (settingDialog);
            }
            
            //private function ShowWorldSettingDialog (initialValues:Object, onConfirmFunc:Function):void
            //{
            //   Runtime.SetHasSettingDialogOpened (true);
            //   
            //   var settingDialog:WorldSettingDialog = new WorldSettingDialog ();
            //   PopUpManager.addPopUp (settingDialog, MainView, true);
            //   PopUpManager.centerPopUp (settingDialog);
            //   settingDialog.SetValues (initialValues);
            //   settingDialog.SetConfirmFunc (onConfirmFunc);
            //   settingDialog.SetCloseFunc (OnCloseDialog);
            //}
            
            private function ShowWorldSavingDialog (initialValues:Object):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:WorldSavingDialog = new WorldSavingDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetValues (initialValues);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function ShowWorldLoadingDialog (onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:WorldLoadingDialog = new WorldLoadingDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (onConfirmFunc);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function ShowWorldQuickLoadingDialog (initialValues:Object, onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:WorldQuickLoadingDialog = new WorldQuickLoadingDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetValues (initialValues);
               dialog.SetConfirmFunc (onConfirmFunc);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function ShowPlayCodeLoadingDialog (onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:PlayCodeLoadingDialog = new PlayCodeLoadingDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (onConfirmFunc);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function ShowImportSourceCodeDialog (onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:WorldImportDialog = new WorldImportDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (onConfirmFunc);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
//========================================================================================
// 
//========================================================================================
            
            private var mEntityCommonContextMenuItem:ContextMenuItem;
            
            private var mShapePhysicsFlagsContextMenuItem:ContextMenuItem;
            private var mShapePhysicsCCatContextMenuItem:ContextMenuItem;
            private var mShapePhysicsVelocityContextMenuItem:ContextMenuItem;
            private var mShapePhysicsFixtureContextMenuItem:ContextMenuItem;
            
            private var mJointCollideConnectedsContextMenuItem:ContextMenuItem;
            
            private function SetBatchSettingMenuItemsEnabled (
                              entityCommonEnabled:Boolean,
                              
                              shapePhysicsFlagsEnabled:Boolean,
                              shapePhysicsCCatEnabled:Boolean,
                              shapePhysicsVelocityEnabled:Boolean,
                              shapePhysicsFixtureEnabled:Boolean,
                              
                              jointCollideConnectedsEnabled:Boolean
                        ):void
            {
               mEntityCommonContextMenuItem.enabled = entityCommonEnabled;
               
               mShapePhysicsFlagsContextMenuItem.enabled = shapePhysicsFlagsEnabled;
               mShapePhysicsCCatContextMenuItem.enabled = shapePhysicsCCatEnabled;
               mShapePhysicsVelocityContextMenuItem.enabled = shapePhysicsVelocityEnabled;
               mShapePhysicsFixtureContextMenuItem.enabled = shapePhysicsFixtureEnabled;
               
               mJointCollideConnectedsContextMenuItem.enabled = jointCollideConnectedsEnabled;
            }
            
            private function ShowModifyEntityCommonDialog (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:BatchEntityCommonPropertyModifyDialog = new BatchEntityCommonPropertyModifyDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (MainView.OnBatchModifyEntityCommonProperties);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function ShowModifyShapeFlagsDialog (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:BatchShapePhysicsFlagsModifyDialog = new BatchShapePhysicsFlagsModifyDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (MainView.OnBatchModifyShapePhysicsFlags);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function ShowModifyShapeCollisionCategoryDialog (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:BatchShapePhysicsCollisionCategoryModifyDialog = new BatchShapePhysicsCollisionCategoryModifyDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (MainView.OnBatchModifyShapePhysicsCollisionCategory);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function ShowModifyShapeVelocityDialog (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:BatchShapePhysicsVelocityModifyDialog = new BatchShapePhysicsVelocityModifyDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (MainView.OnBatchModifyShapePhysicsVelocity);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function ShowModifyShapeFixtureDialog (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:BatchShapePhysicsFixtureModifyDialog = new BatchShapePhysicsFixtureModifyDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (MainView.OnBatchModifyShapePhysicsFixture);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function ShowModifyJointCollideConnectedsDialog  (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:BatchJointCollideConnectedsModifyDialog = new BatchJointCollideConnectedsModifyDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (MainView.OnBatchModifyJointCollideConnectedsProperty);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
//========================================================================================
// 
//========================================================================================
            
            private function ShowDialog_MoveSelectedEntitiesAccurately (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:AccurateMoveDialog = new AccurateMoveDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (OnMoveSelectedEntitiesAccurately);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function OnMoveSelectedEntitiesAccurately (params:Object):void
            {
               MainView.MoveSelectedEntities (params.mOffsetX, params.mOffsetY, true, false);
            }
            
            private function ShowDialog_RotateSelectedEntitiesAccurately (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:AccurateRotateDialog = new AccurateRotateDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (OnRotateSelectedEntitiesAccurately);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function OnRotateSelectedEntitiesAccurately (params:Object):void
            {
               MainView.RotateSelectedEntities (params.mRotationAngle * Define.kDegrees2Radians, true, false);
            }
            
            private function ShowDialog_ScaleSelectedEntitiesAccurately (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:AccurateScaleDialog = new AccurateScaleDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (OnScaleSelectedEntitiesAccurately);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function OnScaleSelectedEntitiesAccurately (params:Object):void
            {
               if (params.mScaleRatio >= 0)
                  MainView.ScaleSelectedEntities (params.mScaleRatio, true, false);
            }
            
            private function ShowDialog_MoveSceneAccurately (event:ContextMenuEvent):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:AccurateMoveDialog = new AccurateMoveDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (OnMoveSceneAccurately);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            private function OnMoveSceneAccurately (params:Object):void
            {
               MainView.MoveWorldScene (params.mOffsetX, params.mOffsetY);
            }
            
            private function ShowWorldOnlineSavingDialog (/*event:ContextMenuEvent*/):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:WorldOnlineSavingDialog = new WorldOnlineSavingDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (MainView.OnlineSave);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
            //private function OnSaveSourceCodeOnline (event:ContextMenuEvent):void
            //{
            //   MainView.OnlineSave ();
            //}
            
            //private function OnLoadSourceCodeOnline (event:ContextMenuEvent):void
            //{
            //   MainView.OnlineLoad ();
            //}
            
            //private function ClearAllEntities (event:ContextMenuEvent):void
            //{
            //   MainView.ClearAllEntities (true, false);
            //}
            //
            //private function ClearAllEntitiesAndResetScene (event:ContextMenuEvent):void
            //{
            //   MainView.ClearAllEntities (true, true);
            //}
            
//========================================================================================
// 
//========================================================================================
            
            private function ShowEditorCustomCommandSettingDialog (onConfirmFunc:Function):void
            {
               Runtime.SetHasSettingDialogOpened (true);
               
               var dialog:EditorCustomCommandSettingDialog = new EditorCustomCommandSettingDialog ();
               PopUpManager.addPopUp (dialog, MainView, true);
               
               PopUpManager.centerPopUp (dialog);
               dialog.SetConfirmFunc (onConfirmFunc);
               dialog.SetCloseFunc (OnCloseDialog);
            }
            
        ]]>
   </mx:Script>
</mx:Application>

